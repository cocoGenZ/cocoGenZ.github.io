[{"id":"26cdbf141378457625c3c7f264148e8f","title":"solidity进阶","content":"solidity进阶\n16.函数重载\n重载\nsolidity中允许函数进行重载（overloading），即名字相同但输入参数类型不同的函数可以同时存在，他们被视为不同的函数。注意，solidity不允许修饰器（modifier）重载。\n函数重载\n举个例子，我们可以定义两个都叫saySomething()的函数，一个没有任何参数，输出\"Nothing\"；另一个接收一个string参数，输出这个string。\nfunction saySomething() public pure returns(string memory){\n    return(\"Nothing\");\n}\n\nfunction saySomething(string memory something) public pure returns(string memory){\n    return(something);\n}\n\n最终重载函数在经过编译器编译后，由于不同的参数类型，都变成了不同的函数选择器（selector）。(选择器在29的内容)\n实参匹配（Argument Matching）\n在调用重载函数时，会把输入的实际参数和函数参数的变量类型做匹配。 如果出现多个匹配的重载函数，则会报错。下面这个例子有两个叫f()的函数，一个参数为uint8，另一个为uint256：\n    function f(uint8 _in) public pure returns (uint8 out) {\n        out = _in;\n    }\n\n    function f(uint256 _in) public pure returns (uint256 out) {\n        out = _in;\n    }\n\n我们调用f(50)，因为50既可以被转换为uint8，也可以被转换为uint256，因此会报错。\n17.库合约\n库函数\n库函数是一种特殊的合约，为了提升solidity代码的复用性和减少gas而存在。库合约一般都是一些好用的函数合集（库函数），由大神或者项目方创作，咱们站在巨人的肩膀上，会用就行了。\n库函数和普通合约的不同：\n1.不能存在状态变量\n2.不能够继承或被继承\n3.不能接受以太币\n4.不可以被销毁\nString库合约\nString库合约是将uint256类型转换为相应的string类型的代码库，样例代码如下：\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) public pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) public pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp &gt;&gt;= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) public pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i &gt; 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value &amp; 0xf];\n            value &gt;&gt;= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n\n他主要包含两个函数，toString()将uint256转为string，toHexString()将uint256转换为16进制，在转换为string。\n如何使用库合约\n1.利用using for指令\n指令using A for B;可用于附加库函数（从库 A）到任何类型（B）。添加完指令后，库A中的函数会自动添加为B类型变量的成员，可以直接调用。注意：在调用的时候，这个变量会被当作第一个参数传递给函数：\n    // 利用using for指令\n    using Strings for uint256;\n    function getString1(uint256 _number) public pure returns(string memory){\n        // 库函数会自动添加为uint256型变量的成员\n        return _number.toHexString();\n    }\n\n2.通过库合约名称调用库函数\n    // 直接通过库合约名调用\n    function getString2(uint256 _number) public pure returns(string memory){\n        return Strings.toHexString(_number);\n    }\n\n\n\nString：将uint256转换为String\n\n\nAddress：判断某个地址是否为合约地址\n\n\nCreate2：更安全的使用Create2 EVM opcode\n\n\nArrays：跟数组相关的库函数\n\n\n18.Import\nsolidity支持利用import关键字导入其他源代码中的合约，让开发更加模块化。\nimport用法\n\n\n通过源文件相对位置导入，eg：\n\n\n文件结构\n├── Import.sol\n└── Yeye.sol\n\n// 通过文件相对位置import\nimport './Yeye.sol';\n\n\n\n通过源文件网址导入网上的合约，eg：\n\n\n// 通过网址引用\nimport 'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol';\n\n\n\n通过npm的目录导入，eg：\n\n\nimport '@openzeppelin/contracts/access/Ownable.sol';\n\n\n\n通过全局符号导入特定的合约，eg：\n\n\nimport {Yeye} from './Yeye.sol';\n\n\n\n引用(import)在代码中的位置为：在声明版本号之后，在其余代码之前。\n\n\n19.接受ETH\nSolidity支持两种特殊的回调函数，receive()和fallback()，他们主要在两种情况下被使用：\n\n\n接收ETH\n\n\n处理合约中不存在的函数调用（代理合约proxy contract）\n\n\n注意⚠️：在solidity 0.6.x版本之前，语法上只有 fallback() 函数，用来接收用户发送的ETH时调用以及在被调用函数签名没有匹配到时，来调用。 0.6版本之后，solidity才将 fallback() 函数拆分成 receive() 和 fallback() 两个函数。\n接受ETH函数receive\nreceive()只用于处理接收ETH。一个合约最多有一个receive()函数，声明方式与一般函数不一样，不需要function关键字：receive() external payable { ... }。receive()函数不能有任何的参数，不能返回任何值，必须包含external和payable。\n当合约接收ETH的时候，receive()会被触发。receive()最好不要执行太多的逻辑因为如果别人用send和transfer方法发送ETH的话，gas会限制在2300，receive()太复杂可能会触发Out of Gas报错；如果用call就可以自定义gas执行更复杂的逻辑（这三种发送ETH的方法我们之后会讲到）。\n可以在receive()里发送一个event，eg：\n    // 定义事件\n    event Received(address Sender, uint Value);\n    // 接收ETH时释放Received事件\n    receive() external payable {\n        emit Received(msg.sender, msg.value);\n    }\n\n有些恶意合约，会在receive() 函数（老版本的话，就是 fallback() 函数）嵌入恶意消耗gas的内容或者使得执行故意失败的代码，导致一些包含退款和转账逻辑的合约不能正常工作，因此写包含退款等逻辑的合约时候，一定要注意这种情况。\n回退函数fallback\nfallback()函数会在调用合约不存在的函数时被触发。可用于接收ETH，也可以用于代理合约proxy contract。fallback()声明时不需要function关键字，必须由external修饰，一般也会用payable修饰，用于接收ETH:fallback() external payable { ... }。\n我们定义一个fallback()函数，被触发时候会释放fallbackCalled事件，并输出msg.sender，msg.value和msg.data:\n    // fallback\n    fallback() external payable{\n        emit fallbackCalled(msg.sender, msg.value, msg.data);\n    }\n\nreceive和fallback的区别\nreceive和fallback都能够用于接收ETH，他们触发的规则如下：\n触发fallback() 还是 receive()?\n           接收ETH\n              |\n         msg.data是空？\n            /  \\\n          是    否\n          /      \\\nreceive()存在?   fallback()\n        / \\\n       是  否\n      /     \\\nreceive()   fallback()\n\n简单来说，合约接收ETH时，msg.data为空且存在receive()时，会触发receive()；msg.data不为空或不存在receive()时，会触发fallback()，此时fallback()必须为payable。\nreceive()和payable fallback()均不存在的时候，向合约发送ETH将会报错。\n20.发送ETH\n接受ETH合约\n我们先部署一个接收ETH合约ReceiveETH。ReceiveETH合约里有一个事件Log，记录收到的ETH数量和gas剩余。还有两个函数，一个是receive()函数，收到ETH被触发，并发送Log事件；另一个是查询合约ETH余额的getBalance()函数。\ncontract ReceiveETH {\n    // 收到eth事件，记录amount和gas\n    event Log(uint amount, uint gas);\n    \n    // receive方法，接收eth时被触发\n    receive() external payable{\n        emit Log(msg.value, gasleft());\n    }\n    \n    // 返回合约ETH余额\n    function getBalance() view public returns(uint) {\n        return address(this).balance;\n    }\n}\n\n部署ReceiveETH合约后，运行getBalance()函数，可以看到当前合约的ETH余额为0。\n发送ETH合约\n我们将实现三种方法向ReceiveETH合约发送ETH。首先，先在发送ETH合约SendETH中实现payable的构造函数和receive()，让我们能够在部署时和部署后向合约转账。\ncontract SendETH {\n    // 构造函数，payable使得部署的时候可以转eth进去\n    constructor() payable{}\n    // receive方法，接收eth时被触发\n    receive() external payable{}\n}\n\ntransfer\n\n\n用法是接收方地址.transfer(发送ETH数额)。\n\n\ntransfer()的gas限制是2300，足够用于转账，但对方合约的fallback()或receive()函数不能实现太复杂的逻辑。\n\n\ntransfer()如果转账失败，会自动revert（回滚交易）。\n\n\n代码样例，注意里面的_to填ReceiveETH合约的地址，amount是ETH转账金额：\n// 用transfer()发送ETH\nfunction transferETH(address payable _to, uint256 amount) external payable{\n    _to.transfer(amount);\n}\n\nsend\n\n\n用法是接收方地址.send(发送ETH数额)。\n\n\nsend()的gas限制是2300，足够用于转账，但对方合约的fallback()或receive()函数不能实现太复杂的逻辑。\n\n\nsend()如果转账失败，不会revert。\n\n\nsend()的返回值是bool，代表着转账成功或失败，需要额外代码处理一下。\n\n\n代码样例：\n// send()发送ETH\nfunction sendETH(address payable _to, uint256 amount) external payable{\n    // 处理下send的返回值，如果失败，revert交易并发送error\n    bool success = _to.send(amount);\n    if(!success){\n        revert SendFailed();\n    }\n}\n\ncall\n\n\n用法是接收方地址.call{value: 发送ETH数额}(\"\")。\n\n\ncall()没有gas限制，可以支持对方合约fallback()或receive()函数实现复杂逻辑。\n\n\ncall()如果转账失败，不会revert。\n\n\ncall()的返回值是(bool, data)，其中bool代表着转账成功或失败，需要额外代码处理一下。\n\n\n代码样例：\n// call()发送ETH\nfunction callETH(address payable _to, uint256 amount) external payable{\n    // 处理下call的返回值，如果失败，revert交易并发送error\n    (bool success,) = _to.call{value: amount}(\"\");\n    if(!success){\n        revert CallFailed();\n    }\n}\n\n三者的选择\n\n\ncall没有gas限制，最为灵活，是最提倡的方法；\n\n\ntransfer有2300 gas限制，但是发送失败会自动revert交易，是次优选择；\n\n\nsend有2300 gas限制，而且发送失败不会自动revert交易，几乎没有人用它。\n\n\n21.调用其他合约\n调用已部署合约\n开发者写智能合约来调用其他合约，这让以太坊网络上的程序可以复用，从而建立繁荣的生态。很多web3项目依赖于调用其他合约，比如收益农场（yield farming）。这一讲，我们介绍如何在已知合约代码（或接口）和地址情况下调用目标合约的函数。\n目标合约\n先写一个简单的合约OtherContract来调用。\ncontract OtherContract {\n    uint256 private _x = 0; // 状态变量_x\n    // 收到eth的事件，记录amount和gas\n    event Log(uint amount, uint gas);\n    \n    // 返回合约ETH余额\n    function getBalance() view public returns(uint) {\n        return address(this).balance;\n    }\n\n    // 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)\n    function setX(uint256 x) external payable{\n        _x = x;\n        // 如果转入ETH，则释放Log事件\n        if(msg.value &gt; 0){\n            emit Log(msg.value, gasleft());\n        }\n    }\n\n    // 读取_x\n    function getX() external view returns(uint x){\n        x = _x;\n    }\n}\n\n这个合约包含一个状态变量_x，一个事件Log在收到ETH时触发，三个函数：\n\n\ngetBalance(): 返回合约ETH余额。\n\n\nsetX(): external payable函数，可以设置_x的值，并向合约发送ETH。\n\n\ngetX(): 读取_x的值。\n\n\n调用OtherContract合约\n（先贴个源码吧，本来以为要创建两个文件的，只要一个文件部署两个合约就可以了）\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract OtherContract {\n    uint256 private _x = 0; // 状态变量x\n    // 收到eth事件，记录amount和gas\n    event Log(uint amount, uint gas);\n    \n    // 返回合约ETH余额\n    function getBalance() view public returns(uint) {\n        return address(this).balance;\n    }\n\n    // 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)\n    function setX(uint256 x) external payable{\n        _x = x;\n        // 如果转入ETH，则释放Log事件\n        if(msg.value &gt; 0){\n            emit Log(msg.value, gasleft());\n        }\n    }\n\n    // 读取x\n    function getX() external view returns(uint x){\n        x = _x;\n    }\n}\n\ncontract CallContract{\n    function callSetX(address _Address, uint256 x) external{\n        OtherContract(_Address).setX(x);\n    }\n\n    function callGetX(OtherContract _Address) external view returns(uint x){\n        x = _Address.getX();\n    }\n\n    function callGetX2(address _Address) external view returns(uint x){\n        OtherContract oc = OtherContract(_Address);\n        x = oc.getX();\n    }\n\n    function setXTransferETH(address otherContract, uint256 x) payable external{\n        OtherContract(otherContract).setX{value: msg.value}(x);\n    }\n}\n\n我们可以利用合约的地址和合约代码（或接口）来创建合约的引用：_Name(_Address)，其中_Name是合约名，_Address是合约地址。然后用合约的引用来调用它的函数：_Name(_Address).f()，其中f()是要调用的函数。\n下面我们介绍4个调用合约的例子，在remix中编译合约后，分别部署OtherContract和CallContract：(还没怎么搞得懂)\n\n\n\n1.传入合约地址\n我们可以在函数里传入目标合约地址，生成目标合约的引用，然后调用目标函数。以调用OtherContract合约的setX函数为例，我们在新合约中写一个callSetX函数，传入已部署好的OtherContract合约地址_Address和setX的参数x：\n    function callSetX(address _Address, uint256 x) external{\n        OtherContract(_Address).setX(x);\n    }\n\n复制OtherContract合约的地址，填入callSetX函数的参数中，成功调用后，调用OtherContract合约中的getX验证x变为123\n\n\n2.传入合约变量\n我们可以直接在函数里传入合约的引用，只需要把上面参数的address类型改为目标合约名，比如OtherContract。下面例子实现了调用目标合约的getX()函数。\n注意该函数参数OtherContract _Address底层类型仍然是address，生成的ABI中、调用callGetX时传入的参数都是address类型\n    function callGetX(OtherContract _Address) external view returns(uint x){\n        x = _Address.getX();\n    }\n\n复制OtherContract合约的地址，填入callGetX函数的参数中，调用后成功获取x的值\n\n3.创建合约变量\n我们可以创建合约变量，然后通过它来调用目标函数。下面例子，我们给变量oc存储了OtherContract合约的引用：\n    function callGetX2(address _Address) external view returns(uint x){\n        OtherContract oc = OtherContract(_Address);\n        x = oc.getX();\n    }\n\n复制OtherContract合约的地址，填入callGetX2函数的参数中，调用后成功获取x的值\n\n4.调用合约并发送ETH\n如果目标合约的函数是payable的，那么我们可以通过调用它来给合约转账：_Name(_Address).f{value: _Value}()，其中_Name是合约名，_Address是合约地址，f是目标函数名，_Value是要转的ETH数额（以wei为单位）。\nOtherContract合约的setX函数是payable的，在下面这个例子中我们通过调用setX来往目标合约转账。\n    function setXTransferETH(address otherContract, uint256 x) payable external{\n        OtherContract(otherContract).setX{value: msg.value}(x);\n    }\n\n复制OtherContract合约的地址，填入setXTransferETH函数的参数中，并转入10ETH\n\n转账后，我们可以通过Log事件和getBalance()函数观察目标合约ETH余额的变化。\n\n22.Call\ncall 是address类型的低级成员函数，它用来与其他合约交互。它的返回值为(bool, data)，分别对应call是否成功以及目标函数的返回值。\n\n\ncall是solidity官方推荐的通过触发fallback或receive函数发送ETH的方法。\n\n\n不推荐用call来调用另一个合约，因为当你调用不安全合约的函数时，你就把主动权交给了它。推荐的方法仍是声明合约变量后调用函数，见第21讲：调用其他合约\n\n\n当我们不知道对方合约的源代码或ABI，就没法生成合约变量；这时，我们仍可以通过call调用对方合约的函数。\n\n\ncall的使用规则\n目标合约地址.call(二进制编码);\n其中二进制编码利用结构化编码函数abi.encodeWithSignature获得：\nabi.encodeWithSignature(\"函数签名\", 逗号分隔的具体参数)\n\n函数签名为\"函数名（逗号分隔的参数类型)\"。例如abi.encodeWithSignature(\"f(uint256,address)\", _x, _addr)。\n另外call在调用合约时可以指定交易发送的ETH数额和gas：\n目标合约地址.call{value:发送数额, gas:gas数额}(二进制编码);\n\n(看不懂…举个栗子康康)\n目标合约\n先写一个简单的目标合约OtherContract并部署，代码与第19讲中基本相同，只是多了fallback函数。\ncontract OtherContract {\n    uint256 private _x = 0; // 状态变量x\n    // 收到eth的事件，记录amount和gas\n    event Log(uint amount, uint gas);\n    \n    fallback() external payable{}\n\n    // 返回合约ETH余额\n    function getBalance() view public returns(uint) {\n        return address(this).balance;\n    }\n\n    // 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)\n    function setX(uint256 x) external payable{\n        _x = x;\n        // 如果转入ETH，则释放Log事件\n        if(msg.value &gt; 0){\n            emit Log(msg.value, gasleft());\n        }\n    }\n\n    // 读取x\n    function getX() external view returns(uint x){\n        x = _x;\n    }\n}\n\n这个合约包含一个状态变量x，一个在收到ETH时触发的事件Log，三个函数：\n\n\ngetBalance(): 返回合约ETH余额。\n\n\nsetX(): external payable函数，可以设置x的值，并向合约发送ETH。\n\n\ngetX(): 读取x的值。\n\n\n利用call调用目标合约\n1.Response事件\n我们写一个Call合约来调用目标合约函数。首先定义一个Response事件，输出call返回的success和data，方便我们观察返回值。\n// 定义Response事件，输出call返回的结果success和data\nevent Response(bool success, bytes data);\n\n2.调用setX函数\n我们定义callSetX函数来调用目标合约的setX()，转入msg.value数额的ETH，并释放Response事件输出success和data：\nfunction callSetX(address payable _addr, uint256 x) public payable {\n    // call setX()，同时可以发送ETH\n    (bool success, bytes memory data) = _addr.call{value: msg.value}(\n        abi.encodeWithSignature(\"setX(uint256)\", x)\n    );\n\n    emit Response(success, data); //释放事件\n}\n\n接下来我们调用callSetX把状态变量_x改为5，参数为OtherContract地址和5，由于目标函数setX()没有返回值，因此Response事件输出的data为0x，也就是空。\n\n3.调用getX函数\n下面我们调用getX()函数，它将返回目标合约_x的值，类型为uint256。我们可以利用abi.decode来解码call的返回值data，并读出数值。\nfunction callGetX(address _addr) external returns(uint256){\n    // call getX()\n    (bool success, bytes memory data) = _addr.call(\n        abi.encodeWithSignature(\"getX()\")\n    );\n\n    emit Response(success, data); //释放事件\n    return abi.decode(data, (uint256));\n}\n\n从Response事件的输出，我们可以看到data为0x0000000000000000000000000000000000000000000000000000000000000005。而经过abi.decode，最终返回值为5。\n\n4.调用不存在的函数\n如果我们给call输入的函数不存在于目标合约，那么目标合约的fallback函数会被触发。\nfunction callNonExist(address _addr) external{\n    // call getX()\n    (bool success, bytes memory data) = _addr.call(\n        abi.encodeWithSignature(\"foo(uint256)\")\n    );\n\n    emit Response(success, data); //释放事件\n}\n\n上面例子中，我们call了不存在的foo函数。call仍能执行成功，并返回success，但其实调用的目标合约fallback函数。\n\ncall不是调用合约的推荐方法，因为不安全。但他能让我们在不知道源代码和ABI的情况下调用目标合约，很有用。\n(最后直接贴上所有代码)\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\ncontract OtherContract {\n    uint256 private _x = 0; // 状态变量x\n    // 收到eth的事件，记录amount和gas\n    event Log(uint amount, uint gas);\n    \n    fallback() external payable{}\n\n    // 返回合约ETH余额\n    function getBalance() view public returns(uint) {\n        return address(this).balance;\n    }\n\n    // 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)\n    function setX(uint256 x) external payable{\n        _x = x;\n        // 如果转入ETH，则释放Log事件\n        if(msg.value &gt; 0){\n            emit Log(msg.value, gasleft());\n        }\n    }\n\n    // 读取x\n    function getX() external view returns(uint x){\n        x = _x;\n    }\n}\n\n    contract call{\n        function callGetX(address _addr) external returns(uint256){\n    // call getX()\n    (bool success, bytes memory data) = _addr.call(\n        abi.encodeWithSignature(\"getX()\")\n    );\n\n    emit Response(success, data); //释放事件\n    return abi.decode(data, (uint256));\n}\n\n        event Response(bool success, bytes data);\n\n        function callSetX(address payable _addr, uint256 x) public payable {\n    // call setX()，同时可以发送ETH\n    (bool success, bytes memory data) = _addr.call{value: msg.value}(\n        abi.encodeWithSignature(\"setX(uint256)\", x)\n    );\n\n    emit Response(success, data); //释放事件\n}\n    function callNonExist(address _addr) external{\n    // call getX()\n    (bool success, bytes memory data) = _addr.call(\n        abi.encodeWithSignature(\"foo(uint256)\")\n    );\n\n    emit Response(success, data); //释放事件\n}\n    }\n\n23.Delegatecall\ndelegatecall与call类似，是solidity中地址类型的低级成员函数。delegate中是委托/代表的意思，那么delegatecall委托了什么？\n当用户A通过合约B来call合约C的时候，执行的是合约C的函数，语境(Context，可以理解为包含变量和状态的环境)也是合约C的：msg.sender是B的地址，并且如果函数改变一些状态变量，产生的效果会作用于合约C的变量上。\n\n而当用户A通过合约B来delegatecall合约C的时候，执行的是合约C的函数，但是语境仍是合约B的：msg.sender是A的地址，并且如果函数改变一些状态变量，产生的效果会作用于合约B的变量上。\n\n大家可以这样理解：一个富商把它的资产（状态变量）都交给一个VC代理（目标合约的函数）来打理。执行的是VC的函数，但是改变的是富商的状态。\ndelegatecall语法和call类似，也是：\n目标合约地址.delegatecall(二进制编码);\n\n其中二进制编码利用结构化编码函数abi.encodeWithSignature获得：\nabi.encodeWithSignature(\"函数签名\", 逗号分隔的具体参数)\n\n函数签名为\"函数名（逗号分隔的参数类型)\"。例如abi.encodeWithSignature(\"f(uint256,address)\", _x, _addr)。\n和call不一样，delegatecall在调用合约时可以指定交易发送的gas，但不能指定发送的ETH数额\n\n\n\n\n\n\n\n\n\n注意：delegatecall有安全隐患，使用时要保证当前合约和目标合约的状态变量存储结构相同，并且目标合约安全，不然会造成资产损失。\n什么情况下会用到delegatecall\n目前delegatecall主要有两个应用场景：\n\n\n代理合约（Proxy Contract）：将智能合约的存储合约和逻辑合约分开：代理合约（Proxy Contract）存储所有相关的变量，并且保存逻辑合约的地址；所有函数存在逻辑合约（Logic Contract）里，通过delegatecall执行。当升级时，只需要将代理合约指向新的逻辑合约即可。\n\n\nEIP-2535 Diamonds（钻石）：钻石是一个支持构建可在生产中扩展的模块化智能合约系统的标准。钻石是具有多个实施合同的代理合同。\n\n\ndelegatecall例子\n调用结构：你（A）通过合约B调用目标合约C。\n被调用的合约C\n我们先写一个简单的目标合约C：有两个public变量：num和sender，分别是uint256和address类型；有一个函数，可以将num设定为传入的_num，并且将sender设为msg.sender。\n// 被调用的合约C\ncontract C {\n    uint public num;\n    address public sender;\n\n    function setVars(uint _num) public payable {\n        num = _num;\n        sender = msg.sender;\n    }\n}\n\n发起调用的合约B\n首先，合约B和目标合约C的变量存储布局必须相同，两个变量，并且顺序为num和sender\ncontract B {\n    uint public num;\n    address public sender;\n\n接下来，我们分别用call和delegatecall来调用合约C的setVars函数，更好的理解它们的区别。\ncallSetVars函数通过call来调用setVars。它有两个参数_addr和_num，分别对应合约C的地址和setVars的参数。\n    // 通过call来调用C的setVars()函数，将改变合约C里的状态变量\n    function callSetVars(address _addr, uint _num) external payable{\n        // call setVars()\n        (bool success, bytes memory data) = _addr.call(\n            abi.encodeWithSignature(\"setVars(uint256)\", _num)\n        );\n    }\n\n而delegatecallSetVars函数通过delegatecall来调用setVars。与上面的callSetVars函数相同，有两个参数_addr和_num，分别对应合约C的地址和setVars的参数。\n    // 通过delegatecall来调用C的setVars()函数，将改变合约B里的状态变量\n    function delegatecallSetVars(address _addr, uint _num) external payable{\n        // delegatecall setVars()\n        (bool success, bytes memory data) = _addr.delegatecall(\n            abi.encodeWithSignature(\"setVars(uint256)\", _num)\n        );\n    }\n}\n\n在remix上验证\n1.首先，我们把合约B和C都部署好\n\n2.部署之后，查看C合约状态变量的初始值，B合约的状态变量也是一样。\n\n3.此时，调用合约B中的callSetVars，传入参数为合约C地址和10\n\n4.运行后，合约C中的状态变量将被修改：num被改为10，sender变为合约B的地址\n\n5.接下来，我们调用合约B中的delegatecallSetVars，传入参数为合约C地址和100\n\n6.由于是delegatecall，语境为合约B。在运行后，合约B中的状态变量将被修改：num被改为100，sender变为你的钱包地址。合约C中的状态变量不会被修改。\n\n24.在合约中创建新合约\n在以太坊链上，用户（外部账户，EOA）可以创建智能合约，智能合约同样也可以创建新的智能合约。去中心化交易所uniswap就是利用工厂合约（Factory）创建了无数个币对合约（Pair）。这一讲，我会用简化版的uniswap讲如何通过合约创建合约。\ncreate和create2\n有两种方法可以在合约中创建新合约，create和create2，这里我们讲create，下一讲会介绍create2。\ncreate的用法很简单，就是new一个合约，并传入新合约构造函数所需的参数：\nContract x = new Contract{value: _value}(params)\n\n其中Contract是要创建的合约名，x是合约对象（地址），如果构造函数是payable，可以创建时转入_value数量的ETH，params是新合约构造函数的参数。\n极简Uniswap\nUniswap V2核心合约中包含两个合约：\n\n\nUniswapV2Pair: 币对合约，用于管理币对地址、流动性、买卖。\n\n\nUniswapV2Factory: 工厂合约，用于创建新的币对，并管理币对地址。\n\n\n下面我们用create方法实现一个极简版的Uniswap：Pair币对合约负责管理币对地址，PairFactory工厂合约用于创建新的币对，并管理币对地址。\nPair合约\ncontract Pair{\n    address public factory; // 工厂合约地址\n    address public token0; // 代币1\n    address public token1; // 代币2\n\n    constructor() payable {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n}\n\nPair合约很简单，包含3个状态变量：factory，token0和token1。\n构造函数constructor在部署时将factory赋值为工厂合约地址。initialize函数会在Pair合约创建的时候被工厂合约调用一次，将token0和token1更新为币对中两种代币的地址。\n\n\n\n\n\n\n\n\n\n提问：为什么uniswap不在constructor中将token0和token1地址更新好？\n答：因为uniswap使用的是create2创建合约，限制构造函数不能有参数。当使用create时，Pair合约允许构造函数有参数，可以在constructor中将token0和token1地址更新好。\nPairFactory\ncontract PairFactory{\n    mapping(address =&gt; mapping(address =&gt; address)) public getPair; // 通过两个代币地址查Pair地址\n    address[] public allPairs; // 保存所有Pair地址\n\n    function createPair(address tokenA, address tokenB) external returns (address pairAddr) {\n        // 创建新合约\n        Pair pair = new Pair(); \n        // 调用新合约的initialize方法\n        pair.initialize(tokenA, tokenB);\n        // 更新地址map\n        pairAddr = address(pair);\n        allPairs.push(pairAddr);\n        getPair[tokenA][tokenB] = pairAddr;\n        getPair[tokenB][tokenA] = pairAddr;\n    }\n}\n\n工厂合约（PairFactory）有两个状态变量getPair是两个代币地址到币对地址的map，方便根据代币找到币对地址；allPairs是币对地址的数组，存储了所有代币地址。\nPairFactory合约只有一个createPair函数，根据输入的两个代币地址tokenA和tokenB来创建新的Pair合约。其中\n    Pair pair = new Pair(); \n\n就是创建合约的代码，非常简单。大家可以部署好PairFactory合约，然后用下面两个地址作为参数调用createPair，看看创建的币对地址是什么：\nWBNB地址: 0x2c44b726ADF1963cA47Af88B284C06f30380fC78\nBSC链上的PEOPLE地址:\n0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\n\n在remix上验证\n1.使用WBNB和PEOPLE的地址作为参数调用createPair,得到Pair合约地址：0xD3e2008b4Da2cD6DEAF73471590fF30C86778A48\n\n（刚开始没整出来，加个步骤，复制得到的Pair合约地址，放到At Address里面，同时上面部署合约要改回Pair,点击At Address得到合约）\n\n2.查看Pair合约变量\n\n3.Debug查看create操作码\n\n25.Create2\nCREATE2 操作码使我们在智能合约部署在以太坊网络之前就能预测合约的地址。Uniswap创建Pair合约用的就是CREATE2而不是CREATE。\nCreate如何计算地址\n智能合约可以由其他合约和普通账户利用CREATE操作码创建。 在这两种情况下，新合约的地址都以相同的方式计算：创建者的地址(通常为部署的钱包地址或者合约地址)和nonce(该地址发送交易的总数,对于合约账户是创建的合约总数,每创建一个合约nonce+1))的哈希。\n新地址 = hash(创建者地址, nonce)\n\n创建者地址不会变，但nonce可能会随时间而改变，因此用CREATE创建的合约地址不好预测。\nCreate2如何计算地址\nCREATE2的目的是为了让合约地址独立于未来的事件。不管未来区块链上发生了什么，你都可以把合约部署在事先计算好的地址上。用CREATE2创建的合约地址由4个部分决定：\n\n\n0xFF：一个常数，避免和CREATE冲突\n\n\n创建者地址\n\n\nsalt（盐）：一个创建者给定的数值\n\n\n待部署合约的字节码（bytecode）\n\n\n新地址 = hash(\"0xFF\",创建者地址, salt, bytecode)\n\nCREATE2 确保，如果创建者使用 CREATE2 和提供的 salt 部署给定的合约bytecode，它将存储在 新地址 中。\n如何使用Create2\nCREATE2的用法和之前讲的Create类似，同样是new一个合约，并传入新合约构造函数所需的参数，只不过要多传一个salt参数：\nContract x = new Contract{salt: _salt, value: _value}(params)\n\n其中Contract是要创建的合约名，x是合约对象（地址），_salt是指定的盐；如果构造函数是payable，可以创建时转入_value数量的ETH，params是新合约构造函数的参数。\n极简Uniswap2\nPair\ncontract Pair{\n    address public factory; // 工厂合约地址\n    address public token0; // 代币1\n    address public token1; // 代币2\n\n    constructor() payable {\n        factory = msg.sender;\n    }\n\n    // called once by the factory at time of deployment\n    function initialize(address _token0, address _token1) external {\n        require(msg.sender == factory, 'UniswapV2: FORBIDDEN'); // sufficient check\n        token0 = _token0;\n        token1 = _token1;\n    }\n}\n\nPair合约很简单，包含3个状态变量：factory，token0和token1。\n构造函数constructor在部署时将factory赋值为工厂合约地址。initialize函数会在Pair合约创建的时候被工厂合约调用一次，将token0和token1更新为币对中两种代币的地址。\nPairFactory2\ncontract PairFactory2{\n        mapping(address =&gt; mapping(address =&gt; address)) public getPair; // 通过两个代币地址查Pair地址\n        address[] public allPairs; // 保存所有Pair地址\n\n        function createPair2(address tokenA, address tokenB) external returns (address pairAddr) {\n            require(tokenA != tokenB, 'IDENTICAL_ADDRESSES'); //避免tokenA和tokenB相同产生的冲突\n            // 计算用tokenA和tokenB地址计算salt\n            (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA); //将tokenA和tokenB按大小排序\n            bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n            // 用create2部署新合约\n            Pair pair = new Pair{salt: salt}(); \n            // 调用新合约的initialize方法\n            pair.initialize(tokenA, tokenB);\n            // 更新地址map\n            pairAddr = address(pair);\n            allPairs.push(pairAddr);\n            getPair[tokenA][tokenB] = pairAddr;\n            getPair[tokenB][tokenA] = pairAddr;\n        }\n    }\n\n工厂合约（PairFactory2）有两个状态变量getPair是两个代币地址到币对地址的map，方便根据代币找到币对地址；allPairs是币对地址的数组，存储了所有币对地址。\nPairFactory2合约只有一个createPair2函数，使用CREATE2根据输入的两个代币地址tokenA和tokenB来创建新的Pair合约。其中\n    Pair pair = new Pair{salt: salt}(); \n\n就是利用CREATE2创建合约的代码，非常简单，而salt为token1和token2的hash：\n            bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n\n事先计算Pair地址\n        // 提前计算pair合约地址\n        function calculateAddr(address tokenA, address tokenB) public view returns(address predictedAddress){\n            require(tokenA != tokenB, 'IDENTICAL_ADDRESSES'); //避免tokenA和tokenB相同产生的冲突\n            // 计算用tokenA和tokenB地址计算salt\n            (address token0, address token1) = tokenA &lt; tokenB ? (tokenA, tokenB) : (tokenB, tokenA); //将tokenA和tokenB按大小排序\n            bytes32 salt = keccak256(abi.encodePacked(token0, token1));\n            // 计算合约地址方法 hash()\n            predictedAddress = address(uint160(uint(keccak256(abi.encodePacked(\n                bytes1(0xff),\n                address(this),\n                salt,\n                keccak256(type(Pair).creationCode)\n            )))));\n        }\n\n我们写了一个calculateAddr函数来事先计算tokenA和tokenB将会生成的Pair地址。通过它，我们可以验证我们事先计算的地址和实际地址是否相同。\n大家可以部署好PairFactory2合约，然后用下面两个地址作为参数调用createPair2，看看创建的币对地址是什么，是否与事先计算的地址一样：\nWBNB地址: 0x2c44b726ADF1963cA47Af88B284C06f30380fC78\nBSC链上的PEOPLE地址:\n0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c\n\n在remix上验证\n\n\n首先用WBNB和PEOPLE的地址哈希作为salt来计算出Pair合约的地址\n\n\n调用PairFactory2.createPair2传入参数为WBNB和PEOPLE的地址，获取出创建的pair合约地址\n\n\n对比合约地址\n\n\n\ncreate2的实际应用场景\n\n\n交易所为新用户预留创建钱包合约地址。\n\n\n由 CREATE2 驱动的 factory 合约，在uniswapV2中交易对的创建是在 Factory中调用create2完成。这样做的好处是: 它可以得到一个确定的pair地址, 使得 Router中就可以通过 (tokenA, tokenB) 计算出pair地址, 不再需要执行一次 Factory.getPair(tokenA, tokenB) 的跨合约调用。\n\n\n26.删除合约\nselfdestruct\nselfdestruct命令可以用来删除智能合约，并将该合约剩余ETH转到指定地址。selfdestruct是为了应对合约出错的极端情况而设计的。它最早被命名为suicide（自杀），但是这个词太敏感。为了保护抑郁的程序员，改名为selfdestruct。\n如何使用selfdestruct\nselfdestruct使用起来非常简单：\nselfdestruct(_addr)；\n\n其中_addr是接收合约中剩余ETH的地址。\n例子\ncontract DeleteContract {\n\n    uint public value = 10;\n\n    constructor() payable {}\n\n    receive() external payable {}\n\n    function deleteContract() external {\n        // 调用selfdestruct销毁合约，并把剩余的ETH转给msg.sender\n        selfdestruct(payable(msg.sender));\n    }\n\n    function getBalance() external view returns(uint balance){\n        balance = address(this).balance;\n    }\n}\n\n在DeleteContract合约中，我们写了一个public状态变量value，两个函数：getBalance()用于获取合约ETH余额，deleteContract()用于自毁合约，并把ETH转入给发起人。\n部署好合约后，我们向DeleteContract合约转入1 ETH。这时，getBalance()会返回1 ETH，value变量是10。\n当我们调用deleteContract()函数，合约将自毁，所有变量都清空，此时value变为默认值0，getBalance()也返回空值。\n注意事项\n\n\n对外提供合约销毁接口时，最好设置为只有合约所有者可以调用，可以使用函数修饰符onlyOwner进行函数声明。\n\n\n当合约被销毁后与智能合约的交互也能成功，并且返回0。\n\n\n当合约中有selfdestruct功能时常常会带来安全问题和信任问题，合约中的Selfdestruct功能会为攻击者打开攻击向量(例如使用selfdestruct向一个合约频繁转入token进行攻击，这将大大节省了GAS的费用，虽然很少人这么做)，此外，此功能还会降低用户对合约的信心。\n\n\n27.ABI编码解码\nABI (Application Binary Interface，应用二进制接口)是与以太坊智能合约交互的标准。数据基于他们的类型编码；并且由于编码后不包含类型信息，解码时需要注明它们的类型。\nSolidity中，ABI编码有4个函数：abi.encode, abi.encodePacked, abi.encodeWithSignature, abi.encodeWithSelector。而ABI解码有1个函数：abi.decode，用于解码abi.encode的数据。\nABI编码\n我们将用编码4个变量，他们的类型分别是uint256, address, string, uint256[2]：\n    uint x = 10;\n    address addr = 0x7A58c0Be72BE218B41C608b7Fe7C5bB630736C71;\n    string name = \"0xAA\";\n    uint[2] array = [5, 6]; \n\nabi.encode\n将给定参数利用ABI规则编码。ABI被设计出来跟智能合约交互，他将每个参数填充为32字节的数据，并拼接在一起。如果你要和合约交互，你要用的就是abi.encode。\n    function encode() public view returns(bytes memory result) {\n        result = abi.encode(x, addr, name, array);\n    }\n\n编码的结果为0x000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c7100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043078414100000000000000000000000000000000000000000000000000000000，由于abi.encode将每个数据都填充为32字节，中间有很多0。\nabi.encodePacked\n将给定参数根据其所需最低空间编码。它类似 abi.encode，但是会把其中填充的很多0省略。比如，只用1字节来编码uint类型。当你想省空间，并且不与合约交互的时候，可以使用abi.encodePacked，例如算一些数据的hash时。\n    function encodePacked() public view returns(bytes memory result) {\n        result = abi.encodePacked(x, addr, name, array);\n    }\n\n编码的结果为0x000000000000000000000000000000000000000000000000000000000000000a7a58c0be72be218b41c608b7fe7c5bb630736c713078414100000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006，由于abi.encodePacked对编码进行了压缩，长度比abi.encode短很多。\nabi.encodeWithSignature\n与abi.encode功能类似，只不过第一个参数为函数签名，比如\"foo(uint256,address)\"。当调用其他合约的时候可以使用。\n    function encodeWithSignature() public view returns(bytes memory result) {\n        result = abi.encodeWithSignature(\"foo(uint256,address,string,uint256[2])\", x, addr, name, array);\n    }\n\n编码的结果为0xe87082f1000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c7100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043078414100000000000000000000000000000000000000000000000000000000，等同于在abi.encode编码结果前加上了4字节的函数选择器说明。 说明: 函数选择器就是通过函数名和参数进行签名处理(Keccak–Sha3)来标识函数，可以用于不同合约之间的函数调用\nabi.encodeWithSelector\n与abi.encodeWithSignature功能类似，只不过第一个参数为函数选择器，为函数签名Keccak哈希的前4个字节。\n    function encodeWithSelector() public view returns(bytes memory result) {\n        result = abi.encodeWithSelector(bytes4(keccak256(\"foo(uint256,address,string,uint256[2])\")), x, addr, name, array);\n    }\n\n编码的结果为0xe87082f1000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c7100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043078414100000000000000000000000000000000000000000000000000000000，与abi.encodeWithSignature结果一样。\nABI解码\nabi.decode\nabi.decode用于解码abi.encode生成的二进制编码，将它还原成原本的参数。\n    function decode(bytes memory data) public pure returns(uint dx, address daddr, string memory dname, uint[2] memory darray) {\n        (dx, daddr, dname, darray) = abi.decode(data, (uint, address, string, uint[2]));\n    }\n\n我们将abi.encode的二进制编码输入给decode，将解码出原来的参数：\n\nABI的使用场景\n1.在合约开发中，ABI常配合call来实现对合约的底层调用。\n    bytes4 selector = contract.getValue.selector;\n\n    bytes memory data = abi.encodeWithSelector(selector, _x);\n    (bool success, bytes memory returnedData) = address(contract).staticcall(data);\n    require(success);\n\n    return abi.decode(returnedData, (uint256));\n\n2.ethers.js中常用ABI实现合约的导入和函数调用。\n    const wavePortalContract = new ethers.Contract(contractAddress, contractABI, signer);\n    /*\n        * Call the getAllWaves method from your Smart Contract\n        */\n    const waves = await wavePortalContract.getAllWaves();\n\n3.对不开源合约进行反编译后，某些函数无法查到函数签名，可通过ABI进行调用。\n\n\n0x533ba33a() 是一个反编译后显示的函数，只有函数编码后的结果，并且无法查到函数签名\n\n\n\n这种情况无法通过构造interface接口或contract来进行调用\n\n\n\n这种情况下，就可以通过ABI函数选择器来调用\n    bytes memory data = abi.encodeWithSelector(bytes4(0x533ba33a));\n\n    (bool success, bytes memory returnedData) = address(contract).staticcall(data);\n    require(success);\n\n    return abi.decode(returnedData, (uint256));\n\n28.Hash\n哈希函数（hash function）是一个密码学概念，它可以将任意长度的消息转换为一个固定长度的值，这个值也称作哈希（hash）。\nHash的性质\n一个好的哈希函数应该具有以下几个特性：\n\n\n单向性：从输入的消息到它的哈希的正向运算简单且唯一确定，而反过来非常难，只能靠暴力枚举。\n\n\n灵敏性：输入的消息改变一点对它的哈希改变很大。\n\n\n高效性：从输入的消息到哈希的运算高效。\n\n\n均一性：每个哈希值被取到的概率应该基本相等。\n\n\n抗碰撞性：\n\n弱抗碰撞性：给定一个消息x，找到另一个消息x'使得hash(x) = hash(x')是困难的。\n强抗碰撞性：找到任意x和x'，使得hash(x) = hash(x')是困难的。\n\n\n\nHash的应用\n\n\n生成数据唯一标识\n\n\n加密签名\n\n\n安全加密\n\n\nKeccak256\nKeccak256函数是solidity中最常用的哈希函数，用法非常简单：\n哈希 = keccak256(数据);\n\nKeccak256和sha3\n\n\nsha3由keccak标准化而来，在很多场合下Keccak和SHA3是同义词，但在2015年8月SHA3最终完成标准化时，NIST调整了填充算法。所以SHA3就和keccak计算的结果不一样，这点在实际开发中要注意。\n\n\n以太坊在开发的时候sha3还在标准化中，所以采用了keccak，所以Ethereum和Solidity智能合约代码中的SHA3是指Keccak256，而不是标准的NIST-SHA3，为了避免混淆，直接在合约代码中写成Keccak256是最清晰的。\n\n\n生成数据唯一标志\n我们可以利用keccak256来生成一些数据的唯一标识。比如我们有几个不同类型的数据：uint，string，address，我们可以先用abi.encodePacked方法将他们打包编码，然后再用keccak256来生成唯一标识：\n    function hash(\n        uint _num,\n        string memory _string,\n        address _addr\n    ) public pure returns (bytes32) {\n        return keccak256(abi.encodePacked(_num, _string, _addr));\n    }\n\n弱抗碰撞性\n我们用keccak256演示一下之前讲到的弱抗碰撞性，即给定一个消息x，找到另一个消息x'使得hash(x) = hash(x')是困难的。\n我们给定一个消息0xAA，试图去找另一个消息，使得它们的哈希值相等：\n    // 弱抗碰撞性\n    function weak(\n        string memory string1\n    )public view returns (bool){\n        return keccak256(abi.encodePacked(string1)) == _msg;\n    }\n\n（大家可以试个10次，看看能不能幸运的碰撞上。）\n强抗碰撞性\n我们用keccak256演示一下之前讲到的强抗碰撞性，即找到任意不同的x和x'，使得hash(x) = hash(x')是困难的。\n我们构造一个函数strong，接收两个不同的string参数string1和string2，然后判断它们的哈希是否相同：\n    // 强抗碰撞性\n    function strong(\n        string memory string1,\n        string memory string2\n    )public pure returns (bool){\n        return keccak256(abi.encodePacked(string1)) == keccak256(abi.encodePacked(string2));\n    }\n\n（大家可以试个10次，看看能不能幸运的碰撞上。）\n29.选择器\nselector\n当我们调用智能合约时，本质上是向目标合约发送了一段calldata，在remix中发送一次交易后，可以在详细信息中看见input即为此次交易的calldata\n\n发送的calldata中前4个字节是selector（函数选择器）。\nmsg.data\nmsg.data是solidity中的一个全局变量，值为完整的calldata（调用函数时传入的数据）。\n在下面的代码中，我们可以通过Log事件来输出调用mint函数的calldata：\n    // event 返回msg.data\n    event Log(bytes data);\n\n    function mint(address to) external{\n        emit Log(msg.data);\n    }\n\n当参数为0x2c44b726ADF1963cA47Af88B284C06f30380fC78时，输出的calldata为\n0x6a6278420000000000000000000000002c44b726adf1963ca47af88b284c06f30380fc78\n\n这段很乱的字节码可以分成两部分：\n前4个字节为函数选择器selector：\n0x6a627842\n\n后面32个字节为输入的参数：\n0x0000000000000000000000002c44b726adf1963ca47af88b284c06f30380fc78\n\n其实calldata就是告诉智能合约，我要调用哪个函数，以及参数是什么。\nmethod id、selector和函数签名\nmethod id定义为函数签名的Keccak哈希后的前4个字节，当selector与method id相匹配时，即表示调用该函数，那么函数签名是什么？\n其实在第21讲中，我们简单介绍了函数签名，为\"函数名（逗号分隔的参数类型)\"。举个例子，上面代码中mint的函数签名为\"mint(address)\"。在同一个智能合约中，不同的函数有不同的函数签名，因此我们可以通过函数签名来确定要调用哪个函数。\n注意：在函数签名中，uint和int要写为uint256和int256。\n我们写一个函数，来验证mint函数的method id是否为0x6a627842。大家可以运行下面的函数，看看结果。\n    function mintSelector() external pure returns(bytes4 mSelector){\n        return bytes4(keccak256(\"mint(address)\"));\n    }\n\n结果正是0x6a627842：\n\n使用selector\n我们可以利用selector来调用目标函数。例如我想调用mint函数，我只需要利用abi.encodeWithSelector将mint函数的method id作为selector和参数打包编码，传给call函数：\n    function callWithSignature() external returns(bool, bytes memory){\n        (bool success, bytes memory data) = address(this).call(abi.encodeWithSelector(0x6a627842, \"0x2c44b726ADF1963cA47Af88B284C06f30380fC78\"));\n        return(success, data);\n    }\n\n在日志中，我们可以看到mint函数被成功调用，并输出Log事件。\n\n30.Try Catch\ntry-catch是现代编程语言几乎都有的处理异常的一种标准方式，solidity0.6版本也添加了它。\ntry-catch\n在solidity中，try-catch只能被用于**external函数或创建合约时constructor（被视为external函数）的调用**。基本语法如下：\n        try externalContract.f() {\n            // call成功的情况下 运行一些代码\n        } catch {\n            // call失败的情况下 运行一些代码\n        }\n\n其中externalContract.f()是某个外部合约的函数调用，try模块在调用成功的情况下运行，而catch模块则在调用失败时运行。\n同样可以使用this.f()来替代externalContract.f()，this.f()也被视作为外部调用，但不可在构造函数中使用，因为此时合约还未创建。\n如果调用的函数有返回值，那么必须在try之后声明returns(returnType val)，并且在try模块中可以使用返回的变量；如果是创建合约，那么返回值是新创建的合约变量。\n        try externalContract.f() returns(returnType val){\n            // call成功的情况下 运行一些代码\n        } catch {\n            // call失败的情况下 运行一些代码\n        }\n\n另外，catch模块支持捕获特殊的异常原因：\n        try externalContract.f() returns(returnType){\n            // call成功的情况下 运行一些代码\n        } catch Error(string memory reason) {\n            // 捕获失败的 revert() 和 require()\n        } catch (bytes memory reason) {\n            // 捕获失败的 assert()\n        }\n\ntry-catch实战\nonlyEven\n我们创建一个外部合约OnlyEven，并使用try-catch来处理异常：\ncontract OnlyEven{\n    constructor(uint a){\n        require(a != 0, \"invalid number\");\n        assert(a != 1);\n    }\n\n    function onlyEven(uint256 b) external pure returns(bool success){\n        // 输入奇数时revert\n        require(b % 2 == 0, \"Ups! Reverting\");\n        success = true;\n    }\n}\n\nOnlyEven合约包含一个构造函数和一个onlyEven函数。\n\n\n构造函数有一个参数a，当a=0时，require会抛出异常；当a=1时，assert会抛出异常；其他情况均正常。\n\n\nonlyEven函数有一个参数b，当b为奇数时，require会抛出异常。\n\n\n处理外部函数调用异常\n首先，在TryCatch合约中定义一些事件和状态变量：\n    // 成功event\n    event SuccessEvent();\n\n    // 失败event\n    event CatchEvent(string message);\n    event CatchByte(bytes data);\n\n    // 声明OnlyEven合约变量\n    OnlyEven even;\n\n    constructor() {\n        even = new OnlyEven(2);\n    }\n\nSuccessEvent是调用成功会释放的事件，而CatchEvent和CatchByte是抛出异常时会释放的事件，分别对应require/revert和assert异常的情况。even是个OnlyEven合约类型的状态变量。\n然后我们在execute函数中使用try-catch处理调用外部函数onlyEven中的异常：\n    // 在external call中使用try-catch\n    function execute(uint amount) external returns (bool success) {\n        try even.onlyEven(amount) returns(bool _success){\n            // call成功的情况下\n            emit SuccessEvent();\n            return _success;\n        } catch Error(string memory reason){\n            // call不成功的情况下\n            emit CatchEvent(reason);\n        }\n    }\n\n","slug":"solidity进阶","date":"2022-12-07T15:23:57.000Z","categories_index":"","tags_index":"solidity","author_index":"cocoZ"},{"id":"3b889475d55359c53070293a35d903d7","title":"solidity入门","content":"solidity\n1.入门\n// SPDX-License-Identifier: MIT\t\t\t\t//这个代码所用的软件许可，如果不写许可，编译时会警告\npragma solidity ^0.8.4;\t\t\t\t//声明源文件所用的solidity版本\ncontract HelloWeb3{\t\t\t\t//创建合约（contract），并声明合约名字为Helloweb3\n    string public _string = \"Hello Web3!\";\t\t//合约的内容，声明了一个string（字符串）变量_string，并赋值\n}\n\n2.数值类型\n数值类型\n1.布尔型：二值变量，取值为** true或false**\nbool public  _bool = true;\n布尔值的运算符：！（逻辑非）、&amp;&amp;（逻辑与）、||（逻辑或）、==（等于）、！=（不等于）\n2.整型：\nint public _int = -1;\t\t\t//整数，包括负数\nuint public _uint = 1;\t\t\t//正整数\nuint256 public _number = 20220330;\t\t //256位正整数\nuint public _coco1 =2**4;\t\t//求指数2^4=16\nbool public _numberbool = _Uint &gt; _int;\t\t//比大小\n\n3.地址类型：存储一个20字节的值（以太坊地址的大小）。地址类型也由成员变量，并作为所有合约的基础。地址类型分为普通的地址和可以转账ETH的地址（payable）\npayable的地址拥有balance和transfer（）两个成员，方便查询ETH余额以及转账。\naddress public _address =0x7A58c0Be72BE218B41C608b7Fe7C5bB630736C71;\naddress payable public _address1 = payable(_address);\t\t//payable address可以转账、查余额\nuint256 public balance = _address1.balance;  //address1的余额\n\n4.定长字节数组：字节数组bytes分为定长（byte,bytes8，bytes32）和不定长。（定长的属于数值类型，不定长的属于引用类型）定长byte可以存一些数据，消耗gas比较少\nbytes32 public _byte32 = \"Minisolidity\";\t\t//Minisolidity变量以字节的方式存储进变量_byte32，转换成16进制为：0x4d696e69536f6c69646974790000000000000000000000000000000000000000\nbytes1 public _byte = _byte32[0];\t\t//_byte变量存储_byte32的第一个字节，为0x4d\n\nTip：byte是bytes1的别名\n\n（Q:为啥每个元素会浪费31字节？)\n5.枚举enum\n枚举是solidity中用户定义的数据类型，主要为uint分配名称，使程序易于阅读和维护（参考c语言）\nenum ActionSet{Buy,hold,Sell}\t\t//用enum将unit 0， 1， 2表示为Buy, Hold, Sell\nActionSet action = ActionSet.Buy;\t//创建enum变量action\n\n\n（Q:这段话有点看不懂，啥叫显式的和uint相互转换？然后检查是怎么检查的？)\n\nemmmmm，懂了，我觉得就是数组名称和数组索引的转换，检查是自动会检查的，如果不在长度内会报错\n3.函数类型\n函数\n    function &lt;function name&gt;(&lt;parameter types&gt;) {internal|external|public|private} [pure|view|payable] [returns (&lt;return types&gt;)]\n\n    function 函数名(输入到函数的变量类型和名字) 函数可见性说明符 决定函数权限/功能的关键字 returns(函数返回的变量类型和名称)\n\n1.function：声明函数的关键字\n2.&lt;function name&gt;：函数名\n3.(&lt;parameter types&gt;)：函数的参数，变量类型+变量名\n4.{internal|external|public|private}：函数可见性说明符，一共4种（没标明函数类型的，默认internal）\n\n\npublic：内部外部都可见（也可以用于修饰状态变量，public变量会自动生成getter函数，用于查询数据）\n\n\nprivate：只能从合约内部访问，继承的合约也不能用（也可用于修饰状态变量）\n\n\nexternal：只能从合约外部访问（但是可以用this.f()来调用，f是函数名）\n\n\ninternal：只能从合约内部访问，继承的合约可以用（也可以用于修饰状态变量）\n5.[pure|view|payable]：决定函数权限/功能的关键字。（payable运行时可以给合约转入ETH）\n6.[returns()]：函数返回的变量类型和名称\n\n\n\neg: function getData() external view returns(uint256) {\n         return data;\n     } \n\n关于pure和view\n在合约里面定义一个状态变量number=5\n// SPDX-License-Indentifier:MIT\npragma solidity ^0.8.4;\ncontract FunctionTypes{\nuint256 public number=5;\n\n定义一个add()函数，每次调用，每次给number+1\n//默认\nfunction add() external{\nnumber=number+1;\n}\n\n如果add()包含了pure关键字，例如function add() pure external，就会报错。pure没有权限读取合约的相关变量，更没有权限改写。pure函数能干啥捏？(pure：纯纯牛马emmmmm)\neg：可以给函数传递一个参数_number，然后让他返回_number+1\nfunction addPure(uint256 _number) external pure returns(uint256 new_number){\nnew_number=_number+1;\n}\n\n\n如图，在_number位置传入一个参数7，就会执行函数，得到输出结果为8\n如果add()包含view，比如function add() view external也会报错。因为view能读取，但是不能够改写状态变量。可以稍微改一下，让其不改写number，而是返回一个新的变量。(view：看客)\nuint public number=1;\nfunction addView() external view returns(uint256 new_number){\nnew_number=number+1;\n}\n\n\n点击addView这个函数就会直接读取number=5，直接输出number3=6\n（Q:遇到一个问题，就是这样子写报错了，addView函数里面写uint256 number=5也会报错，我觉得是因为view只有读取的权限没有写入的权限，是嘛是嘛？？？）\n\n\n为什么引入pure和view关键字\nsolidity引入pure和view关键字主要是为了节省gas和控制函数权限：如果用户直接调用pure/view方程是不消耗gas的（合约中非pure/gas函数调用它们则会改写链上状态，需要付gas）\n关于internal和external\n（Q：我自己问出了一个很蠢的问题：怎么区分合约内部和外部）我思考了一下，还是要回到1入门那边，最开始学习到的创建一个合约\n\n所以我知道怎么区分了（所以我是pure，纯纯牛马一个\n//internal:内部\nfunction minus() internal{\nnumber=number-1;\n}\n//合约内的函数可以调用内部函数\nfunction minusCall() external(){\nminus();\n}\n\n定义一个internal的minus()函数，每次调用使number-1。由于是internal，只能从合约内部调用，不能从外部。因此，还要再定义一个external的minusCall()函数，来直接调用内部的minus()\n\n图片里面只能看到minus222（）看不到minus（）这样子\n（Tip：我的理解是internal有像把函数写进合约内部，然后external是写在外部，直接调用即可。)（这样子理解有问题否？？？？？\npayable\n//payable：递钱，能给合约支付ETH的函数\nfunction minusPayable() external payable returns(uint256 balance){\nminus();\nbalance=address(this).balance;\n}\n\n定义一个external payable的minusPayable()函数，间接的调用minus()，并且返回合约里的ETH余额（this关键字可以让我们引用合约地址）我们可以再调用minusPayable()时，往合约里转入1个ETH\n\n是这样的，可以在左下角看到余额balance：1ETH\n\n4.函数输出return\n返回值return和returns\nreturn和returns这两个关键字与函数输出相关。区别在于：\n\n\nreturns加在函数名后面，用于声明返回的变量类型及变量名；\n\n\nreturns用于函数主体中，返回指定的变量。\n\n\n//返回多个变量\nfunction returnMultiple() public pure returns(uint256,bool,uint256[3] memory){\nreturn(1,true,[uint256(1),2,5]);\n}\n\n声明了returnMultiple()函数将有多个输出：returns(uint256,bool,uint256[3] memory)，接着在函数的主体中用return(1,true,[uint256(1),2,5])确定了返回值\n命名式返回\n我们可以在returns中 标明返回变量的名称，这样solidity会自动给这些变量初始化，并且自动返回这些函数的值，不需要加return\n    // 返回多个变量\n    function returnMultiple() public pure returns(uint256, bool, uint256[3] memory){\n            return(1, true, [uint256(1),2,5]);\n        }\n\n改为\n    // 命名式返回\n    function returnNamed() public pure returns(uint256 _number, bool _bool, uint256[3] memory _array){\n        _number = 2;\n        _bool = false; \n        _array = [uint256(3),2,1];\n    }\n\nTip:也可以在命名式返回中用return来返回变量，跟第一种一样\n解构式赋值\n\n\n读取所有返回值：声明变量，并且将要赋值的变量用,隔开，按顺序排列。\n\n\n        uint256 _number;\n        bool _bool;\n        uint256[3] memory _array;\n        (_number, _bool, _array) = returnNamed();\n\n\n\n读取部分返回值：声明要读取的返回值对应的变量，不读取的留空。下面这段代码中，我们只读取_bool，而不读取返回的_number和_array：\n\n\n        (, _bool2, ) = returnNamed();\n\n5.变量数据存储和作用域\n引用类型(Reference Type)\n数组(array)、结构体(struct)和映射(mapping)，这类变量占空间大，赋值时候直接传递地址（类似指针）。由于这类变量比较复杂，占用存储空间大，我们在使用时必须要声明数据存储的位置。\n数据位置\nstorage、memory和calldata。不同存储位置的gas成本不同：storage类型的数据存在链上，类似计算机的硬盘，消耗gas多；memory和calldata类型的临时存在内存里，消耗gas少。\n\n\nstorage：合约里的状态变量默认都是storage，存储在链上。\n\n\nmemory：函数里的参数和临时变量一般用memory，存储在内存中，不上链。\n\n\ncalldata：和memory类似，存储在内存中，不上链。与memory的不同点在于calldata变量不能修改（immutable），一般用于函数的参数。eg：\n\n\n    function fCalldata(uint[] calldata _x) public pure returns(uint[] calldata){\n        //参数为calldata数组，不能被修改\n        // _x[0] = 0 //这样修改会报错\n        return(_x);\n    }\n\n赋值规则\n在不同存储类型相互赋值时候，有时会产生独立的副本（修改新变量不会影响原变量），有时会产生引用（修改新变量会影响原变量）。规则如下：\n\n\nstorage（合约的状态变量）赋值给本地storage（函数里的）时候，会创建引用，改变新变量会影响原变量。eg：\n\n\n    uint[] x = [1,2,3]; // 状态变量：数组 x\n\n    function fStorage() public{\n        //声明一个storage的变量 xStorage，指向x。修改xStorage也会影响x\n        uint[] storage xStorage = x;\n        xStorage[0] = 100;\n    }\n\n\n\nstorage赋值给memory，会创建独立的复本，修改其中一个不会影响另一个；反之亦然。\n\n\n    uint[] x = [1,2,3]; // 状态变量：数组 x\n    \n    function fMemory() public view{\n        //声明一个Memory的变量xMemory，复制x。修改xMemory不会影响x\n        uint[] memory xMemory = x;\n        xMemory[0] = 100;\n        xMemory[1] = 200;\n        uint[] memory xMemory2 = x;\n        xMemory2[0] = 300;\n    }\n\ndebug康康\n\n\n\n\nmemory赋值给memory，会创建引用，改变新变量会影响原变量\n\n\n其他情况，变量赋值给storage，会创建独立的复本，修改其中一个不会影响另一个\n\n\n作用域\n\n\n状态变量\n数据存储在链上的变量，所有的合约内的函数都可以访问，gas消耗高。状态变量在合约内、函数外声明（可以在函数里更改状态变量的值）\n\n\n局部变量\n局部变量是仅在函数执行过程中有效的变量，函数退出后，变量无效。局部变量的数据存储在内存里，不上链，gas低。局部变量在函数内声明\n\n\n    function bar() external pure returns(uint){\n        uint xx = 1;\n        uint yy = 3;\n        uint zz = xx + yy;\n        return(zz);\n    }\n\n\n\n全局变量\n全局变量是全局范围工作的变量，都是solidity预留关键字（可以在函数内不声明直接使用）\n\n\n    function global() external view returns(address, uint, bytes memory){\n        address sender = msg.sender;\n        uint blockNum = block.number;\n        bytes memory data = msg.data;\n        return(sender, blockNum, data);\n    }\n\n\n6.引用类型\n数组array\n数组（Array）是solidity常用的一种变量类型，用来存储一组数据（整数，字节，地址等等）\n\n\n固定长度数组：在声明时指定数组的长度。用T[k]的格式表明，其中T是元素的类型，k是长度，eg:\n\n\n    // 固定长度 Array\n    uint[8] array1;\n    bytes1[5] array2;\n    address[100] array3;\n\n\n\n可变长度数组（动态数组）：在声明时不指定数值的长度。用T[]的格式表明，其中T是元素的类型（bytes比较特殊，是数组，但是不加[]），eg：\n\n\n    // 可变长度 Array\n    uint[] array4;\n    bytes1[] array5;\n    address[] array6;\n    bytes array7;\n\n创建数组的规则\n\n\n对于memory修饰的动态数组，可以用new操作符来创建，但是必须声明长度，并且声明后长度不能改变，eg：\n\n\n    // memory动态数组\n    uint[] memory array8 = new uint[](5);\n    bytes memory array9 = new bytes(9);\n\n\n\n数组字面常数（Array Literals）是写作表达形式的数组，用方括号包着来初始化array的一种方式，并且里面每一个元素的type是以第一个元素为准的，例如[1,2,3]里面所有的元素都是uint8类型，因为在solidity中如果一个值没有指定type的话，默认就是最小单位的该type，这里int的默认最小单位类型就是uint8。而[uint(1),2,3]里面的元素都是uint类型，因为第一个元素指定了是uint类型了，我们都以第一个元素为准。下面的合约中，对于f函数里面的调用，如果我们没有显式对第一个元素进行uint强转的话，是会报错的，因为如上所述我们其实是传入了uint8类型的array，可是g函数需要的却是uint类型的array，就会报错了。\n\n\n// SPDX-License-Identifier: GPL-3.0\npragma solidity &gt;=0.4.16 &lt;0.9.0;\ncontract C {\n    function f() public pure {\n        g([uint(1), 2, 3]);\t //uint(1)强转了。如果是g([1,2,3]),就是uint8类型\n    }\n    function g(uint[3] memory) public pure {\t//g()这边传入的是uint类型\n        // ...\n    }\n}\n\n\n\n如果创建的是动态数组，你需要一个一个元素的赋值。\n\n\n    uint[] memory x = new uint[](3);\n    x[0] = 1;\n    x[1] = 3;\n    x[2] = 4;\n\n数组成员\n\n结构体\n创建结构体\n    // 结构体\n    struct Student{\n        uint256 id;\n        uint256 score; \n    }\n\n    Student student; // 初始一个student结构体\n\n给结构体赋值的两种方法\n    //  给结构体赋值\n    // 方法1:在函数中创建一个storage的struct引用\n    function initStudent1() external{\n        Student storage _student = student; // assign a copy of student\n        _student.id = 11;\n        _student.score = 100;\n    }\n\n     // 方法2:直接引用状态变量的struct\n    function initStudent2() external{\n        student.id = 1;\n        student.score = 80;\n    }\n\n7.映射类型\nmapping\n在映射中，人们可以通过键（Key）来查询对应的值（Value），比如：通过一个人的id来查询他的钱包地址。\nmapping(_KeyType =&gt; _ValueType)eg:\n    mapping(uint =&gt; address) public idToAddress; // id映射到地址\n    mapping(address =&gt; address) public swapPair; // 币对的映射，地址到地址\n\n映射的规则\n\n\n规则1：映射的_KeyType只能选择solidity默认的类型，比如uint，address等，不能用自定义的结构体。而_ValueType可以使用自定义的类型。\n\n\n规则2：映射的存储位置必须是storage，因此可以用于合约的状态变量，函数中的storage变量。不能用于public函数的参数或返回结果中，因为mapping记录的是一种关系 (key - value pair)。\n\n\n规则3：如果映射声明为public，那么solidity会自动给你创建一个getter函数，可以通过Key来查询对应的Value。\n\n\n规则4：给映射新增的键值对的语法为_Var[_Key] = _Value，其中_Var是映射变量名，_Key和_Value对应新增的键值对。eg：\n\n\n    function writeMap (uint _Key, address _Value) public{\n        idToAddress[_Key] = _Value;\n    }\n\n映射的原理\n\n\n原理1：映射不储存任何键（Key）的资讯，也没有length的资讯。\n\n\n原理2：映射使用keccak256(key)当成offset存取value。\n\n\n原理3：因为Ethereum会定义所有未使用的空间为0，所以未赋值（Value）的键（Key）初始值都是0。\n\n\n8.变量初始值\n声明但没赋值的变量都是有初始值\n值类型初始值\n\n\nboolean:false\n\n\nstring:\"\"\n\n\nint:0\n\n\nuint:o\n\n\nenum:枚举的第一个元素\n\n\naddress:0x0000000000000000000000000000000000000000(或address(0))\n\n\nfunction\n\ninternal:空白方程\nexternal:空白方程\n\n\n\n可以用public变量的getter函数验证初始值：\n\tbool public _bool;\n\t......\n\n引用类型初始值\n\n\n映射mapping：所有元素都为其默认值的mapping\n\n\n结构体struct：所有成员都设为其默认值的结构题\n\n\n数组array：\n\n动态数组：[]\n静态数组：所有成员设为其默认值的静态数组\n\n\n\n验证方式一样，eg：\n    mapping(uint =&gt; address) public _mapping; // 所有元素都为其默认值的mapping\n    \n        // 所有成员设为其默认值的结构体 0, 0\n    struct Student{\n        uint256 id;\n        uint256 score; \n    }\n    Student public student;\n\ndelete操作符\ndelete a会让变量a的值变为初始值\n9.常数\nconstant（常量）和immutable（不变量）。状态变量声明这个两个关键字之后，不能在合约后更改数值；并且还可以节省gas。另外，只有数值变量可以声明constant和immutable；string和bytes可以声明为constant，但不能为immutable。\nconstant\nconstant变量必须在声明的时候初始化，之后再也不能改变。尝试改变的话，编译不通过。\n    // constant变量必须在声明的时候初始化，之后不能改变\n    uint256 constant CONSTANT_NUM = 10;\n    string constant CONSTANT_STRING = \"0xAA\";\n    bytes constant CONSTANT_BYTES = \"WTF\";\n    address constant CONSTANT_ADDRESS = 0x0000000000000000000000000000000000000000;\n\nimmutable\nimmutable变量可以在声明时或构造函数中初始化，因此更加灵活。\n    // immutable变量可以在constructor里初始化，之后不能改变\n    uint256 public immutable IMMUTABLE_NUM = 9999999999;\n    address public immutable IMMUTABLE_ADDRESS;\n    uint256 public immutable IMMUTABLE_BLOCK;\n    uint256 public immutable IMMUTABLE_TEST;\n\n可以使用全局变量例如address(this)，block.number ，或者自定义的函数给immutable变量初始化。在下面这个例子，我们利用了test()函数给IMMUTABLE_TEST初始化为9：\n    // 利用constructor初始化immutable变量，因此可以利用\n    constructor(){\n        IMMUTABLE_ADDRESS = address(this);\n        IMMUTABLE_BLOCK = block.number;\n        IMMUTABLE_TEST = test();\n    }\n\n    function test() public pure returns(uint256){\n        uint256 what = 9;\n        return(what);\n    }\n\n10.控制流\n\n\nif-else\n\n\nfor循环\n\n\nwhie循环\n\n\ndo-while循环\n\n\n三元运算符：三元运算符是solidity中唯一一个接受三个操作数的运算符，规则条件? 条件为真的表达式:条件为假的表达式。 此运算符经常用作 if 语句的快捷方式。\n\n\n// 三元运算符 ternary/conditional operator\nfunction ternaryTest(uint256 x, uint256 y) public pure returns(uint256){\n    // return the max of x and y\n    return x &gt;= y ? x: y; \n}\n\n用solidity实现插入排序\n插入排序\n排序算法解决的问题是将无序的一组数字，例如[2, 5, 3, 1]，从小到大依次排列好。（思路：从前往后，依次将每一个数和排在他前面的数字比大小，如果比前面的数字小，就互换位置。）\n贴个python代码\n# Python program for implementation of Insertion Sort\ndef insertionSort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i-1\n        while j &gt;=0 and key &lt; arr[j] :\n                arr[j+1] = arr[j]\n                j -= 1\n        arr[j+1] = key\n\n改写成solidity后有BUG！\n    // 插入排序 错误版\n    function insertionSortWrong(uint[] memory a) public pure returns(uint[] memory) {\n        \n        for (uint i = 1;i &lt; a.length;i++){\n            uint temp = a[i];\n            uint j=i-1;\n            while( (j &gt;= 0) &amp;&amp; (temp &lt; a[j])){\n                a[j+1] = a[j];\n                j--;\n            }\n            a[j+1] = temp;\n        }\n        return(a);\n    }\n\n原因：solidity中最常用的变量类型是uint，也就是正整数，取到负值的话，会报underflow错误。而在插入算法中，变量j有可能会取到-1，引起报错。这里把j加1，让它无法取到赋值\n    // 插入排序 正确版\n    function insertionSort(uint[] memory a) public pure returns(uint[] memory) {\n        // note that uint can not take negative value\n        for (uint i = 1;i &lt; a.length;i++){\n            uint temp = a[i];\n            uint j=i;\n            while( (j &gt;= 1) &amp;&amp; (temp &lt; a[j-1])){\n                a[j] = a[j-1];\n                j--;\n            }\n            a[j] = temp;\n        }\n        return(a);\n    }\n\n11.构造函数和修饰器\n构造函数\n构造函数（constructor）是一种特殊的函数，每个合约可以定义一个，并在部署合约的时候自动运行一次。它可以用来初始化合约的一些参数，例如初始化合约的owner地址：\n   address owner; // 定义owner变量\n\n   // 构造函数\n   constructor() {\n      owner = msg.sender; // 在部署合约的时候，将owner设置为部署者的地址\n   }\n\nTip:构造函数在不同的solidity版本中的语法并不一致，在Solidity 0.4.22之前，构造函数不使用 constructor 而是使用与合约名同名的函数作为构造函数而使用，由于这种旧写法容易使开发者在书写时发生疏漏（例如合约名叫 Parents，构造函数名写成 parents），使得构造函数变成普通函数，引发漏洞，所以0.4.22版本及之后，采用了全新的 constructor 写法。\npragma solidity =0.4.21;\ncontract Parents {\n    // 与合约名Parents同名的函数就是构造函数\n    function Parents () public {\n    }\n}\n\n修饰器\n修饰器（modifier）是solidity特有的语法，类似于面向对象编程中的decorator，声明函数拥有的特性，并减少代码冗余。modifier的主要使用场景是运行函数前的检查，例如地址，变量，余额等。\n   // 定义modifier\n   modifier onlyOwner {\n      require(msg.sender == owner); // 检查调用者是否为owner地址\n      _; // 如果是的话，继续运行函数主体；否则报错并revert交易\n   }\n\n带有onlyOwner修饰符的函数只能被owner地址调用，比如下面这个例子：\n   function changeOwner(address _newOwner) external onlyOwner{\n      owner = _newOwner; // 只有owner地址运行这个函数，并改变owner\n   }\n\n我们定义了一个changeOwner函数，运行他可以改变合约的owner，但是由于onlyOwner修饰符的存在，只有原先的owner可以调用，别人调用就会报错。这也是最常用的控制智能合约权限的方法。\n12.事件\nSolidity中的事件（event）是EVM上日志的抽象，它具有两个特点：\n\n\n应用程序（ether.js）可以通过RPC接口订阅和监听这些事件，并在前端做响应。\n\n\n事件是EVM上比较经济的存储数据的方式，每个大概消耗2,000 gas；相比之下，链上存储一个新变量至少需要20,000 gas。\n\n\n规则\n事件的声明由event关键字开头，然后跟事件名称，括号里面写好事件需要记录的变量类型和变量名。以ERC20代币合约的Transfer事件为例：\nevent Transfer(address indexed from, address indexed to, uint256 value);\n\nTransfer事件共记录了3个变量from，to和value，分别对应代币的转账地址，接收地址和转账数量。\n同时from和to前面带着indexed关键字，每个indexed标记的变量可以理解为检索事件的索引“键”，在以太坊上单独作为一个topic进行存储和索引，程序可以轻松的筛选出特定转账地址和接收地址的转账事件。每个事件最多有3个带indexed的变量。每个 indexed 变量的大小为固定的256比特。事件的哈希以及这三个带indexed的变量在EVM日志中通常被存储为topic。其中topic[0]是此事件的keccak256哈希，topic[1]到topic[3]存储了带indexed变量的keccak256哈希。\n\nvalue 不带 indexed 关键字，会存储在事件的 data 部分中，可以理解为事件的“值”。data 部分的变量不能被直接检索，但可以存储任意大小的数据。因此一般 data 部分可以用来存储复杂的数据结构，例如数组和字符串等等，因为这些数据超过了256比特，即使存储在事件的 topic 部分中，也是以哈希的方式存储。另外，data 部分的变量在存储上消耗的gas相比于 topic 更少。\n可以在函数里释放事件：\n    // 定义_transfer函数，执行转账逻辑\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) external {\n\n        _balances[from] = 10000000; // 给转账地址一些初始代币\n\n        _balances[from] -=  amount; // from地址减去转账数量\n        _balances[to] += amount; // to地址加上转账数量\n\n        // 释放事件\n        emit Transfer(from, to, amount);\n    }\n\n13.继承\n规则\n\n\nvirtual: 父合约中的函数，如果希望子合约重写，需要加上virtual关键字。\n\n\noverride：子合约重写了父合约中的函数，需要加上override关键字。\n\n\n简单继承\n（确实比较简单，直接贴例子）\n先写一个简单的爷爷合约Yeye，里面包含1个Log事件和3个function: hip(), pop(), yeye()，输出都是”Yeye”。\ncontract Yeye {\n    event Log(string msg);\n\n    // 定义3个function: hip(), pop(), man()，Log值为Yeye。\n    function hip() public virtual{\n        emit Log(\"Yeye\");\n    }\n\n    function pop() public virtual{\n        emit Log(\"Yeye\");\n    }\n\n    function yeye() public virtual {\n        emit Log(\"Yeye\");\n    }\n}\n\n再定义一个爸爸合约Baba，让他继承Yeye合约，语法就是contract Baba is Yeye，非常直观。在Baba合约里，我们重写一下hip()和pop()这两个函数，加上override关键字，并将他们的输出改为”Baba”；并且加一个新的函数baba，输出也是”Baba”。\ncontract Baba is Yeye{\n    // 继承两个function: hip()和pop()，输出改为Baba。\n    function hip() public virtual override{\n        emit Log(\"Baba\");\n    }\n\n    function pop() public virtual override{\n        emit Log(\"Baba\");\n    }\n\n    function baba() public virtual{\n        emit Log(\"Baba\");\n    }\n}\n\n部署合约，可以看到Baba合约里有4个函数，其中hip()和pop()的输出被成功改写成”Baba”，而继承来的yeye()的输出仍然是”Yeye”。\n多重继承\nsolidity合约可以继承多个合约\n继承时要按辈分最高到最低的顺序排。比如我们写一个Erzi合约，继承Yeye合约和Baba合约，那么就要写成contract Erzi is Yeye, Baba，而不能写成contract Erzi is Baba, Yeye，不然就会报错。 如果某一个函数在多个继承的合约里都存在，比如例子中的hip()和pop()，在子合约里必须重写，不然会报错。 重写在多个父合约中都重名的函数时，override关键字后面要加上所有父合约名字，例如override(Yeye, Baba)。 例子：\ncontract Erzi is Yeye, Baba{\n    // 继承两个function: hip()和pop()，输出值为Erzi。\n    function hip() public virtual override(Yeye, Baba){\n        emit Log(\"Erzi\");\n    }\n\n    function pop() public virtual override(Yeye, Baba) {\n        emit Log(\"Erzi\");\n    }\n\n修饰器的继承\nSolidity中的修饰器（Modifier）同样可以继承，用法与函数继承类似，在相应的地方加virtual和override关键字即可。\ncontract Base1 {\n    modifier exactDividedBy2And3(uint _a) virtual {\n        require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);\n        _;\n    }\n}\n\ncontract Identifier is Base1 {\n\n    //计算一个数分别被2除和被3除的值，但是传入的参数必须是2和3的倍数\n    function getExactDividedBy2And3(uint _dividend) public exactDividedBy2And3(_dividend) pure returns(uint, uint) {\n        return getExactDividedBy2And3WithoutModifier(_dividend);\n    }\n\n    //计算一个数分别被2除和被3除的值\n    function getExactDividedBy2And3WithoutModifier(uint _dividend) public pure returns(uint, uint){\n        uint div2 = _dividend / 2;\n        uint div3 = _dividend / 3;\n        return (div2, div3);\n    }\n}\n\nIdentifier合约可以直接在代码中使用父合约中的exactDividedBy2And3修饰器，也可以利用override关键字重写修饰器：\n    modifier exactDividedBy2And3(uint _a) override {\n        _;\n        require(_a % 2 == 0 &amp;&amp; _a % 3 == 0);\n    }\n\n构造函数的继承\n子合约有两种方法继承父合约的构造函数。举个简单的例子，父合约A里面有一个状态变量a，并由构造函数的参数来确定：\n// 构造函数的继承\nabstract contract A {\n    uint public a;\n\n    constructor(uint _a) {\n        a = _a;\n    }\n}\n\n1.在继承时声明父构造函数的参数，例如：contract B is A(1)\n2.在子合约的构造函数中声明构造函数的参数，例如：\ncontract C is A {\n    constructor(uint _c) A(_c * _c) {}\n}\n\n调用父合约的函数\n子合约有两种调用父合约的函数\n\n\n直接调用：子合约可以直接用父合约名.函数名()的方式来调用父合约函数，例如Yeye.pop()。\n\n\n    function callParent() public{\n        Yeye.pop();\n    }\n\n\n\nsuper关键字：子合约可以利用super.函数名()来调用最近的父合约函数。solidity继承关系按声明时从右到左的顺序是：contract Erzi is Yeye, Baba，那么Baba是最近的父合约，super.pop()将调用Baba.pop()而不是Yeye.pop()：\n\n\n    function callParentSuper() public{\n        // 将调用最近的父合约函数，Baba.pop()\n        super.pop();\n    }\n\n14.抽象合约和接口\n抽象合约\n如果一个智能合约里至少有一个未实现的函数，即某个函数缺少主体{}中的内容，则必须将该合约标为abstract，不然编译会报错；另外，未实现的函数需要加virtual，以便子合约重写。拿我们之前的插入排序合约为例，如果我们还没想好具体怎么实现插入排序函数，那么可以把合约标为abstract，之后让别人补写上。\nabstract contract InsertionSort{\n    function insertionSort(uint[] memory a) public pure virtual returns(uint[] memory);\n}\n\n接口\n接口类似于抽象合约，但不实现任何功能。规则：\n\n\n不能包含状态变量\n\n\n不能包含构造函数\n\n\n不能继承除接口外的其他合约\n\n\n所有函数都必须是external且不能有函数体\n\n\n继承接口的合约必须实现接口定义的所有功能\n\n\n虽然接口不实现任何功能，但它非常重要。接口是智能合约的骨架，定义了合约的功能以及如何触发它们：如果智能合约实现了某种接口（比如ERC20或ERC721），其他Dapps和智能合约就知道如何与它交互。因为接口提供了两个重要的信息：\n1.合约里每个函数的bytes4选择器，以及基于它们的函数签名函数名(每个参数类型）。\n2.接口id（更多信息见EIP165）\n另外，接口与合约ABI（Application Binary Interface）等价，可以相互转换：编译接口可以得到合约的ABI，利用abi-to-sol工具也可以将ABI json文件转换为接口sol文件。\n我们以ERC721接口合约IERC721为例，它定义了3个event和9个function，所有ERC721标准的NFT都实现了这些函数。我们可以看到，接口和常规合约的区别在于每个函数都以;代替函数体{ }结尾。\ninterface IERC721 is IERC165 {\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n    \n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    function approve(address to, uint256 tokenId) external;\n\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n\n    function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data) external;\n}\n\nIERC721事件\nIERC721包含3个事件，其中Transfer和Approval事件在ERC20中也有。\n\n\nTransfer事件：在转账时被释放，记录代币的发出地址from，接收地址to和tokenid。\n\n\nApproval事件：在授权时释放，记录授权地址owner，被授权地址approved和tokenid。\n\n\nApprovalForAll事件：在批量授权时释放，记录批量授权的发出地址owner，被授权地址operator和授权与否的approved。\n\n\nIERC721函数\n\n\nbalanceOf：返回某地址的NFT持有量balance。\n\n\nownerOf：返回某tokenId的主人owner。\n\n\ntransferFrom：普通转账，参数为转出地址from，接收地址to和tokenId。\n\n\nsafeTransferFrom：安全转账（如果接收方是合约地址，会要求实现ERC721Receiver接口）。参数为转出地址from，接收地址to和tokenId。\n\n\napprove：授权另一个地址使用你的NFT。参数为被授权地址approve和tokenId。\n\n\ngetApproved：查询tokenId被批准给了哪个地址。\n\n\nsetApprovalForAll：将自己持有的该系列NFT批量授权给某个地址operator。\n\n\nisApprovedForAll：查询某地址的NFT是否批量授权给了另一个operator地址。\n\n\nsafeTransferFrom：安全转账的重载函数，参数里面包含了data。\n\n\n什么时候使用接口\n如果我们知道一个合约实现了IERC721接口，我们不需要知道它具体代码实现，就可以与它交互。\n无聊猿BAYC属于ERC721代币，实现了IERC721接口的功能。我们不需要知道它的源代码，只需知道它的合约地址，用IERC721接口就可以与它交互，比如用balanceOf()来查询某个地址的BAYC余额，用safeTransferFrom()来转账BAYC。\ncontract interactBAYC {\n    // 利用BAYC地址创建接口合约变量（ETH主网）\n    IERC721 BAYC = IERC721(0xBC4CA0EdA7647A8aB7C2061c2E118A18a936f13D);\n\n    // 通过接口调用BAYC的balanceOf()查询持仓量\n    function balanceOfBAYC(address owner) external view returns (uint256 balance){\n        return BAYC.balanceOf(owner);\n    }\n\n    // 通过接口调用BAYC的safeTransferFrom()安全转账\n    function safeTransferFromBAYC(address from, address to, uint256 tokenId) external{\n        BAYC.safeTransferFrom(from, to, tokenId);\n    }\n}\n\n15.异常\n写智能合约经常会出bug，solidity中的异常命令帮助我们debug。\nError\nerror是solidity 0.8版本新加的内容，方便且高效（省gas）地向用户解释操作失败的原因。人们可以在contract之外定义异常。下面，我们定义一个TransferNotOwner异常，当用户不是代币owner的时候尝试转账，会抛出错误：\nerror TransferNotOwner(); // 自定义error\n\n在执行当中，error必须搭配revert（回退）命令使用。\n    function transferOwner1(uint256 tokenId, address newOwner) public {\n        if(_owners[tokenId] != msg.sender){\n            revert TransferNotOwner();\n        }\n        _owners[tokenId] = newOwner;\n    }\n\n我们定义了一个transferOwner1()函数，它会检查代币的owner是不是发起人，如果不是，就会抛出TransferNotOwner异常；如果是的话，就会转账。\nRequire\nrequire命令是solidity 0.8版本之前抛出异常的常用方法，目前很多主流合约仍然还在使用它。它很好用，唯一的缺点就是gas随着描述异常的字符串长度增加，比error命令要高。使用方法：require(检查条件，\"异常的描述\")，当检查条件不成立的时候，就会抛出异常。\n我们用require命令重写一下上面的transferOwner函数：\n    function transferOwner2(uint256 tokenId, address newOwner) public {\n        require(_owners[tokenId] == msg.sender, \"Transfer Not Owner\");\n        _owners[tokenId] = newOwner;\n    }\n\n贴个在remix上验证的例子吧\n1.输入任意uint256数字和非0地址，调用transferOwner1，也就是error方法，控制台抛出了异常并显示我们自定义的TransferNotOwner。\n\n2.输入任意uint256数字和非0地址，调用transferOwner2，也就是require方法，控制台抛出了异常并打印出require中的字符串。\n\n3.输入任意uint256数字和非0地址，调用transferOwner3，也就是assert方法，控制台只抛出了异常。\n\nAssert\nassert命令一般用于程序员写程序debug，因为它不能解释抛出异常的原因（比require少个字符串）。它的用法很简单，assert(检查条件），当检查条件不成立的时候，就会抛出异常。\n我们用assert命令重写一下上面的transferOwner函数：\n    function transferOwner3(uint256 tokenId, address newOwner) public {\n        assert(_owners[tokenId] == msg.sender);\n        _owners[tokenId] = newOwner;\n    }\n\n三种方法的gas比较\n我们比较一下三种抛出异常的gas消耗，通过remix控制台的Debug按钮，能查到每次函数调用的gas消耗分别如下：\n\n\nerror方法gas消耗：24445\n\n\nrequire方法gas消耗：24743\n\n\nassert方法gas消耗：24446\n\n\n我们可以看到，error方法gas最少，其次是assert，require方法消耗gas最多！因此，error既可以告知用户抛出异常的原因，又能省gas，大家要多用！（注意，由于部署测试时间的不同，每个函数的gas消耗会有所不同，但是比较结果会是一致的。）\n","slug":"solidity入门","date":"2022-11-26T16:55:02.000Z","categories_index":"","tags_index":"solidity","author_index":"cocoZ"},{"id":"4a8c6c67f0d77f1d7a087ca184ac4b68","title":"hexo+github搭建个人博客","content":"搭建个人博客（hexo+github）\n准备工作安装git、安装node.js、还有npm啥的（在看到任务前就装好了的）\n在github上创建仓库\n仓库名字要和用户名一样！！！\n（github pages等一会儿就出来了）\n\n安装hexo\n桌面创建一个文件夹，在文件夹目录下打开git bash here\n\n安装hexo\nnpm install -g hexo-cli\n查看版本\nhexo -v\n初始化hexo、\nhexo init\n生成本地的hexo页面\nhexo s\n输入hexo g生成静态网站\n输入hexo s，然后浏览器打开localhost:4000，就可以本地访问了（Ctrl+c退出）\n连接GitHub与本地\n绑定个密钥：生成SSH Keys\nssh-keygen -t rsa -C \"你的邮箱地址\"\n在C/用户/16017/.ssh目录下打开这个，复制\n\n打开github的总setting，添加SSH Keys\n\n在目录下打开git bash here，输入以下命令\ngit config --global user.name cocoGenZ\ngit config --global user.email 160760796@qq.com\n打开博客根目录下的_config.yml文件，修改最后一行的配置\n  type: git\n  repository: https://github.com/cocoGenZ/cocoGenZ.github.io.git\n  branch: main\n\nTip:上面的repository在GitHub里面复制HTTPS那个\n\n安装一键部署插件\ncnpm install hexo-deployer-git --save(不知道为什么有这个save的我安装不了，就另外装了个cnpm来安装)（更新完就ok了`npm -g install npm@latest）\n分别输入一下三条命令\nhexo clean   #清除缓存文件 db.json 和已生成的静态文件 public\nhexo g       #生成网站静态文件到默认设置的 public 文件夹(hexo generate 的缩写)\nhexo d       #自动生成网站静态文件，并部署到设定的仓库(hexo deploy 的缩写)\n最后访问博客的地址就可以啦https://cocogenz.github.io/\n\n改个主题吧\n安装一个yarn（命令行就能装，用npm来装）\nyarn add hexo-theme-aurora\n\n改改参数\n\n关于上传图片显示的问题\n将图片上传到网上，再用markdown引用\nhttps://sm.ms/\n这个网址很方便\n","slug":"hexo-github搭建个人博客","date":"2022-11-21T14:10:57.000Z","categories_index":"","tags_index":"博客","author_index":"cocoZ"},{"id":"7b9812fe6cbf2aba598dcdf2de807daf","title":"Test","content":"第一次搭博客，浅浅做个测试\n","slug":"Test","date":"2022-11-15T03:55:53.000Z","categories_index":"","tags_index":"","author_index":"cocoZ"},{"id":"b9663f58f18133b35bfe243f3e916a80","title":"Hello World","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.\nQuick Start\nCreate a new post\n$ hexo new \"My New Post\"\n\nMore info: Writing\nRun server\n$ hexo server\n\nMore info: Server\nGenerate static files\n$ hexo generate\n\nMore info: Generating\nDeploy to remote sites\n$ hexo deploy\n\nMore info: Deployment\n","slug":"hello-world","date":"2022-11-15T02:54:10.513Z","categories_index":"","tags_index":"","author_index":"cocoZ"}]