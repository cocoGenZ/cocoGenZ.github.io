{"title":"solidity进阶","uid":"26cdbf141378457625c3c7f264148e8f","slug":"solidity进阶","date":"2022-12-07T15:23:57.000Z","updated":"2022-12-17T12:18:43.276Z","comments":true,"path":"api/articles/solidity进阶.json","keywords":null,"cover":"https://s2.loli.net/2022/12/17/eOYWR2zZ9rqSchP.jpg","content":"<h1 id=\"solidity进阶\"><a href=\"#solidity进阶\" class=\"headerlink\" title=\"solidity进阶\"></a>solidity进阶</h1><h2 id=\"16-函数重载\"><a href=\"#16-函数重载\" class=\"headerlink\" title=\"16.函数重载\"></a>16.函数重载</h2><h3 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h3><p><code>solidity</code>中允许函数进行重载（<code>overloading</code>），即名字相同但输入参数类型不同的函数可以同时存在，他们被视为<strong>不同</strong>的函数。注意，<code>solidity</code>不允许修饰器（<code>modifier</code>）重载。</p>\n<h3 id=\"函数重载\"><a href=\"#函数重载\" class=\"headerlink\" title=\"函数重载\"></a>函数重载</h3><p>举个例子，我们可以定义两个都叫<code>saySomething()</code>的函数，一个没有任何参数，输出<code>\"Nothing\"</code>；另一个接收一个<code>string</code>参数，输出这个<code>string</code>。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">saySomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nothing\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">saySomething</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> something<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>something<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>最终重载函数在经过编译器编译后，由于不同的参数类型，都变成了不同的函数选择器（selector）。(选择器在29的内容)</p>\n<h3 id=\"实参匹配（Argument-Matching）\"><a href=\"#实参匹配（Argument-Matching）\" class=\"headerlink\" title=\"实参匹配（Argument Matching）\"></a>实参匹配（Argument Matching）</h3><p>在调用重载函数时，会把输入的实际参数和函数参数的变量类型做匹配。 如果出现多个匹配的重载函数，则会报错。下面这个例子有两个叫<code>f()</code>的函数，一个参数为<code>uint8</code>，另一个为<code>uint256</code>：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span> _in<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span> out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    out <span class=\"token operator\">=</span> _in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> _in<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    out <span class=\"token operator\">=</span> _in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们调用<code>f(50)</code>，因为<code>50</code>既可以被转换为<code>uint8</code>，也可以被转换为<code>uint256</code>，因此会报错。</p>\n<h2 id=\"17-库合约\"><a href=\"#17-库合约\" class=\"headerlink\" title=\"17.库合约\"></a>17.库合约</h2><h3 id=\"库函数\"><a href=\"#库函数\" class=\"headerlink\" title=\"库函数\"></a>库函数</h3><p>库函数是一种特殊的合约，为了提升<code>solidity</code>代码的复用性和减少<code>gas</code>而存在。库合约一般都是一些好用的函数合集（<code>库函数</code>），由大神或者项目方创作，咱们站在巨人的肩膀上，会用就行了。</p>\n<p>库函数和普通合约的不同：<br>1.不能存在状态变量<br>2.不能够继承或被继承<br>3.不能接受以太币<br>4.不可以被销毁</p>\n<h3 id=\"String库合约\"><a href=\"#String库合约\" class=\"headerlink\" title=\"String库合约\"></a>String库合约</h3><p><code>String库合约</code>是将<code>uint256</code>类型转换为相应的<code>string</code>类型的代码库，样例代码如下：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">library</span> <span class=\"token class-name\">Strings</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">bytes16</span> <span class=\"token keyword\">private</span> <span class=\"token keyword\">constant</span> _HEX_SYMBOLS <span class=\"token operator\">=</span> <span class=\"token string\">\"0123456789abcdef\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Inspired by OraclizeAPI's implementation - MIT licence</span>\n        <span class=\"token comment\">// https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin\">uint256</span> temp <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> digits<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            digits<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bytes</span><span class=\"token punctuation\">(</span>digits<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            digits <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            buffer<span class=\"token punctuation\">[</span>digits<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint8</span><span class=\"token punctuation\">(</span><span class=\"token number\">48</span> <span class=\"token operator\">+</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            value <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"0x00\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin\">uint256</span> temp <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">uint256</span> length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>temp <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            length<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            temp <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> value<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> length<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> buffer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">bytes</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> length <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        buffer<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"0\"</span><span class=\"token punctuation\">;</span>\n        buffer<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"x\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> i <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">*</span> length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&gt;</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            buffer<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _HEX_SYMBOLS<span class=\"token punctuation\">[</span>value <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xf</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            value <span class=\"token operator\">&gt;&gt;=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>value <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Strings: hex length insufficient\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>他主要包含两个函数，<code>toString()</code>将<code>uint256</code>转为<code>string</code>，<code>toHexString()</code>将<code>uint256</code>转换为<code>16进制</code>，在转换为<code>string</code>。</p>\n<h3 id=\"如何使用库合约\"><a href=\"#如何使用库合约\" class=\"headerlink\" title=\"如何使用库合约\"></a>如何使用库合约</h3><p><strong>1.利用using for指令</strong></p>\n<p>指令<code>using A for B;</code>可用于附加库函数（从库 A）到任何类型（B）。添加完指令后，库<code>A</code>中的函数会自动添加为<code>B</code>类型变量的成员，可以直接调用。注意：在调用的时候，这个变量会被当作第一个参数传递给函数：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 利用using for指令</span>\n<span class=\"token keyword\">using</span> <span class=\"token class-name\">Strings</span> <span class=\"token keyword\">for</span> <span class=\"token builtin\">uint256</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getString1</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> _number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 库函数会自动添加为uint256型变量的成员</span>\n    <span class=\"token keyword\">return</span> _number<span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><strong>2.通过库合约名称调用库函数</strong></p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 直接通过库合约名调用</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">getString2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> _number<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> Strings<span class=\"token punctuation\">.</span><span class=\"token function\">toHexString</span><span class=\"token punctuation\">(</span>_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<ol>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Strings.sol\">String</a>：将<code>uint256</code>转换为<code>String</code></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Address.sol\">Address</a>：判断某个地址是否为合约地址</li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Create2.sol\">Create2</a>：更安全的使用<code>Create2 EVM opcode</code></li>\n<li><a href=\"https://github.com/OpenZeppelin/openzeppelin-contracts/blob/4a9cc8b4918ef3736229a5cc5a310bdc17bf759f/contracts/utils/Arrays.sol\">Arrays</a>：跟数组相关的库函数</li>\n</ol>\n<h2 id=\"18-Import\"><a href=\"#18-Import\" class=\"headerlink\" title=\"18.Import\"></a>18.Import</h2><p><code>solidity</code>支持利用<code>import</code>关键字导入其他源代码中的合约，让开发更加模块化。</p>\n<h3 id=\"import用法\"><a href=\"#import用法\" class=\"headerlink\" title=\"import用法\"></a><code>import</code>用法</h3><ul>\n<li>通过源文件相对位置导入，eg：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">文件结构\n├── Import<span class=\"token punctuation\">.</span>sol\n└── Yeye<span class=\"token punctuation\">.</span>sol\n\n<span class=\"token comment\">// 通过文件相对位置import</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'./Yeye.sol'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>通过源文件网址导入网上的合约，eg：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 通过网址引用</span>\n<span class=\"token keyword\">import</span> <span class=\"token string\">'https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/Address.sol'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<ul>\n<li>通过<code>npm</code>的目录导入，eg：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">import</span> <span class=\"token string\">'@openzeppelin/contracts/access/Ownable.sol'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>通过<code>全局符号</code>导入特定的合约，eg：</li>\n</ul>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Yeye<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./Yeye.sol'</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<ul>\n<li>引用(<code>import</code>)在代码中的位置为：在<strong>声明版本号之后</strong>，在<strong>其余代码之前</strong>。</li>\n</ul>\n<h2 id=\"19-接受ETH\"><a href=\"#19-接受ETH\" class=\"headerlink\" title=\"19.接受ETH\"></a>19.接受ETH</h2><p><code>Solidity</code>支持两种特殊的回调函数，<code>receive()</code>和<code>fallback()</code>，他们主要在两种情况下被使用：</p>\n<ol>\n<li>接收ETH</li>\n<li>处理合约中不存在的函数调用（代理合约proxy contract）</li>\n</ol>\n<p>注意⚠️：在solidity 0.6.x版本之前，语法上只有 <code>fallback()</code> 函数，用来接收用户发送的ETH时调用以及在被调用函数签名没有匹配到时，来调用。 0.6版本之后，solidity才将 <code>fallback()</code> 函数拆分成 <code>receive()</code> 和 <code>fallback()</code> 两个函数。</p>\n<h3 id=\"接受ETH函数receive\"><a href=\"#接受ETH函数receive\" class=\"headerlink\" title=\"接受ETH函数receive\"></a>接受ETH函数receive</h3><p><code>receive()</code>只用于处理接收<code>ETH</code>。一个合约最多有一个<code>receive()</code>函数，声明方式与一般函数不一样，不需要<code>function</code>关键字：<code>receive() external payable { ... }</code>。<code>receive()</code>函数<strong>不能有任何的参数</strong>，<strong>不能返回任何值</strong>，<strong>必须包含<code>external</code>和<code>payable</code></strong>。</p>\n<p>当合约接收ETH的时候，<code>receive()</code>会被触发。<code>receive()</code>最好不要执行太多的逻辑因为如果别人用<code>send</code>和<code>transfer</code>方法发送<code>ETH</code>的话，<code>gas</code>会限制在<code>2300</code>，<code>receive()</code>太复杂可能会触发<code>Out of Gas</code>报错；如果用<code>call</code>就可以自定义<code>gas</code>执行更复杂的逻辑（这三种发送ETH的方法我们之后会讲到）。</p>\n<p>可以在<code>receive()</code>里发送一个<code>event</code>，eg：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 定义事件</span>\n<span class=\"token keyword\">event</span> <span class=\"token function\">Received</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> Sender<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> Value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 接收ETH时释放Received事件</span>\n<span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Received</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>有些恶意合约，会在<code>receive()</code> 函数（老版本的话，就是 <code>fallback()</code> 函数）嵌入恶意消耗<code>gas</code>的内容或者使得执行故意失败的代码，导致一些包含退款和转账逻辑的合约不能正常工作，因此写包含退款等逻辑的合约时候，一定要注意这种情况。</p>\n<h3 id=\"回退函数fallback\"><a href=\"#回退函数fallback\" class=\"headerlink\" title=\"回退函数fallback\"></a>回退函数fallback</h3><p><code>fallback()</code>函数会在调用合约不存在的函数时被触发。可用于接收ETH，也可以用于代理合约<code>proxy contract</code>。<code>fallback()</code>声明时不需要<code>function</code>关键字，<strong>必须由<code>external</code>修饰</strong>，一般也会用<code>payable</code>修饰，用于接收ETH:<code>fallback() external payable { ... }</code>。</p>\n<p>我们定义一个<code>fallback()</code>函数，被触发时候会释放<code>fallbackCalled</code>事件，并输出<code>msg.sender</code>，<code>msg.value</code>和<code>msg.data</code>:</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// fallback</span>\n<span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">fallbackCalled</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"receive和fallback的区别\"><a href=\"#receive和fallback的区别\" class=\"headerlink\" title=\"receive和fallback的区别\"></a>receive和fallback的区别</h3><p><code>receive</code>和<code>fallback</code>都能够用于接收<code>ETH</code>，他们触发的规则如下：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">触发fallback() 还是 receive()?\n           接收ETH\n              |\n         msg.data是空？\n            /  \\\n          是    否\n          /      \\\nreceive()存在?   fallback()\n        / \\\n       是  否\n      /     \\\nreceive()   fallback()<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>简单来说，合约接收<code>ETH</code>时，<code>msg.data</code>为空且存在<code>receive()</code>时，会触发<code>receive()</code>；<code>msg.data</code>不为空或不存在<code>receive()</code>时，会触发<code>fallback()</code>，此时<code>fallback()</code>必须为<code>payable</code>。</p>\n<p><code>receive()</code>和<code>payable fallback()</code>均不存在的时候，向合约发送<code>ETH</code>将会报错。</p>\n<h2 id=\"20-发送ETH\"><a href=\"#20-发送ETH\" class=\"headerlink\" title=\"20.发送ETH\"></a>20.发送ETH</h2><h3 id=\"接受ETH合约\"><a href=\"#接受ETH合约\" class=\"headerlink\" title=\"接受ETH合约\"></a>接受ETH合约</h3><p>我们先部署一个接收<code>ETH</code>合约<code>ReceiveETH</code>。<code>ReceiveETH</code>合约里有一个事件<code>Log</code>，记录收到的<code>ETH</code>数量和<code>gas</code>剩余。还有两个函数，一个是<code>receive()</code>函数，收到<code>ETH</code>被触发，并发送<code>Log</code>事件；另一个是查询合约<code>ETH</code>余额的<code>getBalance()</code>函数。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">ReceiveETH</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 收到eth事件，记录amount和gas</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> gas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// receive方法，接收eth时被触发</span>\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token comment\">// 返回合约ETH余额</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>部署<code>ReceiveETH</code>合约后，运行<code>getBalance()</code>函数，可以看到当前合约的<code>ETH</code>余额为<code>0</code>。</p>\n<h3 id=\"发送ETH合约\"><a href=\"#发送ETH合约\" class=\"headerlink\" title=\"发送ETH合约\"></a>发送ETH合约</h3><p>我们将实现三种方法向<code>ReceiveETH</code>合约发送<code>ETH</code>。首先，先在发送ETH合约<code>SendETH</code>中实现<code>payable</code>的<code>构造函数</code>和<code>receive()</code>，让我们能够在部署时和部署后向合约转账。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">SendETH</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 构造函数，payable使得部署的时候可以转eth进去</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// receive方法，接收eth时被触发</span>\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"transfer\"><a href=\"#transfer\" class=\"headerlink\" title=\"transfer\"></a>transfer</h3><ul>\n<li>用法是<code>接收方地址.transfer(发送ETH数额)</code>。</li>\n<li><code>transfer()</code>的<code>gas</code>限制是<code>2300</code>，足够用于转账，但对方合约的<code>fallback()</code>或<code>receive()</code>函数不能实现太复杂的逻辑。</li>\n<li><code>transfer()</code>如果转账失败，会自动<code>revert</code>（回滚交易）。</li>\n</ul>\n<p>代码样例，注意里面的<code>_to</code>填<code>ReceiveETH</code>合约的地址，<code>amount</code>是<code>ETH</code>转账金额：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 用transfer()发送ETH</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">transferETH</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n    _to<span class=\"token punctuation\">.</span><span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"send\"><a href=\"#send\" class=\"headerlink\" title=\"send\"></a>send</h3><ul>\n<li>用法是<code>接收方地址.send(发送ETH数额)</code>。</li>\n<li><code>send()</code>的<code>gas</code>限制是<code>2300</code>，足够用于转账，但对方合约的<code>fallback()</code>或<code>receive()</code>函数不能实现太复杂的逻辑。</li>\n<li><code>send()</code>如果转账失败，不会<code>revert</code>。</li>\n<li><code>send()</code>的返回值是<code>bool</code>，代表着转账成功或失败，需要额外代码处理一下。</li>\n</ul>\n<p>代码样例：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// send()发送ETH</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sendETH</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理下send的返回值，如果失败，revert交易并发送error</span>\n    <span class=\"token builtin\">bool</span> success <span class=\"token operator\">=</span> _to<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">revert</span> <span class=\"token function\">SendFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"call\"><a href=\"#call\" class=\"headerlink\" title=\"call\"></a>call</h3><ul>\n<li>用法是<code>接收方地址.call{value: 发送ETH数额}(\"\")</code>。</li>\n<li><code>call()</code>没有<code>gas</code>限制，可以支持对方合约<code>fallback()</code>或<code>receive()</code>函数实现复杂逻辑。</li>\n<li><code>call()</code>如果转账失败，不会<code>revert</code>。</li>\n<li><code>call()</code>的返回值是<code>(bool, data)</code>，其中<code>bool</code>代表着转账成功或失败，需要额外代码处理一下。</li>\n</ul>\n<p>代码样例：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// call()发送ETH</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">callETH</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _to<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 处理下call的返回值，如果失败，revert交易并发送error</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _to<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> amount<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">revert</span> <span class=\"token function\">CallFailed</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"三者的选择\"><a href=\"#三者的选择\" class=\"headerlink\" title=\"三者的选择\"></a>三者的选择</h3><ul>\n<li><code>call</code>没有<code>gas</code>限制，最为灵活，是最提倡的方法；</li>\n<li><code>transfer</code>有<code>2300 gas</code>限制，但是发送失败会自动<code>revert</code>交易，是次优选择；</li>\n<li><code>send</code>有<code>2300 gas</code>限制，而且发送失败不会自动<code>revert</code>交易，几乎没有人用它。</li>\n</ul>\n<h2 id=\"21-调用其他合约\"><a href=\"#21-调用其他合约\" class=\"headerlink\" title=\"21.调用其他合约\"></a>21.调用其他合约</h2><p><strong>调用已部署合约</strong></p>\n<p>开发者写智能合约来调用其他合约，这让以太坊网络上的程序可以复用，从而建立繁荣的生态。很多<code>web3</code>项目依赖于调用其他合约，比如收益农场（<code>yield farming</code>）。这一讲，我们介绍如何在已知合约代码（或接口）和地址情况下调用目标合约的函数。</p>\n<h3 id=\"目标合约\"><a href=\"#目标合约\" class=\"headerlink\" title=\"目标合约\"></a>目标合约</h3><p>先写一个简单的合约<code>OtherContract</code>来调用。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">OtherContract</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">private</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状态变量_x</span>\n    <span class=\"token comment\">// 收到eth的事件，记录amount和gas</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> gas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 返回合约ETH余额</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        _x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果转入ETH，则释放Log事件</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">emit</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 读取_x</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个合约包含一个状态变量<code>_x</code>，一个事件<code>Log</code>在收到<code>ETH</code>时触发，三个函数：</p>\n<ul>\n<li><code>getBalance()</code>: 返回合约<code>ETH</code>余额。</li>\n<li><code>setX()</code>: <code>external payable</code>函数，可以设置<code>_x</code>的值，并向合约发送<code>ETH</code>。</li>\n<li><code>getX()</code>: 读取<code>_x</code>的值。</li>\n</ul>\n<h3 id=\"调用OtherContract合约\"><a href=\"#调用OtherContract合约\" class=\"headerlink\" title=\"调用OtherContract合约\"></a>调用<code>OtherContract</code>合约</h3><p>（先贴个源码吧，本来以为要创建两个文件的，只要一个文件部署两个合约就可以了）</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">OtherContract</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">private</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状态变量x</span>\n    <span class=\"token comment\">// 收到eth事件，记录amount和gas</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> gas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">// 返回合约ETH余额</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        _x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果转入ETH，则释放Log事件</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">emit</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 读取x</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">CallContract</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">callSetX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _Address<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">OtherContract</span><span class=\"token punctuation\">(</span>_Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">callGetX</span><span class=\"token punctuation\">(</span>OtherContract _Address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> _Address<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">callGetX2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _Address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        OtherContract oc <span class=\"token operator\">=</span> <span class=\"token function\">OtherContract</span><span class=\"token punctuation\">(</span>_Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        x <span class=\"token operator\">=</span> oc<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setXTransferETH</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> otherContract<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">OtherContract</span><span class=\"token punctuation\">(</span>otherContract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setX<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们可以利用合约的地址和合约代码（或接口）来创建合约的引用：<code>_Name(_Address)</code>，其中<code>_Name</code>是合约名，<code>_Address</code>是合约地址。然后用合约的引用来调用它的函数：<code>_Name(_Address).f()</code>，其中<code>f()</code>是要调用的函数。</p>\n<p>下面我们介绍4个调用合约的例子，在remix中编译合约后，分别部署<code>OtherContract</code>和<code>CallContract</code>：(还没怎么搞得懂)<br><img src=\"https://wtf.academy/assets/images/21-1-9c522c370dfc53d1a0c273716f949c9e.png\" alt=\"\"><br><img src=\"https://wtf.academy/assets/images/21-2-a3c672e6dca937bf09dc3dfe5a421534.png\" alt=\"\"><br><img src=\"https://wtf.academy/assets/images/21-3-dd0cfc401d8462761c9b740ec21aa994.png\" alt=\"\"></p>\n<h4 id=\"1-传入合约地址\"><a href=\"#1-传入合约地址\" class=\"headerlink\" title=\"1.传入合约地址\"></a>1.传入合约地址</h4><p>我们可以在函数里传入目标合约地址，生成目标合约的引用，然后调用目标函数。以调用<code>OtherContract</code>合约的<code>setX</code>函数为例，我们在新合约中写一个<code>callSetX</code>函数，传入已部署好的<code>OtherContract</code>合约地址<code>_Address</code>和<code>setX</code>的参数<code>x</code>：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">callSetX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _Address<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">OtherContract</span><span class=\"token punctuation\">(</span>_Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">setX</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>复制<code>OtherContract</code>合约的地址，填入<code>callSetX</code>函数的参数中，成功调用后，调用<code>OtherContract</code>合约中的<code>getX</code>验证<code>x</code>变为123<br><img src=\"https://wtf.academy/assets/images/21-4-89e705ffc18c8f90063c922e7504b31e.png\" alt=\"\"><br><img src=\"https://wtf.academy/assets/images/21-5-52866e87f467b4ebad52d6d00d4d2744.png\" alt=\"\"></p>\n<h4 id=\"2-传入合约变量\"><a href=\"#2-传入合约变量\" class=\"headerlink\" title=\"2.传入合约变量\"></a>2.传入合约变量</h4><p>我们可以直接在函数里传入合约的引用，只需要把上面参数的<code>address</code>类型改为目标合约名，比如<code>OtherContract</code>。下面例子实现了调用目标合约的<code>getX()</code>函数。</p>\n<p><strong>注意</strong>该函数参数<code>OtherContract _Address</code>底层类型仍然是<code>address</code>，生成的<code>ABI</code>中、调用<code>callGetX</code>时传入的参数都是<code>address</code>类型</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">callGetX</span><span class=\"token punctuation\">(</span>OtherContract _Address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    x <span class=\"token operator\">=</span> _Address<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>复制<code>OtherContract</code>合约的地址，填入<code>callGetX</code>函数的参数中，调用后成功获取<code>x</code>的值<br><img src=\"https://wtf.academy/assets/images/21-6-615b6ab5f73c18a1c4a7a7d0be5f7228.png\" alt=\"\"></p>\n<h4 id=\"3-创建合约变量\"><a href=\"#3-创建合约变量\" class=\"headerlink\" title=\"3.创建合约变量\"></a>3.创建合约变量</h4><p>我们可以创建合约变量，然后通过它来调用目标函数。下面例子，我们给变量<code>oc</code>存储了<code>OtherContract</code>合约的引用：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">callGetX2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _Address<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    OtherContract oc <span class=\"token operator\">=</span> <span class=\"token function\">OtherContract</span><span class=\"token punctuation\">(</span>_Address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> oc<span class=\"token punctuation\">.</span><span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>复制<code>OtherContract</code>合约的地址，填入<code>callGetX2</code>函数的参数中，调用后成功获取<code>x</code>的值<br><img src=\"https://wtf.academy/assets/images/21-7-ab9a5e3d84b27006392eb368b1e93d2d.png\" alt=\"\"></p>\n<h4 id=\"4-调用合约并发送ETH\"><a href=\"#4-调用合约并发送ETH\" class=\"headerlink\" title=\"4.调用合约并发送ETH\"></a>4.调用合约并发送<code>ETH</code></h4><p>如果目标合约的函数是<code>payable</code>的，那么我们可以通过调用它来给合约转账：<code>_Name(_Address).f{value: _Value}()</code>，其中<code>_Name</code>是合约名，<code>_Address</code>是合约地址，<code>f</code>是目标函数名，<code>_Value</code>是要转的<code>ETH</code>数额（以<code>wei</code>为单位）。</p>\n<p><code>OtherContract</code>合约的<code>setX</code>函数是<code>payable</code>的，在下面这个例子中我们通过调用<code>setX</code>来往目标合约转账。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">setXTransferETH</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> otherContract<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">OtherContract</span><span class=\"token punctuation\">(</span>otherContract<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>setX<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>复制<code>OtherContract</code>合约的地址，填入<code>setXTransferETH</code>函数的参数中，并转入10ETH<br><img src=\"https://wtf.academy/assets/images/21-8-3566ee52a32b536dded77112c6599bdb.png\" alt=\"\"></p>\n<p>转账后，我们可以通过<code>Log</code>事件和<code>getBalance()</code>函数观察目标合约<code>ETH</code>余额的变化。<br><img src=\"https://wtf.academy/assets/images/21-9-d90c3bad37dd4d77acbd2ea8b695242e.png\" alt=\"\"></p>\n<h2 id=\"22-Call\"><a href=\"#22-Call\" class=\"headerlink\" title=\"22.Call\"></a>22.Call</h2><p><code>call</code> 是<code>address</code>类型的低级成员函数，它用来与其他合约交互。它的返回值为<code>(bool, data)</code>，分别对应<code>call</code>是否成功以及目标函数的返回值。</p>\n<ul>\n<li><code>call</code>是<code>solidity</code>官方推荐的通过触发<code>fallback</code>或<code>receive</code>函数发送<code>ETH</code>的方法。</li>\n<li>不推荐用<code>call</code>来调用另一个合约，因为当你调用不安全合约的函数时，你就把主动权交给了它。推荐的方法仍是声明合约变量后调用函数，见<a href=\"https://github.com/AmazingAng/WTFSolidity/tree/main/21_CallContract\">第21讲：调用其他合约</a></li>\n<li>当我们不知道对方合约的源代码或<code>ABI</code>，就没法生成合约变量；这时，我们仍可以通过<code>call</code>调用对方合约的函数。</li>\n</ul>\n<h3 id=\"call的使用规则\"><a href=\"#call的使用规则\" class=\"headerlink\" title=\"call的使用规则\"></a><code>call</code>的使用规则</h3><p><code>目标合约地址.call(二进制编码);</code></p>\n<p>其中<code>二进制编码</code>利用结构化编码函数<code>abi.encodeWithSignature</code>获得：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">abi.encodeWithSignature(\"函数签名\", 逗号分隔的具体参数)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>函数签名</code>为<code>\"函数名（逗号分隔的参数类型)\"</code>。例如<code>abi.encodeWithSignature(\"f(uint256,address)\", _x, _addr)</code>。</p>\n<p>另外<code>call</code>在调用合约时可以指定交易发送的<code>ETH</code>数额和<code>gas</code>：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">目标合约地址.call{value:发送数额, gas:gas数额}(二进制编码);<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>(看不懂……举个栗子康康)</p>\n<h3 id=\"目标合约-1\"><a href=\"#目标合约-1\" class=\"headerlink\" title=\"目标合约\"></a>目标合约</h3><p>先写一个简单的目标合约<code>OtherContract</code>并部署，代码与第19讲中基本相同，只是多了<code>fallback</code>函数。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">OtherContract</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">private</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状态变量x</span>\n    <span class=\"token comment\">// 收到eth的事件，记录amount和gas</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> gas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 返回合约ETH余额</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        _x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果转入ETH，则释放Log事件</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">emit</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 读取x</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个合约包含一个状态变量<code>x</code>，一个在收到<code>ETH</code>时触发的事件<code>Log</code>，三个函数：</p>\n<ul>\n<li><code>getBalance()</code>: 返回合约<code>ETH</code>余额。</li>\n<li><code>setX()</code>: <code>external payable</code>函数，可以设置<code>x</code>的值，并向合约发送<code>ETH</code>。</li>\n<li><code>getX()</code>: 读取<code>x</code>的值。</li>\n</ul>\n<h3 id=\"利用call调用目标合约\"><a href=\"#利用call调用目标合约\" class=\"headerlink\" title=\"利用call调用目标合约\"></a>利用<code>call</code>调用目标合约</h3><p><strong>1.Response事件</strong></p>\n<p>我们写一个<code>Call</code>合约来调用目标合约函数。首先定义一个<code>Response</code>事件，输出<code>call</code>返回的<code>success</code>和<code>data</code>，方便我们观察返回值。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 定义Response事件，输出call返回的结果success和data</span>\n<span class=\"token keyword\">event</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><strong>2.调用setX函数</strong></p>\n<p>我们定义<code>callSetX</code>函数来调用目标合约的<code>setX()</code>，转入<code>msg.value</code>数额的<code>ETH</code>，并释放<code>Response</code>事件输出<code>success</code>和<code>data</code>：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">callSetX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _addr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call setX()，同时可以发送ETH</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setX(uint256)\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//释放事件</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>接下来我们调用<code>callSetX</code>把状态变量<code>_x</code>改为5，参数为<code>OtherContract</code>地址和<code>5</code>，由于目标函数<code>setX()</code>没有返回值，因此<code>Response</code>事件输出的<code>data</code>为<code>0x</code>，也就是空。<br><img src=\"https://wtf.academy/assets/images/22-1-c8df2a8eb61086564f7e7bd4346ae8a8.png\" alt=\"\"></p>\n<p><strong>3.调用getX函数</strong></p>\n<p>下面我们调用<code>getX()</code>函数，它将返回目标合约<code>_x</code>的值，类型为<code>uint256</code>。我们可以利用<code>abi.decode</code>来解码<code>call</code>的返回值<code>data</code>，并读出数值。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">callGetX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call getX()</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getX()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//释放事件</span>\n    <span class=\"token keyword\">return</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>从<code>Response</code>事件的输出，我们可以看到<code>data</code>为<code>0x0000000000000000000000000000000000000000000000000000000000000005</code>。而经过<code>abi.decode</code>，最终返回值为<code>5</code>。<br><img src=\"https://wtf.academy/assets/images/22-2-008a7b4cdb2734426c2c284cfca79b41.png\" alt=\"\"></p>\n<p><strong>4.调用不存在的函数</strong></p>\n<p>如果我们给<code>call</code>输入的函数不存在于目标合约，那么目标合约的<code>fallback</code>函数会被触发。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">callNonExist</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call getX()</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo(uint256)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//释放事件</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上面例子中，我们<code>call</code>了不存在的<code>foo</code>函数。<code>call</code>仍能执行成功，并返回<code>success</code>，但其实调用的目标合约<code>fallback</code>函数。<br><img src=\"https://wtf.academy/assets/images/22-3-b6b8e21fc3d39b5592c1a54f75fdad66.png\" alt=\"\"></p>\n<p><code>call</code>不是调用合约的推荐方法，因为不安全。但他能让我们在不知道源代码和<code>ABI</code>的情况下调用目标合约，很有用。</p>\n<p>(最后直接贴上所有代码)</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// SPDX-License-Identifier: MIT</span>\n<span class=\"token keyword\">pragma</span> <span class=\"token keyword\">solidity</span> <span class=\"token operator\">^</span><span class=\"token version number\">0.8.4</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">OtherContract</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint256</span> <span class=\"token keyword\">private</span> _x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 状态变量x</span>\n    <span class=\"token comment\">// 收到eth的事件，记录amount和gas</span>\n    <span class=\"token keyword\">event</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> gas<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">fallback</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 返回合约ETH余额</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 可以调整状态变量_x的函数，并且可以往合约转ETH (payable)</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        _x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 如果转入ETH，则释放Log事件</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value <span class=\"token operator\">&gt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">emit</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">,</span> <span class=\"token function\">gasleft</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 读取x</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getX</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x <span class=\"token operator\">=</span> _x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">contract</span> <span class=\"token class-name\">call</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">function</span> <span class=\"token function\">callGetX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call getX()</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"getX()\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//释放事件</span>\n    <span class=\"token keyword\">return</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">event</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">callSetX</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token keyword\">payable</span> _addr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint256</span> x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call setX()，同时可以发送ETH</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span>call<span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> msg<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setX(uint256)\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//释放事件</span>\n<span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">callNonExist</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call getX()</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo(uint256)\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Response</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//释放事件</span>\n<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"23-Delegatecall\"><a href=\"#23-Delegatecall\" class=\"headerlink\" title=\"23.Delegatecall\"></a>23.Delegatecall</h2><p><code>delegatecall</code>与<code>call</code>类似，是<code>solidity</code>中地址类型的低级成员函数。<code>delegate</code>中是委托/代表的意思，那么<code>delegatecall</code>委托了什么？</p>\n<p>当用户<code>A</code>通过合约<code>B</code>来<code>call</code>合约<code>C</code>的时候，执行的是合约<code>C</code>的函数，<code>语境</code>(<code>Context</code>，可以理解为包含变量和状态的环境)也是合约<code>C</code>的：<code>msg.sender</code>是<code>B</code>的地址，并且如果函数改变一些状态变量，产生的效果会作用于合约<code>C</code>的变量上。<br><img src=\"https://images.mirror-media.xyz/publication-images/VgMR533pA8WYtE5Lr65mQ.png?height=698&amp;width=1860\" alt=\"\"></p>\n<p>而当用户<code>A</code>通过合约<code>B</code>来<code>delegatecall</code>合约<code>C</code>的时候，执行的是合约<code>C</code>的函数，但是<code>语境</code>仍是合约<code>B</code>的：<code>msg.sender</code>是<code>A</code>的地址，并且如果函数改变一些状态变量，产生的效果会作用于合约<code>B</code>的变量上。<br><img src=\"https://images.mirror-media.xyz/publication-images/JucQiWVixdlmJl6zHjCSI.png?height=702&amp;width=1862\" alt=\"\"></p>\n<p>大家可以这样理解：一个<code>富商</code>把它的资产（<code>状态变量</code>）都交给一个<code>VC</code>代理（<code>目标合约</code>的函数）来打理。执行的是<code>VC</code>的函数，但是改变的是<code>富商</code>的状态。</p>\n<p><code>delegatecall</code>语法和<code>call</code>类似，也是：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">目标合约地址<span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>二进制编码<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中<code>二进制编码</code>利用结构化编码函数<code>abi.encodeWithSignature</code>获得：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"函数签名\"</span><span class=\"token punctuation\">,</span> 逗号分隔的具体参数<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>函数签名</code>为<code>\"函数名（逗号分隔的参数类型)\"</code>。例如<code>abi.encodeWithSignature(\"f(uint256,address)\", _x, _addr)</code>。</p>\n<p>和<code>call</code>不一样，<code>delegatecall</code>在调用合约时可以指定交易发送的<code>gas</code>，但不能指定发送的<code>ETH</code>数额</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>注意</strong>：<code>delegatecall</code>有安全隐患，使用时要保证当前合约和目标合约的状态变量存储结构相同，并且目标合约安全，不然会造成资产损失。</p></blockquote>\n<h3 id=\"什么情况下会用到delegatecall\"><a href=\"#什么情况下会用到delegatecall\" class=\"headerlink\" title=\"什么情况下会用到delegatecall\"></a>什么情况下会用到<code>delegatecall</code></h3><p>目前<code>delegatecall</code>主要有两个应用场景：</p>\n<ol>\n<li>代理合约（<code>Proxy Contract</code>）：将智能合约的存储合约和逻辑合约分开：代理合约（<code>Proxy Contract</code>）存储所有相关的变量，并且保存逻辑合约的地址；所有函数存在逻辑合约（<code>Logic Contract</code>）里，通过<code>delegatecall</code>执行。当升级时，只需要将代理合约指向新的逻辑合约即可。</li>\n<li>EIP-2535 Diamonds（钻石）：钻石是一个支持构建可在生产中扩展的模块化智能合约系统的标准。钻石是具有多个实施合同的代理合同。</li>\n</ol>\n<h3 id=\"delegatecall例子\"><a href=\"#delegatecall例子\" class=\"headerlink\" title=\"delegatecall例子\"></a><code>delegatecall</code>例子</h3><p>调用结构：你（<code>A</code>）通过合约<code>B</code>调用目标合约<code>C</code>。</p>\n<h4 id=\"被调用的合约C\"><a href=\"#被调用的合约C\" class=\"headerlink\" title=\"被调用的合约C\"></a>被调用的合约C</h4><p>我们先写一个简单的目标合约<code>C</code>：有两个<code>public</code>变量：<code>num</code>和<code>sender</code>，分别是<code>uint256</code>和<code>address</code>类型；有一个函数，可以将<code>num</code>设定为传入的<code>_num</code>，并且将<code>sender</code>设为<code>msg.sender</code>。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 被调用的合约C</span>\n<span class=\"token keyword\">contract</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> sender<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">setVars</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> _num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n        num <span class=\"token operator\">=</span> _num<span class=\"token punctuation\">;</span>\n        sender <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"发起调用的合约B\"><a href=\"#发起调用的合约B\" class=\"headerlink\" title=\"发起调用的合约B\"></a>发起调用的合约B</h4><p>首先，<strong>合约<code>B</code>和目标合约<code>C</code>的变量存储布局必须相同</strong>，两个变量，并且顺序为<code>num</code>和<code>sender</code></p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">B</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> num<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> sender<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>接下来，我们分别用<code>call</code>和<code>delegatecall</code>来调用合约<code>C</code>的<code>setVars</code>函数，更好的理解它们的区别。</p>\n<p><code>callSetVars</code>函数通过<code>call</code>来调用<code>setVars</code>。它有两个参数<code>_addr</code>和<code>_num</code>，分别对应合约<code>C</code>的地址和<code>setVars</code>的参数。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 通过call来调用C的setVars()函数，将改变合约C里的状态变量</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">callSetVars</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> _num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call setVars()</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>\n        abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setVars(uint256)\"</span><span class=\"token punctuation\">,</span> _num<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>而<code>delegatecallSetVars</code>函数通过<code>delegatecall</code>来调用<code>setVars</code>。与上面的<code>callSetVars</code>函数相同，有两个参数<code>_addr</code>和<code>_num</code>，分别对应合约<code>C</code>的地址和<code>setVars</code>的参数。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">    <span class=\"token comment\">// 通过delegatecall来调用C的setVars()函数，将改变合约B里的状态变量</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">delegatecallSetVars</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _addr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span> _num<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// delegatecall setVars()</span>\n        <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> _addr<span class=\"token punctuation\">.</span><span class=\"token function\">delegatecall</span><span class=\"token punctuation\">(</span>\n            abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setVars(uint256)\"</span><span class=\"token punctuation\">,</span> _num<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"在remix上验证\"><a href=\"#在remix上验证\" class=\"headerlink\" title=\"在remix上验证\"></a>在remix上验证</h4><p>1.首先，我们把合约<code>B</code>和<code>C</code>都部署好</p>\n<p><img src=\"https://wtf.academy/assets/images/23-1-85c05f2d534e1a100a08f48bdea973b0.png\" alt=\"deploy.png\"></p>\n<p>2.部署之后，查看<code>C</code>合约状态变量的初始值，<code>B</code>合约的状态变量也是一样。</p>\n<p><img src=\"https://wtf.academy/assets/images/23-2-0710e49786d637814b5998a6b2c33dc0.png\" alt=\"initialstate.png\"></p>\n<p>3.此时，调用合约<code>B</code>中的<code>callSetVars</code>，传入参数为合约<code>C</code>地址和<code>10</code></p>\n<p><img src=\"https://wtf.academy/assets/images/23-3-24a8e170ef4ffc2ee1964ecea2e3fa46.png\" alt=\"call.png\"></p>\n<p>4.运行后，合约<code>C</code>中的状态变量将被修改：<code>num</code>被改为<code>10</code>，<code>sender</code>变为合约<code>B</code>的地址</p>\n<p><img src=\"https://wtf.academy/assets/images/23-4-dc4ef0d4cdcdd6fa306fc19dd4b3f931.png\" alt=\"resultcall.png\"></p>\n<p>5.接下来，我们调用合约<code>B</code>中的<code>delegatecallSetVars</code>，传入参数为合约<code>C</code>地址和<code>100</code></p>\n<p><img src=\"https://wtf.academy/assets/images/23-5-48ec2ddb52f11031a3d1fba839e74f26.png\" alt=\"delegatecall.png\"></p>\n<p>6.由于是<code>delegatecall</code>，语境为合约<code>B</code>。在运行后，合约<code>B</code>中的状态变量将被修改：<code>num</code>被改为<code>100</code>，<code>sender</code>变为你的钱包地址。合约<code>C</code>中的状态变量不会被修改。</p>\n<p><img src=\"https://wtf.academy/assets/images/23-6-563be58ca9837183438ce89b76b618fb.png\" alt=\"\"></p>\n<h2 id=\"24-在合约中创建新合约\"><a href=\"#24-在合约中创建新合约\" class=\"headerlink\" title=\"24.在合约中创建新合约\"></a>24.在合约中创建新合约</h2><p>在以太坊链上，用户（外部账户，<code>EOA</code>）可以创建智能合约，智能合约同样也可以创建新的智能合约。去中心化交易所<code>uniswap</code>就是利用工厂合约（<code>Factory</code>）创建了无数个币对合约（<code>Pair</code>）。这一讲，我会用简化版的<code>uniswap</code>讲如何通过合约创建合约。</p>\n<h3 id=\"create和create2\"><a href=\"#create和create2\" class=\"headerlink\" title=\"create和create2\"></a><code>create</code>和<code>create2</code></h3><p>有两种方法可以在合约中创建新合约，<code>create</code>和<code>create2</code>，这里我们讲<code>create</code>，下一讲会介绍<code>create2</code>。</p>\n<p><code>create</code>的用法很简单，就是<code>new</code>一个合约，并传入新合约构造函数所需的参数：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">Contract x <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Contract</span><span class=\"token punctuation\">{</span>value<span class=\"token punctuation\">:</span> _value<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中<code>Contract</code>是要创建的合约名，<code>x</code>是合约对象（地址），如果构造函数是<code>payable</code>，可以创建时转入<code>_value</code>数量的<code>ETH</code>，<code>params</code>是新合约构造函数的参数。</p>\n<h3 id=\"极简Uniswap\"><a href=\"#极简Uniswap\" class=\"headerlink\" title=\"极简Uniswap\"></a>极简Uniswap</h3><p><code>Uniswap V2</code><a href=\"https://github.com/Uniswap/v2-core/tree/master/contracts\">核心合约</a>中包含两个合约：</p>\n<ol>\n<li>UniswapV2Pair: 币对合约，用于管理币对地址、流动性、买卖。</li>\n<li>UniswapV2Factory: 工厂合约，用于创建新的币对，并管理币对地址。</li>\n</ol>\n<p>下面我们用<code>create</code>方法实现一个极简版的<code>Uniswap</code>：<code>Pair</code>币对合约负责管理币对地址，<code>PairFactory</code>工厂合约用于创建新的币对，并管理币对地址。</p>\n<h4 id=\"Pair合约\"><a href=\"#Pair合约\" class=\"headerlink\" title=\"Pair合约\"></a><code>Pair</code>合约</h4><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> factory<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工厂合约地址</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> token0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代币1</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> token1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代币2</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n        factory <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// called once by the factory at time of deployment</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _token0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _token1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> factory<span class=\"token punctuation\">,</span> <span class=\"token string\">'UniswapV2: FORBIDDEN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sufficient check</span>\n        token0 <span class=\"token operator\">=</span> _token0<span class=\"token punctuation\">;</span>\n        token1 <span class=\"token operator\">=</span> _token1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Pair</code>合约很简单，包含3个状态变量：<code>factory</code>，<code>token0</code>和<code>token1</code>。</p>\n<p>构造函数<code>constructor</code>在部署时将<code>factory</code>赋值为工厂合约地址。<code>initialize</code>函数会在<code>Pair</code>合约创建的时候被工厂合约调用一次，将<code>token0</code>和<code>token1</code>更新为币对中两种代币的地址。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p><strong>提问</strong>：为什么<code>uniswap</code>不在<code>constructor</code>中将<code>token0</code>和<code>token1</code>地址更新好？</p>\n<p><strong>答</strong>：因为<code>uniswap</code>使用的是<code>create2</code>创建合约，限制构造函数不能有参数。当使用<code>create</code>时，<code>Pair</code>合约允许构造函数有参数，可以在<code>constructor</code>中将<code>token0</code>和<code>token1</code>地址更新好。</p></blockquote>\n<h4 id=\"PairFactory\"><a href=\"#PairFactory\" class=\"headerlink\" title=\"PairFactory\"></a><code>PairFactory</code></h4><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">PairFactory</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> getPair<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过两个代币地址查Pair地址</span>\n    <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> allPairs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存所有Pair地址</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">createPair</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> tokenA<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> tokenB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> pairAddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 创建新合约</span>\n        Pair pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token comment\">// 调用新合约的initialize方法</span>\n        pair<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>tokenA<span class=\"token punctuation\">,</span> tokenB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// 更新地址map</span>\n        pairAddr <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        allPairs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pairAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        getPair<span class=\"token punctuation\">[</span>tokenA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tokenB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pairAddr<span class=\"token punctuation\">;</span>\n        getPair<span class=\"token punctuation\">[</span>tokenB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tokenA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pairAddr<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>工厂合约（<code>PairFactory</code>）有两个状态变量<code>getPair</code>是两个代币地址到币对地址的<code>map</code>，方便根据代币找到币对地址；<code>allPairs</code>是币对地址的数组，存储了所有代币地址。</p>\n<p><code>PairFactory</code>合约只有一个<code>createPair</code>函数，根据输入的两个代币地址<code>tokenA</code>和<code>tokenB</code>来创建新的<code>Pair</code>合约。其中</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">Pair pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就是创建合约的代码，非常简单。大家可以部署好<code>PairFactory</code>合约，然后用下面两个地址作为参数调用<code>createPair</code>，看看创建的币对地址是什么：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">WBNB地址: 0x2c44b726ADF1963cA47Af88B284C06f30380fC78\nBSC链上的PEOPLE地址:\n0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"在remix上验证-1\"><a href=\"#在remix上验证-1\" class=\"headerlink\" title=\"在remix上验证\"></a>在remix上验证</h4><p>1.使用<code>WBNB</code>和<code>PEOPLE</code>的地址作为参数调用<code>createPair</code>,得到<code>Pair</code>合约地址：0xD3e2008b4Da2cD6DEAF73471590fF30C86778A48</p>\n<p><img src=\"https://wtf.academy/assets/images/24-1-d4a6d130254e0486a4cb649b74cb40c4.png\" alt=\"img\"></p>\n<p>（刚开始没整出来，加个步骤，复制得到的<code>Pair</code>合约地址，放到<code>At Address</code>里面，同时上面部署合约要改回<code>Pair</code>,点击<code>At Address</code>得到合约）</p>\n<p><img src=\"https://s2.loli.net/2022/11/29/pw3mz5S8MTjeItD.png\" alt=\"image-20221129212246832.png\"></p>\n<p>2.查看<code>Pair</code>合约变量</p>\n<p><img src=\"https://wtf.academy/assets/images/24-2-3521680cc697424ef856eae959ad61c0.png\" alt=\"img\"></p>\n<p>3.Debug查看<code>create</code>操作码</p>\n<p><img src=\"https://wtf.academy/assets/images/24-3-f4526e2f8351ddfcabb223ec5ec6d20a.png\" alt=\"img\"></p>\n<h2 id=\"25-Create2\"><a href=\"#25-Create2\" class=\"headerlink\" title=\"25.Create2\"></a>25.Create2</h2><p><code>CREATE2</code> 操作码使我们在智能合约部署在以太坊网络之前就能预测合约的地址。<code>Uniswap</code>创建<code>Pair</code>合约用的就是<code>CREATE2</code>而不是<code>CREATE</code>。</p>\n<h3 id=\"Create如何计算地址\"><a href=\"#Create如何计算地址\" class=\"headerlink\" title=\"Create如何计算地址\"></a>Create如何计算地址</h3><p>智能合约可以由其他合约和普通账户利用<code>CREATE</code>操作码创建。 在这两种情况下，新合约的地址都以相同的方式计算：创建者的地址(通常为部署的钱包地址或者合约地址)和<code>nonce</code>(该地址发送交易的总数,对于合约账户是创建的合约总数,每创建一个合约nonce+1))的哈希。</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">新地址 = hash(创建者地址, nonce)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建者地址不会变，但<code>nonce</code>可能会随时间而改变，因此用<code>CREATE</code>创建的合约地址不好预测。</p>\n<h3 id=\"Create2如何计算地址\"><a href=\"#Create2如何计算地址\" class=\"headerlink\" title=\"Create2如何计算地址\"></a>Create2如何计算地址</h3><p><code>CREATE2</code>的目的是为了让合约地址独立于未来的事件。不管未来区块链上发生了什么，你都可以把合约部署在事先计算好的地址上。用<code>CREATE2</code>创建的合约地址由4个部分决定：</p>\n<ul>\n<li><code>0xFF</code>：一个常数，避免和<code>CREATE</code>冲突</li>\n<li>创建者地址</li>\n<li><code>salt</code>（盐）：一个创建者给定的数值</li>\n<li>待部署合约的字节码（<code>bytecode</code>）</li>\n</ul>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">新地址 = hash(\"0xFF\",创建者地址, salt, bytecode)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><code>CREATE2</code> 确保，如果创建者使用 <code>CREATE2</code> 和提供的 <code>salt</code> 部署给定的合约<code>bytecode</code>，它将存储在 <code>新地址</code> 中。</p>\n<h3 id=\"如何使用Create2\"><a href=\"#如何使用Create2\" class=\"headerlink\" title=\"如何使用Create2\"></a>如何使用<code>Create2</code></h3><p><code>CREATE2</code>的用法和之前讲的<code>Create</code>类似，同样是<code>new</code>一个合约，并传入新合约构造函数所需的参数，只不过要多传一个<code>salt</code>参数：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">Contract x = new Contract{salt: _salt, value: _value}(params)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中<code>Contract</code>是要创建的合约名，<code>x</code>是合约对象（地址），<code>_salt</code>是指定的盐；如果构造函数是<code>payable</code>，可以创建时转入<code>_value</code>数量的<code>ETH</code>，<code>params</code>是新合约构造函数的参数。</p>\n<h3 id=\"极简Uniswap2\"><a href=\"#极简Uniswap2\" class=\"headerlink\" title=\"极简Uniswap2\"></a>极简Uniswap2</h3><h4 id=\"Pair\"><a href=\"#Pair\" class=\"headerlink\" title=\"Pair\"></a><code>Pair</code></h4><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> factory<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 工厂合约地址</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> token0<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代币1</span>\n    <span class=\"token builtin\">address</span> <span class=\"token keyword\">public</span> token1<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 代币2</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span>\n        factory <span class=\"token operator\">=</span> msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// called once by the factory at time of deployment</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> _token0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> _token1<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender <span class=\"token operator\">==</span> factory<span class=\"token punctuation\">,</span> <span class=\"token string\">'UniswapV2: FORBIDDEN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// sufficient check</span>\n        token0 <span class=\"token operator\">=</span> _token0<span class=\"token punctuation\">;</span>\n        token1 <span class=\"token operator\">=</span> _token1<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>Pair</code>合约很简单，包含3个状态变量：<code>factory</code>，<code>token0</code>和<code>token1</code>。</p>\n<p>构造函数<code>constructor</code>在部署时将<code>factory</code>赋值为工厂合约地址。<code>initialize</code>函数会在<code>Pair</code>合约创建的时候被工厂合约调用一次，将<code>token0</code>和<code>token1</code>更新为币对中两种代币的地址。</p>\n<h4 id=\"PairFactory2\"><a href=\"#PairFactory2\" class=\"headerlink\" title=\"PairFactory2\"></a><code>PairFactory2</code></h4><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">PairFactory2</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token keyword\">mapping</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> <span class=\"token operator\">=&gt;</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> getPair<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 通过两个代币地址查Pair地址</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">public</span> allPairs<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 保存所有Pair地址</span>\n\n        <span class=\"token keyword\">function</span> <span class=\"token function\">createPair2</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> tokenA<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> tokenB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> pairAddr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>tokenA <span class=\"token operator\">!=</span> tokenB<span class=\"token punctuation\">,</span> <span class=\"token string\">'IDENTICAL_ADDRESSES'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//避免tokenA和tokenB相同产生的冲突</span>\n            <span class=\"token comment\">// 计算用tokenA和tokenB地址计算salt</span>\n            <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> token0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> token1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tokenA <span class=\"token operator\">&lt;</span> tokenB <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>tokenA<span class=\"token punctuation\">,</span> tokenB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>tokenB<span class=\"token punctuation\">,</span> tokenA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将tokenA和tokenB按大小排序</span>\n            <span class=\"token builtin\">bytes32</span> salt <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>token0<span class=\"token punctuation\">,</span> token1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 用create2部署新合约</span>\n            Pair pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">{</span>salt<span class=\"token punctuation\">:</span> salt<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n            <span class=\"token comment\">// 调用新合约的initialize方法</span>\n            pair<span class=\"token punctuation\">.</span><span class=\"token function\">initialize</span><span class=\"token punctuation\">(</span>tokenA<span class=\"token punctuation\">,</span> tokenB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 更新地址map</span>\n            pairAddr <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span>pair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            allPairs<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>pairAddr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            getPair<span class=\"token punctuation\">[</span>tokenA<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tokenB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pairAddr<span class=\"token punctuation\">;</span>\n            getPair<span class=\"token punctuation\">[</span>tokenB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>tokenA<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> pairAddr<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>工厂合约（<code>PairFactory2</code>）有两个状态变量<code>getPair</code>是两个代币地址到币对地址的<code>map</code>，方便根据代币找到币对地址；<code>allPairs</code>是币对地址的数组，存储了所有币对地址。</p>\n<p><code>PairFactory2</code>合约只有一个<code>createPair2</code>函数，使用<code>CREATE2</code>根据输入的两个代币地址<code>tokenA</code>和<code>tokenB</code>来创建新的<code>Pair</code>合约。其中</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">Pair pair <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Pair</span><span class=\"token punctuation\">{</span>salt<span class=\"token punctuation\">:</span> salt<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>就是利用<code>CREATE2</code>创建合约的代码，非常简单，而<code>salt</code>为<code>token1</code>和<code>token2</code>的<code>hash</code>：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes32</span> salt <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>token0<span class=\"token punctuation\">,</span> token1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"事先计算Pair地址\"><a href=\"#事先计算Pair地址\" class=\"headerlink\" title=\"事先计算Pair地址\"></a>事先计算<code>Pair</code>地址</h4><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 提前计算pair合约地址</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateAddr</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> tokenA<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> tokenB<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> predictedAddress<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>tokenA <span class=\"token operator\">!=</span> tokenB<span class=\"token punctuation\">,</span> <span class=\"token string\">'IDENTICAL_ADDRESSES'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//避免tokenA和tokenB相同产生的冲突</span>\n    <span class=\"token comment\">// 计算用tokenA和tokenB地址计算salt</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> token0<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> token1<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tokenA <span class=\"token operator\">&lt;</span> tokenB <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>tokenA<span class=\"token punctuation\">,</span> tokenB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span>tokenB<span class=\"token punctuation\">,</span> tokenA<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//将tokenA和tokenB按大小排序</span>\n    <span class=\"token builtin\">bytes32</span> salt <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>token0<span class=\"token punctuation\">,</span> token1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 计算合约地址方法 hash()</span>\n    predictedAddress <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint160</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>\n        <span class=\"token builtin\">bytes1</span><span class=\"token punctuation\">(</span><span class=\"token number\">0xff</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        salt<span class=\"token punctuation\">,</span>\n        <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>Pair<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>creationCode<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>我们写了一个<code>calculateAddr</code>函数来事先计算<code>tokenA</code>和<code>tokenB</code>将会生成的<code>Pair</code>地址。通过它，我们可以验证我们事先计算的地址和实际地址是否相同。</p>\n<p>大家可以部署好<code>PairFactory2</code>合约，然后用下面两个地址作为参数调用<code>createPair2</code>，看看创建的币对地址是什么，是否与事先计算的地址一样：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">WBNB地址: 0x2c44b726ADF1963cA47Af88B284C06f30380fC78\nBSC链上的PEOPLE地址:\n0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"在remix上验证-2\"><a href=\"#在remix上验证-2\" class=\"headerlink\" title=\"在remix上验证\"></a>在remix上验证</h4><ol>\n<li><p>首先用<code>WBNB</code>和<code>PEOPLE</code>的地址哈希作为<code>salt</code>来计算出<code>Pair</code>合约的地址</p>\n</li>\n<li><p>调用<code>PairFactory2.createPair2</code>传入参数为<code>WBNB</code>和<code>PEOPLE</code>的地址，获取出创建的<code>pair</code>合约地址</p>\n</li>\n<li><p>对比合约地址 </p>\n</li>\n</ol>\n<p><img src=\"https://wtf.academy/assets/images/25-1-2d1f4ed217fe799a46e8b53a44cfdd3b.png\" alt=\"create2_remix_test.png\"></p>\n<h3 id=\"create2的实际应用场景\"><a href=\"#create2的实际应用场景\" class=\"headerlink\" title=\"create2的实际应用场景\"></a>create2的实际应用场景</h3><ol>\n<li>交易所为新用户预留创建钱包合约地址。</li>\n<li>由 <code>CREATE2</code> 驱动的 <code>factory</code> 合约，在<code>uniswapV2</code>中交易对的创建是在 <code>Factory</code>中调用<code>create2</code>完成。这样做的好处是: 它可以得到一个确定的<code>pair</code>地址, 使得 <code>Router</code>中就可以通过 <code>(tokenA, tokenB)</code> 计算出<code>pair</code>地址, 不再需要执行一次 <code>Factory.getPair(tokenA, tokenB)</code> 的跨合约调用。</li>\n</ol>\n<h2 id=\"26-删除合约\"><a href=\"#26-删除合约\" class=\"headerlink\" title=\"26.删除合约\"></a>26.删除合约</h2><h3 id=\"selfdestruct\"><a href=\"#selfdestruct\" class=\"headerlink\" title=\"selfdestruct\"></a><code>selfdestruct</code></h3><p><code>selfdestruct</code>命令可以用来删除智能合约，并将该合约剩余<code>ETH</code>转到指定地址。<code>selfdestruct</code>是为了应对合约出错的极端情况而设计的。它最早被命名为<code>suicide</code>（自杀），但是这个词太敏感。为了保护抑郁的程序员，改名为<code>selfdestruct</code>。</p>\n<h3 id=\"如何使用selfdestruct\"><a href=\"#如何使用selfdestruct\" class=\"headerlink\" title=\"如何使用selfdestruct\"></a>如何使用<code>selfdestruct</code></h3><p><code>selfdestruct</code>使用起来非常简单：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">selfdestruct</span><span class=\"token punctuation\">(</span>_addr<span class=\"token punctuation\">)</span>；<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>其中<code>_addr</code>是接收合约中剩余<code>ETH</code>的地址。</p>\n<h3 id=\"例子\"><a href=\"#例子\" class=\"headerlink\" title=\"例子\"></a>例子</h3><pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">DeleteContract</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token builtin\">uint</span> <span class=\"token keyword\">public</span> value <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">receive</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">payable</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">deleteContract</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 调用selfdestruct销毁合约，并把剩余的ETH转给msg.sender</span>\n        <span class=\"token keyword\">selfdestruct</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">payable</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>sender<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">getBalance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> balance<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        balance <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>balance<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在<code>DeleteContract</code>合约中，我们写了一个<code>public</code>状态变量<code>value</code>，两个函数：<code>getBalance()</code>用于获取合约<code>ETH</code>余额，<code>deleteContract()</code>用于自毁合约，并把<code>ETH</code>转入给发起人。</p>\n<p>部署好合约后，我们向<code>DeleteContract</code>合约转入1 <code>ETH</code>。这时，<code>getBalance()</code>会返回1 <code>ETH</code>，<code>value</code>变量是10。</p>\n<p>当我们调用<code>deleteContract()</code>函数，合约将自毁，所有变量都清空，此时<code>value</code>变为默认值<code>0</code>，<code>getBalance()</code>也返回空值。</p>\n<h3 id=\"注意事项\"><a href=\"#注意事项\" class=\"headerlink\" title=\"注意事项\"></a>注意事项</h3><ol>\n<li>对外提供合约销毁接口时，最好设置为只有合约所有者可以调用，可以使用函数修饰符<code>onlyOwner</code>进行函数声明。</li>\n<li>当合约被销毁后与智能合约的交互也能成功，并且返回0。</li>\n<li>当合约中有<code>selfdestruct</code>功能时常常会带来安全问题和信任问题，合约中的<code>Selfdestruct</code>功能会为攻击者打开攻击向量(例如使用<code>selfdestruct</code>向一个合约频繁转入token进行攻击，这将大大节省了GAS的费用，虽然很少人这么做)，此外，此功能还会降低用户对合约的信心。</li>\n</ol>\n<h2 id=\"27-ABI编码解码\"><a href=\"#27-ABI编码解码\" class=\"headerlink\" title=\"27.ABI编码解码\"></a>27.ABI编码解码</h2><p><code>ABI</code> (Application Binary Interface，应用二进制接口)是与以太坊智能合约交互的标准。数据基于他们的类型编码；并且由于编码后不包含类型信息，解码时需要注明它们的类型。</p>\n<p><code>Solidity</code>中，<code>ABI编码</code>有4个函数：<code>abi.encode</code>, <code>abi.encodePacked</code>, <code>abi.encodeWithSignature</code>, <code>abi.encodeWithSelector</code>。而<code>ABI解码</code>有1个函数：<code>abi.decode</code>，用于解码<code>abi.encode</code>的数据。</p>\n<h4 id=\"ABI编码\"><a href=\"#ABI编码\" class=\"headerlink\" title=\"ABI编码\"></a>ABI编码</h4><p>我们将用编码4个变量，他们的类型分别是<code>uint256</code>, <code>address</code>, <code>string</code>, <code>uint256[2]</code>：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">uint</span> x <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">address</span> addr <span class=\"token operator\">=</span> <span class=\"token number\">0x7A58c0Be72BE218B41C608b7Fe7C5bB630736C71</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">string</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"0xAA\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"abi-encode\"><a href=\"#abi-encode\" class=\"headerlink\" title=\"abi.encode\"></a><code>abi.encode</code></h4><p>将给定参数利用<a href=\"https://learnblockchain.cn/docs/solidity/abi-spec.html\">ABI规则</a>编码。<code>ABI</code>被设计出来跟智能合约交互，他将每个参数填充为32字节的数据，并拼接在一起。如果你要和合约交互，你要用的就是<code>abi.encode</code>。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">encode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encode</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编码的结果为<code>0x000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c7100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043078414100000000000000000000000000000000000000000000000000000000</code>，由于<code>abi.encode</code>将每个数据都填充为32字节，中间有很多<code>0</code>。</p>\n<h4 id=\"abi-encodePacked\"><a href=\"#abi-encodePacked\" class=\"headerlink\" title=\"abi.encodePacked\"></a><code>abi.encodePacked</code></h4><p>将给定参数根据其所需最低空间编码。它类似 <code>abi.encode</code>，但是会把其中填充的很多<code>0</code>省略。比如，只用1字节来编码<code>uint</code>类型。当你想省空间，并且不与合约交互的时候，可以使用<code>abi.encodePacked</code>，例如算一些数据的<code>hash</code>时。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编码的结果为<code>0x000000000000000000000000000000000000000000000000000000000000000a7a58c0be72be218b41c608b7fe7c5bb630736c713078414100000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006</code>，由于<code>abi.encodePacked</code>对编码进行了压缩，长度比<code>abi.encode</code>短很多。</p>\n<h4 id=\"abi-encodeWithSignature\"><a href=\"#abi-encodeWithSignature\" class=\"headerlink\" title=\"abi.encodeWithSignature\"></a><code>abi.encodeWithSignature</code></h4><p>与<code>abi.encode</code>功能类似，只不过第一个参数为<code>函数签名</code>，比如<code>\"foo(uint256,address)\"</code>。当调用其他合约的时候可以使用。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo(uint256,address,string,uint256[2])\"</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编码的结果为<code>0xe87082f1000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c7100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043078414100000000000000000000000000000000000000000000000000000000</code>，等同于在<code>abi.encode</code>编码结果前加上了4字节的<code>函数选择器</code><a href=\"https://wtf.academy/solidity-advanced/ABIEncode/#fn-说明\">说明</a>。 <a href=\"https://wtf.academy/solidity-advanced/ABIEncode/#fn-说明\">说明</a>: 函数选择器就是通过函数名和参数进行签名处理(Keccak–Sha3)来标识函数，可以用于不同合约之间的函数调用</p>\n<h4 id=\"abi-encodeWithSelector\"><a href=\"#abi-encodeWithSelector\" class=\"headerlink\" title=\"abi.encodeWithSelector\"></a><code>abi.encodeWithSelector</code></h4><p>与<code>abi.encodeWithSignature</code>功能类似，只不过第一个参数为<code>函数选择器</code>，为<code>函数签名</code>Keccak哈希的前4个字节。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    result <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"foo(uint256,address,string,uint256[2])\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>编码的结果为<code>0xe87082f1000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000007a58c0be72be218b41c608b7fe7c5bb630736c7100000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000005000000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000043078414100000000000000000000000000000000000000000000000000000000</code>，与<code>abi.encodeWithSignature</code>结果一样。</p>\n<h3 id=\"ABI解码\"><a href=\"#ABI解码\" class=\"headerlink\" title=\"ABI解码\"></a>ABI解码</h3><h4 id=\"abi-decode\"><a href=\"#abi-decode\" class=\"headerlink\" title=\"abi.decode\"></a><code>abi.decode</code></h4><p><code>abi.decode</code>用于解码<code>abi.encode</code>生成的二进制编码，将它还原成原本的参数。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">decode</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> dx<span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span> daddr<span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> dname<span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">memory</span> darray<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span>dx<span class=\"token punctuation\">,</span> daddr<span class=\"token punctuation\">,</span> dname<span class=\"token punctuation\">,</span> darray<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">uint</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>我们将<code>abi.encode</code>的二进制编码输入给<code>decode</code>，将解码出原来的参数：</p>\n<p><img src=\"https://images.mirror-media.xyz/publication-images/jboRaaq0U57qVYjmsOgbv.png?height=408&amp;width=624\" alt=\"img\"></p>\n<h3 id=\"ABI的使用场景\"><a href=\"#ABI的使用场景\" class=\"headerlink\" title=\"ABI的使用场景\"></a>ABI的使用场景</h3><p>1.在合约开发中，ABI常配合call来实现对合约的底层调用。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes4</span> selector <span class=\"token operator\">=</span> <span class=\"token keyword\">contract</span><span class=\"token punctuation\">.</span>getValue<span class=\"token punctuation\">.</span>selector<span class=\"token punctuation\">;</span>\n\n<span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">,</span> _x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> returnedData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">contract</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">staticcall</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>returnedData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>2.ethers.js中常用ABI实现合约的导入和函数调用。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">const wavePortalContract <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ethers</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contract</span><span class=\"token punctuation\">(</span>contractAddress<span class=\"token punctuation\">,</span> contractABI<span class=\"token punctuation\">,</span> signer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">/*\n    * Call the getAllWaves method from your Smart Contract\n    */</span>\nconst waves <span class=\"token operator\">=</span> await wavePortalContract<span class=\"token punctuation\">.</span><span class=\"token function\">getAllWaves</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>3.对不开源合约进行反编译后，某些函数无法查到函数签名，可通过ABI进行调用。</p>\n<ul>\n<li><p>0x533ba33a() 是一个反编译后显示的函数，只有函数编码后的结果，并且无法查到函数签名 </p>\n<p><img src=\"https://s2.loli.net/2022/11/30/7BH1urKkUEnjPVS.png\" alt=\"image-20221130001453540.png\"></p>\n</li>\n<li><p>这种情况无法通过构造interface接口或contract来进行调用 </p>\n<p><img src=\"https://s2.loli.net/2022/11/30/P9JmTixdAYyHEL3.png\" alt=\"image-20221130001547298.png\"></p>\n</li>\n</ul>\n<p>这种情况下，就可以通过ABI函数选择器来调用</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data <span class=\"token operator\">=</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x533ba33a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> returnedData<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">contract</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">staticcall</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> abi<span class=\"token punctuation\">.</span><span class=\"token function\">decode</span><span class=\"token punctuation\">(</span>returnedData<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"28-Hash\"><a href=\"#28-Hash\" class=\"headerlink\" title=\"28.Hash\"></a>28.Hash</h2><p>哈希函数（hash function）是一个密码学概念，它可以将任意长度的消息转换为一个固定长度的值，这个值也称作哈希（hash）。</p>\n<h3 id=\"Hash的性质\"><a href=\"#Hash的性质\" class=\"headerlink\" title=\"Hash的性质\"></a>Hash的性质</h3><p>一个好的哈希函数应该具有以下几个特性：</p>\n<ul>\n<li>单向性：从输入的消息到它的哈希的正向运算简单且唯一确定，而反过来非常难，只能靠暴力枚举。</li>\n<li>灵敏性：输入的消息改变一点对它的哈希改变很大。</li>\n<li>高效性：从输入的消息到哈希的运算高效。</li>\n<li>均一性：每个哈希值被取到的概率应该基本相等。</li>\n<li>抗碰撞性：<ul>\n<li>弱抗碰撞性：给定一个消息<code>x</code>，找到另一个消息<code>x'</code>使得<code>hash(x) = hash(x')</code>是困难的。</li>\n<li>强抗碰撞性：找到任意<code>x</code>和<code>x'</code>，使得<code>hash(x) = hash(x')</code>是困难的。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Hash的应用\"><a href=\"#Hash的应用\" class=\"headerlink\" title=\"Hash的应用\"></a>Hash的应用</h3><ul>\n<li>生成数据唯一标识</li>\n<li>加密签名</li>\n<li>安全加密</li>\n</ul>\n<h3 id=\"Keccak256\"><a href=\"#Keccak256\" class=\"headerlink\" title=\"Keccak256\"></a>Keccak256</h3><p><code>Keccak256</code>函数是<code>solidity</code>中最常用的哈希函数，用法非常简单：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">哈希 <span class=\"token operator\">=</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>数据<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"Keccak256和sha3\"><a href=\"#Keccak256和sha3\" class=\"headerlink\" title=\"Keccak256和sha3\"></a>Keccak256和sha3</h4><ol>\n<li>sha3由keccak标准化而来，在很多场合下Keccak和SHA3是同义词，但在2015年8月SHA3最终完成标准化时，NIST调整了填充算法。<strong>所以SHA3就和keccak计算的结果不一样</strong>，这点在实际开发中要注意。</li>\n<li>以太坊在开发的时候sha3还在标准化中，所以采用了keccak，所以Ethereum和Solidity智能合约代码中的SHA3是指Keccak256，而不是标准的NIST-SHA3，为了避免混淆，直接在合约代码中写成Keccak256是最清晰的。</li>\n</ol>\n<h4 id=\"生成数据唯一标志\"><a href=\"#生成数据唯一标志\" class=\"headerlink\" title=\"生成数据唯一标志\"></a>生成数据唯一标志</h4><p>我们可以利用<code>keccak256</code>来生成一些数据的唯一标识。比如我们有几个不同类型的数据：<code>uint</code>，<code>string</code>，<code>address</code>，我们可以先用<code>abi.encodePacked</code>方法将他们打包编码，然后再用<code>keccak256</code>来生成唯一标识：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">hash</span><span class=\"token punctuation\">(</span>\n    <span class=\"token builtin\">uint</span> _num<span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> _string<span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">address</span> _addr\n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>_num<span class=\"token punctuation\">,</span> _string<span class=\"token punctuation\">,</span> _addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"弱抗碰撞性\"><a href=\"#弱抗碰撞性\" class=\"headerlink\" title=\"弱抗碰撞性\"></a>弱抗碰撞性</h4><p>我们用<code>keccak256</code>演示一下之前讲到的弱抗碰撞性，即给定一个消息<code>x</code>，找到另一个消息<code>x'</code>使得<code>hash(x) = hash(x')</code>是困难的。</p>\n<p>我们给定一个消息<code>0xAA</code>，试图去找另一个消息，使得它们的哈希值相等：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 弱抗碰撞性</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">weak</span><span class=\"token punctuation\">(</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> string1\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">view</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> _msg<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（大家可以试个10次，看看能不能幸运的碰撞上。）</p>\n<h4 id=\"强抗碰撞性\"><a href=\"#强抗碰撞性\" class=\"headerlink\" title=\"强抗碰撞性\"></a>强抗碰撞性</h4><p>我们用<code>keccak256</code>演示一下之前讲到的强抗碰撞性，即找到任意不同的<code>x</code>和<code>x'</code>，使得<code>hash(x) = hash(x')</code>是困难的。</p>\n<p>我们构造一个函数<code>strong</code>，接收两个不同的<code>string</code>参数<code>string1</code>和<code>string2</code>，然后判断它们的哈希是否相同：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 强抗碰撞性</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">strong</span><span class=\"token punctuation\">(</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> string1<span class=\"token punctuation\">,</span>\n    <span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> string2\n<span class=\"token punctuation\">)</span><span class=\"token keyword\">public</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>string1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodePacked</span><span class=\"token punctuation\">(</span>string2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>（大家可以试个10次，看看能不能幸运的碰撞上。）</p>\n<h2 id=\"29-选择器\"><a href=\"#29-选择器\" class=\"headerlink\" title=\"29.选择器\"></a>29.选择器</h2><h3 id=\"selector\"><a href=\"#selector\" class=\"headerlink\" title=\"selector\"></a><code>selector</code></h3><p>当我们调用智能合约时，本质上是向目标合约发送了一段<code>calldata</code>，在remix中发送一次交易后，可以在详细信息中看见<code>input</code>即为此次交易的<code>calldata</code></p>\n<p><img src=\"https://wtf.academy/assets/images/29-1-0cdac97a91d23b8b328265d1df3a56b5.png\" alt=\"tx input in remix\"></p>\n<p>发送的<code>calldata</code>中前4个字节是<code>selector</code>（函数选择器）。</p>\n<h4 id=\"msg-data\"><a href=\"#msg-data\" class=\"headerlink\" title=\"msg.data\"></a><code>msg.data</code></h4><p><code>msg.data</code>是<code>solidity</code>中的一个全局变量，值为完整的<code>calldata</code>（调用函数时传入的数据）。</p>\n<p>在下面的代码中，我们可以通过<code>Log</code>事件来输出调用<code>mint</code>函数的<code>calldata</code>：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// event 返回msg.data</span>\n<span class=\"token keyword\">event</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">mint</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">address</span> to<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">emit</span> <span class=\"token function\">Log</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>当参数为<code>0x2c44b726ADF1963cA47Af88B284C06f30380fC78</code>时，输出的<code>calldata</code>为</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">0x6a6278420000000000000000000000002c44b726adf1963ca47af88b284c06f30380fc78<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>这段很乱的字节码可以分成两部分：</p>\n<pre class=\"line-numbers language-text\" data-language=\"text\"><code class=\"language-text\">前4个字节为函数选择器selector：\n0x6a627842\n\n后面32个字节为输入的参数：\n0x0000000000000000000000002c44b726adf1963ca47af88b284c06f30380fc78<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其实<code>calldata</code>就是告诉智能合约，我要调用哪个函数，以及参数是什么。</p>\n<h4 id=\"method-id、selector和函数签名\"><a href=\"#method-id、selector和函数签名\" class=\"headerlink\" title=\"method id、selector和函数签名\"></a><code>method id</code>、<code>selector</code>和<code>函数签名</code></h4><p><code>method id</code>定义为<code>函数签名</code>的<code>Keccak</code>哈希后的前4个字节，当<code>selector</code>与<code>method id</code>相匹配时，即表示调用该函数，那么<code>函数签名</code>是什么？</p>\n<p>其实在第21讲中，我们简单介绍了函数签名，为<code>\"函数名（逗号分隔的参数类型)\"</code>。举个例子，上面代码中<code>mint</code>的函数签名为<code>\"mint(address)\"</code>。在同一个智能合约中，不同的函数有不同的函数签名，因此我们可以通过函数签名来确定要调用哪个函数。</p>\n<p><strong>注意</strong>：在函数签名中，<code>uint</code>和<code>int</code>要写为<code>uint256</code>和<code>int256</code>。</p>\n<p>我们写一个函数，来验证<code>mint</code>函数的<code>method id</code>是否为<code>0x6a627842</code>。大家可以运行下面的函数，看看结果。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">mintSelector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes4</span> mSelector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">bytes4</span><span class=\"token punctuation\">(</span><span class=\"token function\">keccak256</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mint(address)\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>结果正是<code>0x6a627842</code>：</p>\n<p><img src=\"https://wtf.academy/assets/images/29-2-c2fb1c121b8e30f44786780b5199b742.png\" alt=\"method id in remix\"></p>\n<h4 id=\"使用selector\"><a href=\"#使用selector\" class=\"headerlink\" title=\"使用selector\"></a>使用<code>selector</code></h4><p>我们可以利用<code>selector</code>来调用目标函数。例如我想调用<code>mint</code>函数，我只需要利用<code>abi.encodeWithSelector</code>将<code>mint</code>函数的<code>method id</code>作为<code>selector</code>和参数打包编码，传给<code>call</code>函数：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">function</span> <span class=\"token function\">callWithSignature</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">,</span> <span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> data<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">address</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>abi<span class=\"token punctuation\">.</span><span class=\"token function\">encodeWithSelector</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x6a627842</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"0x2c44b726ADF1963cA47Af88B284C06f30380fC78\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在日志中，我们可以看到<code>mint</code>函数被成功调用，并输出<code>Log</code>事件。</p>\n<p><img src=\"https://wtf.academy/assets/images/29-3-07556b49a00092690652925132b23219.png\" alt=\"logs in remix\"></p>\n<h2 id=\"30-Try-Catch\"><a href=\"#30-Try-Catch\" class=\"headerlink\" title=\"30.Try Catch\"></a>30.Try Catch</h2><p><code>try-catch</code>是现代编程语言几乎都有的处理异常的一种标准方式，<code>solidity</code>0.6版本也添加了它。</p>\n<h3 id=\"try-catch\"><a href=\"#try-catch\" class=\"headerlink\" title=\"try-catch\"></a><code>try-catch</code></h3><p>在<code>solidity</code>中，<code>try-catch</code><strong>只能</strong>被用于<strong><code>external</code>函数</strong>或<strong>创建合约时<code>constructor</code>（被视为<code>external</code>函数）的调用</strong>。基本语法如下：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">try externalContract<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call成功的情况下 运行一些代码</span>\n<span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call失败的情况下 运行一些代码</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>其中<code>externalContract.f()</code>是某个外部合约的函数调用，<code>try</code>模块在<strong>调用成功</strong>的情况下运行，而<code>catch</code>模块则在<strong>调用失败</strong>时运行。</p>\n<p>同样可以使用<code>this.f()</code>来替代<code>externalContract.f()</code>，<code>this.f()</code>也被视作为外部调用，但不可在构造函数中使用，因为此时合约还未创建。</p>\n<p>如果调用的函数有返回值，那么必须在<code>try</code>之后声明<code>returns(returnType val)</code>，并且在<code>try</code>模块中可以使用返回的变量；如果是创建合约，那么返回值是新创建的合约变量。</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">try externalContract<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span>returnType val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call成功的情况下 运行一些代码</span>\n<span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call失败的情况下 运行一些代码</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另外，<code>catch</code>模块支持捕获特殊的异常原因：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\">try externalContract<span class=\"token punctuation\">.</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span>returnType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// call成功的情况下 运行一些代码</span>\n<span class=\"token punctuation\">}</span> catch <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> reason<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 捕获失败的 revert() 和 require()</span>\n<span class=\"token punctuation\">}</span> catch <span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> <span class=\"token keyword\">memory</span> reason<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 捕获失败的 assert()</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"try-catch实战\"><a href=\"#try-catch实战\" class=\"headerlink\" title=\"try-catch实战\"></a><code>try-catch</code>实战</h3><h4 id=\"onlyEven\"><a href=\"#onlyEven\" class=\"headerlink\" title=\"onlyEven\"></a><code>onlyEven</code></h4><p>我们创建一个外部合约<code>OnlyEven</code>，并使用<code>try-catch</code>来处理异常：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token keyword\">contract</span> <span class=\"token class-name\">OnlyEven</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"invalid number\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">assert</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">function</span> <span class=\"token function\">onlyEven</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint256</span> b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">pure</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 输入奇数时revert</span>\n        <span class=\"token keyword\">require</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Ups! Reverting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        success <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>OnlyEven</code>合约包含一个构造函数和一个<code>onlyEven</code>函数。</p>\n<ul>\n<li>构造函数有一个参数<code>a</code>，当<code>a=0</code>时，<code>require</code>会抛出异常；当<code>a=1</code>时，<code>assert</code>会抛出异常；其他情况均正常。</li>\n<li><code>onlyEven</code>函数有一个参数<code>b</code>，当<code>b</code>为奇数时，<code>require</code>会抛出异常。</li>\n</ul>\n<h4 id=\"处理外部函数调用异常\"><a href=\"#处理外部函数调用异常\" class=\"headerlink\" title=\"处理外部函数调用异常\"></a>处理外部函数调用异常</h4><p>首先，在<code>TryCatch</code>合约中定义一些事件和状态变量：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 成功event</span>\n<span class=\"token keyword\">event</span> <span class=\"token function\">SuccessEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 失败event</span>\n<span class=\"token keyword\">event</span> <span class=\"token function\">CatchEvent</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">event</span> <span class=\"token function\">CatchByte</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bytes</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 声明OnlyEven合约变量</span>\nOnlyEven even<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    even <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">OnlyEven</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>SuccessEvent</code>是调用成功会释放的事件，而<code>CatchEvent</code>和<code>CatchByte</code>是抛出异常时会释放的事件，分别对应<code>require/revert</code>和<code>assert</code>异常的情况。<code>even</code>是个<code>OnlyEven</code>合约类型的状态变量。</p>\n<p>然后我们在<code>execute</code>函数中使用<code>try-catch</code>处理调用外部函数<code>onlyEven</code>中的异常：</p>\n<pre class=\"line-numbers language-solidity\" data-language=\"solidity\"><code class=\"language-solidity\"><span class=\"token comment\">// 在external call中使用try-catch</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">execute</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">uint</span> amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">external</span> <span class=\"token keyword\">returns</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    try even<span class=\"token punctuation\">.</span><span class=\"token function\">onlyEven</span><span class=\"token punctuation\">(</span>amount<span class=\"token punctuation\">)</span> <span class=\"token keyword\">returns</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">bool</span> _success<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// call成功的情况下</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">SuccessEvent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> _success<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> catch <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span> <span class=\"token keyword\">memory</span> reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// call不成功的情况下</span>\n        <span class=\"token keyword\">emit</span> <span class=\"token function\">CatchEvent</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"solidity进阶16.函数重载重载solidity中允许函数进行重载（overloading），即名字相同但输入参数类型不同的函数可以同时存在，他们被视为不同的函数。注意，solidity不允许修饰器（modifier）重载。 函数重载举个例子，我们可以定义两个都叫saySo...","link":"","photos":[],"count_time":{"symbolsCount":"35k","symbolsTime":"32 mins."},"categories":[],"tags":[{"name":"solidity","slug":"solidity","count":2,"path":"api/tags/solidity.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#solidity%E8%BF%9B%E9%98%B6\"><span class=\"toc-text\">solidity进阶</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#16-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">16.函数重载</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">重载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD\"><span class=\"toc-text\">函数重载</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E5%8F%82%E5%8C%B9%E9%85%8D%EF%BC%88Argument-Matching%EF%BC%89\"><span class=\"toc-text\">实参匹配（Argument Matching）</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#17-%E5%BA%93%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">17.库合约</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%93%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">库函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#String%E5%BA%93%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">String库合约</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E5%BA%93%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">如何使用库合约</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#18-Import\"><span class=\"toc-text\">18.Import</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#import%E7%94%A8%E6%B3%95\"><span class=\"toc-text\">import用法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#19-%E6%8E%A5%E5%8F%97ETH\"><span class=\"toc-text\">19.接受ETH</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%97ETH%E5%87%BD%E6%95%B0receive\"><span class=\"toc-text\">接受ETH函数receive</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E9%80%80%E5%87%BD%E6%95%B0fallback\"><span class=\"toc-text\">回退函数fallback</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#receive%E5%92%8Cfallback%E7%9A%84%E5%8C%BA%E5%88%AB\"><span class=\"toc-text\">receive和fallback的区别</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#20-%E5%8F%91%E9%80%81ETH\"><span class=\"toc-text\">20.发送ETH</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%A5%E5%8F%97ETH%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">接受ETH合约</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8F%91%E9%80%81ETH%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">发送ETH合约</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#transfer\"><span class=\"toc-text\">transfer</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#send\"><span class=\"toc-text\">send</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#call\"><span class=\"toc-text\">call</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E8%80%85%E7%9A%84%E9%80%89%E6%8B%A9\"><span class=\"toc-text\">三者的选择</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#21-%E8%B0%83%E7%94%A8%E5%85%B6%E4%BB%96%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">21.调用其他合约</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">目标合约</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8OtherContract%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">调用OtherContract合约</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#1-%E4%BC%A0%E5%85%A5%E5%90%88%E7%BA%A6%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">1.传入合约地址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#2-%E4%BC%A0%E5%85%A5%E5%90%88%E7%BA%A6%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">2.传入合约变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#3-%E5%88%9B%E5%BB%BA%E5%90%88%E7%BA%A6%E5%8F%98%E9%87%8F\"><span class=\"toc-text\">3.创建合约变量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#4-%E8%B0%83%E7%94%A8%E5%90%88%E7%BA%A6%E5%B9%B6%E5%8F%91%E9%80%81ETH\"><span class=\"toc-text\">4.调用合约并发送ETH</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#22-Call\"><span class=\"toc-text\">22.Call</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#call%E7%9A%84%E4%BD%BF%E7%94%A8%E8%A7%84%E5%88%99\"><span class=\"toc-text\">call的使用规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%9B%AE%E6%A0%87%E5%90%88%E7%BA%A6-1\"><span class=\"toc-text\">目标合约</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A9%E7%94%A8call%E8%B0%83%E7%94%A8%E7%9B%AE%E6%A0%87%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">利用call调用目标合约</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#23-Delegatecall\"><span class=\"toc-text\">23.Delegatecall</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%83%85%E5%86%B5%E4%B8%8B%E4%BC%9A%E7%94%A8%E5%88%B0delegatecall\"><span class=\"toc-text\">什么情况下会用到delegatecall</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#delegatecall%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">delegatecall例子</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%A2%AB%E8%B0%83%E7%94%A8%E7%9A%84%E5%90%88%E7%BA%A6C\"><span class=\"toc-text\">被调用的合约C</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%8F%91%E8%B5%B7%E8%B0%83%E7%94%A8%E7%9A%84%E5%90%88%E7%BA%A6B\"><span class=\"toc-text\">发起调用的合约B</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8remix%E4%B8%8A%E9%AA%8C%E8%AF%81\"><span class=\"toc-text\">在remix上验证</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#24-%E5%9C%A8%E5%90%88%E7%BA%A6%E4%B8%AD%E5%88%9B%E5%BB%BA%E6%96%B0%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">24.在合约中创建新合约</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#create%E5%92%8Ccreate2\"><span class=\"toc-text\">create和create2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%81%E7%AE%80Uniswap\"><span class=\"toc-text\">极简Uniswap</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Pair%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">Pair合约</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PairFactory\"><span class=\"toc-text\">PairFactory</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8remix%E4%B8%8A%E9%AA%8C%E8%AF%81-1\"><span class=\"toc-text\">在remix上验证</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#25-Create2\"><span class=\"toc-text\">25.Create2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Create%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">Create如何计算地址</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Create2%E5%A6%82%E4%BD%95%E8%AE%A1%E7%AE%97%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">Create2如何计算地址</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Create2\"><span class=\"toc-text\">如何使用Create2</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%81%E7%AE%80Uniswap2\"><span class=\"toc-text\">极简Uniswap2</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Pair\"><span class=\"toc-text\">Pair</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PairFactory2\"><span class=\"toc-text\">PairFactory2</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%85%88%E8%AE%A1%E7%AE%97Pair%E5%9C%B0%E5%9D%80\"><span class=\"toc-text\">事先计算Pair地址</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9C%A8remix%E4%B8%8A%E9%AA%8C%E8%AF%81-2\"><span class=\"toc-text\">在remix上验证</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#create2%E7%9A%84%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">create2的实际应用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#26-%E5%88%A0%E9%99%A4%E5%90%88%E7%BA%A6\"><span class=\"toc-text\">26.删除合约</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#selfdestruct\"><span class=\"toc-text\">selfdestruct</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8selfdestruct\"><span class=\"toc-text\">如何使用selfdestruct</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BE%8B%E5%AD%90\"><span class=\"toc-text\">例子</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9\"><span class=\"toc-text\">注意事项</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#27-ABI%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81\"><span class=\"toc-text\">27.ABI编码解码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ABI%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">ABI编码</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#abi-encode\"><span class=\"toc-text\">abi.encode</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#abi-encodePacked\"><span class=\"toc-text\">abi.encodePacked</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#abi-encodeWithSignature\"><span class=\"toc-text\">abi.encodeWithSignature</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#abi-encodeWithSelector\"><span class=\"toc-text\">abi.encodeWithSelector</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ABI%E8%A7%A3%E7%A0%81\"><span class=\"toc-text\">ABI解码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#abi-decode\"><span class=\"toc-text\">abi.decode</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#ABI%E7%9A%84%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF\"><span class=\"toc-text\">ABI的使用场景</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#28-Hash\"><span class=\"toc-text\">28.Hash</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hash%E7%9A%84%E6%80%A7%E8%B4%A8\"><span class=\"toc-text\">Hash的性质</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Hash%E7%9A%84%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">Hash的应用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Keccak256\"><span class=\"toc-text\">Keccak256</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Keccak256%E5%92%8Csha3\"><span class=\"toc-text\">Keccak256和sha3</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%95%B0%E6%8D%AE%E5%94%AF%E4%B8%80%E6%A0%87%E5%BF%97\"><span class=\"toc-text\">生成数据唯一标志</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%B1%E6%8A%97%E7%A2%B0%E6%92%9E%E6%80%A7\"><span class=\"toc-text\">弱抗碰撞性</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BC%BA%E6%8A%97%E7%A2%B0%E6%92%9E%E6%80%A7\"><span class=\"toc-text\">强抗碰撞性</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#29-%E9%80%89%E6%8B%A9%E5%99%A8\"><span class=\"toc-text\">29.选择器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#selector\"><span class=\"toc-text\">selector</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#msg-data\"><span class=\"toc-text\">msg.data</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#method-id%E3%80%81selector%E5%92%8C%E5%87%BD%E6%95%B0%E7%AD%BE%E5%90%8D\"><span class=\"toc-text\">method id、selector和函数签名</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8selector\"><span class=\"toc-text\">使用selector</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#30-Try-Catch\"><span class=\"toc-text\">30.Try Catch</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#try-catch\"><span class=\"toc-text\">try-catch</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#try-catch%E5%AE%9E%E6%88%98\"><span class=\"toc-text\">try-catch实战</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#onlyEven\"><span class=\"toc-text\">onlyEven</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%A4%96%E9%83%A8%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E5%BC%82%E5%B8%B8\"><span class=\"toc-text\">处理外部函数调用异常</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"cocoZ","slug":"cocoz","avatar":"https://s2.loli.net/2022/12/17/7LdKkiUEVc9wQ1x.jpg","link":"/","description":"想越来越优秀！！！<br/>要变得越来越听话！！！ <br/> @ <b·>QQ:1601760796<b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"ChatGPT的搭建","uid":"462812fbbc64f9c8b5d4c209bcb7fd5a","slug":"ChatGPT","date":"2023-03-20T04:15:54.000Z","updated":"2023-03-20T04:19:47.035Z","comments":true,"path":"api/articles/ChatGPT.json","keywords":null,"cover":"https://s2.loli.net/2022/12/17/6h9QCTbrRjUsx1c.jpg","text":"什么是ChatGPT 我是 Assistant，一个由 OpenAI 训练的大型语言模型。我可以回答您的问题，并帮助您了解更多关于特定主题的信息。我并不具备自己的意识，只能通过我所学到的知识来回答问题。如果您有任何其他问题，请随时问我。我很乐意帮助您。 —ChatGPT 什么是O...","link":"","photos":[],"count_time":{"symbolsCount":795,"symbolsTime":"1 mins."},"categories":[],"tags":[{"name":"ChatGPT","slug":"ChatGPT","count":1,"path":"api/tags/ChatGPT.json"}],"author":{"name":"cocoZ","slug":"cocoz","avatar":"https://s2.loli.net/2022/12/17/7LdKkiUEVc9wQ1x.jpg","link":"/","description":"想越来越优秀！！！<br/>要变得越来越听话！！！ <br/> @ <b·>QQ:1601760796<b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"solidity入门","uid":"3b889475d55359c53070293a35d903d7","slug":"solidity入门","date":"2022-11-26T16:55:02.000Z","updated":"2022-12-17T12:18:51.054Z","comments":true,"path":"api/articles/solidity入门.json","keywords":null,"cover":"https://s2.loli.net/2022/12/17/eOYWR2zZ9rqSchP.jpg","text":"solidity1.入门// SPDX-License-Identifier: MIT //这个代码所用的软件许可，如果不写许可，编译时会警告 pragma solidity ^0.8.4; //声明源文件所用的solidity版本 contract HelloWeb3{ //创...","link":"","photos":[],"count_time":{"symbolsCount":"22k","symbolsTime":"20 mins."},"categories":[],"tags":[{"name":"solidity","slug":"solidity","count":2,"path":"api/tags/solidity.json"}],"author":{"name":"cocoZ","slug":"cocoz","avatar":"https://s2.loli.net/2022/12/17/7LdKkiUEVc9wQ1x.jpg","link":"/","description":"想越来越优秀！！！<br/>要变得越来越听话！！！ <br/> @ <b·>QQ:1601760796<b>","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}